[-------Hardcoded Screen Names------]
[ScreenHowToPlay]
Stepfile=
NumMisses=
NumPerfects=
UseNotefield=
UsePad=
UseCharacter=
UseLifeMeterBar=

# redirects for hardcoded screen names:
[ScreenArcadeStart]
Fallback=ArcadeStart
[ScreenProfileOptions]
Fallback=Redirect
NextScreen1=screen,Profiles
[ScreenJukebox]
Fallback=Redirect
NextScreen1=screen,Jukebox
[ScreenSMOnlineLogin]
Fallback=Redirect
NextScreen1=screen,SMOnlineLogin
[ScreenNetSelectMusic]
Fallback=Redirect
NextScreen1=screen,NetSelectMusic
[ScreenPlayerOptions]
Fallback=PlayerOptions
[ScreenSongOptions]
Fallback=SongOptions
[ScreenSaveSync]
Fallback=EditSaveSync
[ScreenPrompt]
Fallback=Prompt
[ScreenTextEntry]
Fallback=TextEntry
[ScreenNameEntryTraditional Percent]
Fallback=NameEntry Percent
[ScreenEnding]
Fallback=Ending
[ScreenGameplay]
Fallback=Gameplay
[ScreenEvaluation Percent]
Fallback=Evaluation Percent
[ScreenEvaluation DifficultyMeterP1]
Fallback=Evaluation DifficultyMeterP1
[ScreenEvaluation DifficultyMeterP2]
Fallback=Evaluation DifficultyMeterP2
[ScreenNameEntryTraditional]
Fallback=NameEntry

# redirects for hardcoded path names:
[ScreenNameEntry]
Fallback=NameEntryDDR
[ScreenLogo]
# For hardcoded fallback actor names, eg: "G/ScreenLogo dance" "G/ScreenLogo pump"
# [Logo] falls back onto this, which then falls back to Attract. For fallback actors to load and set CurGame
Fallback=Attract
[ScreenAttract]
Fallback=Attract
[ScreenDebugOverlay]
Fallback=DebugOverlay

[------Theme Header------]
[Preferences]
DisplayAspectRatio=@math.round(GetPref("DisplayAspectRatio")*900)/900
DisplayColorDepth=32
TextureColorDepth=32
MovieColorDepth=32
DelayedTextureDelete=@Bool[false]
Minimum1FullSongInCourses=@Bool[true]
FastLoad=@Bool[true]
TwoPlayerRecovery=@Bool[false]
MercifulDrain=@Bool[false]
ArcadeOptionsNavigation=@Bool[true]
EasterEggs=@Bool[false]
EasterEggs2=@Bool[false]
HiddenSongs=@Bool[true]
DelayedCreditsReconcile=@Bool[true]
PercentageScoring=@Bool[true]
# was true, but we're not using ghostdata functionality atm
DancePointsForOni=@Bool[false]
AutogenSteps=@Bool[false]
AutogenGroupCourses=@Bool[false]
LockCourseDifficulties=@Bool[false]
MemoryCardProfileImportSubdirs=In The Groove
MemoryCardProfileSubdir=In The Groove 2
ProductID=5
AllowExtraStage=@Bool[false]
AllowMultipleHighScoreWithSameName=@Bool[false]
PreferredSortUsesGroups=@Bool[false]	
ForceMipMaps=@Bool[true]
AnisotropicFiltering=@Bool[true]
SignProfileData=@Bool[true]
SubSortByNumSteps=@Bool[true]
ComboContinuesBetweenSongs=@Bool[true]
SmoothLines=@Bool[true]
# halogens, neons:
LightsStepsDifficulty=hard,medium
CourseSelectUsesSections=@Bool[true]
ValidateSpeedMods=@Bool[false]
GameEndStats=@Bool[false]
SaveCatalogXml=@Bool[false]
JudgeWindowScale=1.000000
JudgeWindowSecondsMine=0.070000
#Remove the wayoff window, since it's never shown:
JudgeWindowSecondsBoo=0.135000
JudgeWindowSecondsGood=0.135000
JudgeWindowSecondsGreat=0.102000
JudgeWindowSecondsPerfect=0.043000
JudgeWindowSecondsMarvelous=0.021500
JudgeWindowSecondsOK=0.320000
JudgeWindowSecondsAttack=0.130000
GradeWeightHitMine=-6
GradeWeightMiss=-12
GradeWeightBoo=-6
GradeWeightGood=0
GradeWeightGreat=2
GradeWeightPerfect=4
GradeWeightMarvelous=5
GradeWeightNG=0
GradeWeightOK=5
PercentScoreWeightHitMine=-6
PercentScoreWeightMiss=-12
PercentScoreWeightBoo=-6
PercentScoreWeightGood=0
PercentScoreWeightGreat=2
PercentScoreWeightPerfect=4
PercentScoreWeightMarvelous=5
PercentScoreWeightNG=0
PercentScoreWeightOK=5
LifeDeltaPercentChangeHitMine=-0.050
LifeDeltaPercentChangeMiss=-0.100
LifeDeltaPercentChangeBoo=-0.050
LifeDeltaPercentChangeGood=0.0
LifeDeltaPercentChangeGreat=0.004
LifeDeltaPercentChangePerfect=0.008
LifeDeltaPercentChangeMarvelous=0.008
LifeDeltaPercentChangeNG=-0.080
LifeDeltaPercentChangeOK=0.008
TimeMeterSecondsChangeMarvelous=0.2
TimeMeterSecondsChangePerfect=0
TimeMeterSecondsChangeGreat=-0.5
TimeMeterSecondsChangeGood=-1
TimeMeterSecondsChangeBoo=-2
TimeMeterSecondsChangeMiss=-4
TimeMeterSecondsChangeHitMine=-2
TimeMeterSecondsChangeOK=0
TimeMeterSecondsChangeNG=-4
# fail 30 misses depends on this to work, the other default mods are defined in "Metrics Profile Defaults"
DefaultModifiers=1.5x, FailEndOfSong, cel, hallway
# IsArcade() reads this flag
AllowOldKeyboardInput=@Bool[true]
# Custom Defaults gets applied here:
SoundVolume=@CheckPrefDefaults(0.7)
LogFPS=@Bool[false]
HideDefaultNoteSkin=@Bool[true]

#This gets evaluated first, if this is blank then the game will overwrite this with whatever's in [ScreenRanking] CoursesToShow
#basically this always should be blank unless you want the DDR-Extreme style ranking screens (bullet, name, money score - per course)
CoursesToShow=

# D3D doesn't render masks properly (eg, name entry box)
VideoRenderers=opengl

# Force this on on boot, so wheel-state events work (this happens by piggybacking off FadingBanner).
BannerCache=@clamp(GetPref("BannerCache"),1,2)
ShowBanners=1

# Since debug overlay is turned off, also force various debugging features off (can be re-enabled in debug menu) 
AutoPlay=0
ScreenTestMode=@Bool[false]
DebugLights=@Bool[false]
MonkeyInput=@Bool[false]
ShowStats=@Bool[false]
Timestamping=@Bool[false]

[Preferences-machine]
Fallback=Preferences
ShowLyrics=@Bool[false]
ShowLoadingWindow=@Bool[false]
ShowLogOutput=@Bool[false]
ShowStats=@Bool[false]
Timestamping=@Bool[false]
MonkeyInput=@Bool[false]
LogFPS=@Bool[false]
AutoPlay=@Bool[false]
LogToDisk=@Bool[false]
AutogenSteps=@Bool[false]
DisplayColorDepth=32
TextureColorDepth=32
MovieColorDepth=32
Vsync=@Bool[true]
Windowed=@Bool[false]
TrilinearFiltering=@Bool[true]
AnisotropicFiltering=@Bool[true]
MemoryCards=@Bool[true]
OnlyDedicatedMenuButtons=@Bool[true]
ConstantUpdateDeltaSeconds=@GetPrefOrDefault('ConstantUpdateDeltaSeconds',1/60)
RefreshRate=@GetPrefOrDefault('RefreshRate',60)
SoloSingle=@Bool[false]
SoundWriteAhead=2048
SignProfileData=@Bool[true]
# Some machines map different ports.
MemoryCardUsbBusP1=@GetPrefOrDefault('MemoryCardUsbBusP1',-1)
MemoryCardUsbBusP2=@GetPrefOrDefault('MemoryCardUsbBusP2',-1)
MemoryCardUsbLevelP1=@GetPrefOrDefault('MemoryCardUsbLevelP1',-1)
MemoryCardUsbLevelP2=@GetPrefOrDefault('MemoryCardUsbLevelP2',-1)
MemoryCardUsbPortP1=@GetPrefOrDefault('MemoryCardUsbPortP1',1)
MemoryCardUsbPortP2=@GetPrefOrDefault('MemoryCardUsbPortP2',4)
FastLoad=@Bool[true]
#These windows don't appear anyway in full screen, but just in case.
IgnoredMessageWindows=MissingThemeElement,FRAME_DIMENSIONS_WARNING,COMMAND_DEFINED_TWICE,BROKEN_FILE_REFERENCE,INVALID_GAME_COMMAND,INVALID_PLAYER_OPTION_WARNING,INVALID_PLAYER_OPTION_WANRING,SPRITE_INVALID_FRAME,XML_PARSE_ERROR,LUA_ERROR
# arcade detection flag
AllowOldKeyboardInput=@Bool[false]

SongEdits=@Bool[not not GetPrefOrDefault("SongEdits",true)]
CustomSongPreviews=@Bool[not not GetPrefOrDefault("CustomSongPreviews",true)]

# Unused prefs to repurpose: (these all default to False)
# Select button available:
BreakComboToGetItem=@Bool[false]
# Select+Start goes back in event:
TexturePreload=@Bool[false]
# Mods menu: dpad menu navigation (start goes straight to bottom):
LightsChartsInMenus=@Bool[false]

[Preferences-itgcommon]
# ITG common drivers
Fallback=Preferences-machine
#If LastSeenVideoDriver doesn't match the detected video driver, the game will overwrite video settings.
LastSeenVideoDriver=OpenGL
VideoRenderers=opengl
LightsDriver=ext
# Let ScreenArcadeStart load the ITG drivers
InputDrivers=

[Preferences-hdcabinet]
# Use a new section to support HD mode
# No dedi is going to be able to run 1280x720 unless a custom image is used.
# Also apply some reasonable defaults for global offset and JWA.
Fallback=Preferences-itgcommon
DisplayWidth=1280
DisplayHeight=720
DisplayAspectRatio=@16/9
GlobalOffsetSeconds=@GetPrefOrDefault('GlobalOffsetSeconds',-0.012)
JudgeWindowAdd=@GetPrefOrDefault('JudgeWindowAdd',0.0015)
# force piuio so custom mappings don't get reverted:
InputDrivers=@GetPrefOrDefault('InputDrivers','PIUIO,X11')

BreakComboToGetItem=@Bool[false]
TexturePreload=@Bool[false]
LightsChartsInMenus=@Bool[true]

[Preferences-fhdcabinet]
#X2 runs a FHD display
Fallback=Preferences-hdcabinet
DisplayWidth=1920
DisplayHeight=1080
DisplayAspectRatio=@16/9
#RefreshRate=0
#ConstantUpdateDeltaSeconds=0

[Preferences-cabinet]
# ITG Dedicab
Fallback=Preferences-itgcommon
DisplayWidth=640
DisplayHeight=480
DisplayAspectRatio=@4/3
# Many dedis are resynced to -0.015 (because of SL) but the default theme uses -0.012
GlobalOffsetSeconds=@GetPrefOrDefault('GlobalOffsetSeconds',-0.012)
JudgeWindowAdd=@GetPrefOrDefault('JudgeWindowAdd',0.0015)

BreakComboToGetItem=@Bool[true]
TexturePreload=@Bool[false]
LightsChartsInMenus=@Bool[false]

[Preferences-kit]
# ITG Upgrade kit
Fallback=Preferences-itgcommon
DisplayWidth=640
DisplayHeight=240
DisplayAspectRatio=@4/3
GlobalOffsetSeconds=@GetPrefOrDefault('GlobalOffsetSeconds',-0.007)
JudgeWindowAdd=@GetPrefOrDefault('JudgeWindowAdd',0)

ArcadeOptionsNavigation=@Bool[true]
BreakComboToGetItem=@Bool[false]
TexturePreload=@Bool[false]
LightsChartsInMenus=@Bool[false]

[Preferences-p3common]
# DDR Python3 hardware drivers
Fallback=Preferences-machine
InputDrivers=P3IO
LightsDrivers=EXTIO,Satellite
CabinetType=SD

[Preferences-p3hdcabinet]
# DDR X Dedicab
Fallback=Preferences-p3common
DisplayWidth=1920
DisplayHeight=1080
DisplayAspectRatio=@16/9
InputDrivers=P3IO
LightsDrivers=EXTIO,Satellite
CabinetType=HD

BreakComboToGetItem=@Bool[false]
TexturePreload=@Bool[false]
LightsChartsInMenus=@Bool[true]

[Preferences-p3sdcabinet]
# DDR X Upgrade
Fallback=Preferences-p3common
DisplayWidth=640
DisplayHeight=480
DisplayAspectRatio=@4/3
InputDrivers=P3IO
LightsDrivers=EXTIO,Satellite
CabinetType=SD

ArcadeOptionsNavigation=@Bool[true]
BreakComboToGetItem=@Bool[false]
TexturePreload=@Bool[false]
LightsChartsInMenus=@Bool[false]

[Preferences-ps2]
# UNTESTED
# Copy the PS2 stuff out of the default theme in case someone decides to throw this on ITG PS2 I guess?
Fallback=Preferences
Theme=ps2
ShowLoadingWindow=0
ShowLogOutput=0
Vsync=1
Windowed=0
MemoryCards=1
OnlyDedicatedMenuButtons=0
MusicWheelUsesSections=0
CoinMode=0
Premium=0
BGBrightness=0.600000
AttractSoundFrequency=1
MenuTimer=0
LastSeenVideoDriver=PS2
VideoRenderers=PS2
SoundWriteAhead=2048
LightsDriver=null
SignProfileData=0
FirstRun=0
MemoryCardUsbBusP1=1
MemoryCardUsbBusP2=4
BannerCache=2
PalettedBannerCache=1
DelayedScreenLoad=1
MaxHighScoresPerListForMachine=1
MaxHighScoresPerListForPlayer=0
MinPercentageForMachineCourseHighScore=0.0001
MinPercentageForMachineSongHighScore=0.0001
JudgeWindowAdd=+0.002
EditorShowBGChangesPlay=0

[--]
[Global]
FallbackTheme=

[Common]
#All evaluated on theme load:
WindowTitle=@"substrate"..(GetProductName and " - "..GetProductName() or " - StepMania 3.95")
ScreenWidth=640
ScreenHeight=THEME:GetMetric("Common","ScreenWidth")*.75
InitialScreen=@Branch.Boot()
#FirstAttractScreen is only used by stepmania to increment m_iNumTimesThroughAttract, if a ScreenAttract-class screen's name matches this.
FirstAttractScreen=@Branch.FirstAttract()
#Affects diffuse of: evaluation judge/stats/score/time numbers, selectmusic ddr highscore, scoredisplaynormal score, scoredisplayoni score, grooveradar.
ColorP1=1,1,1,1
ColorP2=1,1,1,1
DefaultModifiers=1x,cel,overhead
DefaultCpuModifiers=cel,hallway
# 0 = EDIT_MODE_PRACTICE = can't make or delete charts (Bug: throws an access vio when scrolling to a song without the current style/difficulty)
# 1 = EDIT_MODE_HOME     = can only make edits (BUG: Edit Mode Home can't save anything, due to missing PS2 specific screens that seem to handle saving)
# 2 = EDIT_MODE_FULL     = full
EditMode=2
#never show "Various":
MaxCourseEntriesBeforeShowVarious=2147483647
#except dance-single, dance-double, all pump, techno-single8:
StepsTypesToHide=dance-solo,dance-couple,lights-cabinet,pump-couple,ez2-single,ez2-double,ez2-real,para-single,para-versus,ds3ddx-single,bm-single5,bm-double5,bm-single7,bm-double7,maniax-single,maniax-double,techno-single4,techno-single5,techno-double4,techno-double5,pnm-five,pnm-nine
DifficultiesToShow=@join(",",SelectableDifficulties)
CourseDifficultiesToShow=@join(",",SelectableCourseDifficulties)

# For whatever reason, DebugOverlay is needed for the ingame F keys to work (not just the F3 menu)
OverlayScreens=@"SystemOverlay,DebugOverlay,SyncOverlay"..(OPENITG and ",GlobalInputHandler" or "")

[Unlocks]
UnlockNames=
[------Dummy------]
#What uses these bindings? These are only here to shut stepmania up when used with no fallback. (All evaluated on theme load)
[OptionNames]
Exit=exit
[OptionExplanations]
OptionRow=
[OptionTitles]
OptionRow=
[Inventory]
ItemUseRateSeconds=
[ScoreKeeperRave]
AttackDurationSeconds=
[CombinedLifeMeterTug]
MeterWidth=
[DifficultyDisplay]
IconOnCommand=
IconOffCommand=
[PlayMode]
Regular=
Nonstop=
Oni=
Endless=
Battle=
Rave=

[------Boot------]
# Boot-time checks

[@Branch.Boot()]
#3.9
Fallback=ScreenSandbox

[Boot]
AllowOperatorMenuButton=Bool[false]
Class=ScreenSplash
Fallback=CommonBlankNoBG
PrevScreen=Boot
AllowStartToSkip=Bool[false]
MinimumLoadDelaySeconds=0
PrepareScreen=Bool[false]
TimerSeconds=0.1
ForceTimer=Bool[true]
TimerStealth=Bool[true]
#SM5 already has its own Lua crash handler. ITG could do with one though.
InitCommand=%function(s) end
#InitCommand=%function(s) crash.handler.register(_G,{MessageManager,tostring}) end
#,{TitleMenuEntries,ComboColours,split,string.find}) end
ScreenInitCommand=
NextScreen=Boot2
ShowStage=@Bool[false]
StyleIcon=Bool[false]
MemoryCardIcons=Bool[false]

[Boot2]
Fallback=Screen
Class=ScreenBranch
Choices=1,2
Condition1=not (IsArcade() or GetSysConfig().IgnoreBootResolution) and OPENITG and PREFSMAN:GetPreference("DisplayWidth")==640 and PREFSMAN:GetPreference("DisplayHeight")==480
NextScreen1=screen,Boot3
Condition2=true
NextScreen2=screen,Boot4

[Boot3]
Fallback=Screen
Class=ScreenTest
InitCommand=%function(s) for p,v in next,{DisplayWidth=1280,DisplayHeight=720,DisplayAspectRatio=16/9},nil do SetPref(p,v) end (GameState.DelayedGameCommand or GameState.ApplyGameCommand)(GAMESTATE,"reloadtheme;screen,Boot4") end

[Boot4]
Fallback=Boot
InitCommand=%function(s) Screens.Start(s) end
ScreenInitCommand=%Screens.Start
NextScreen=@Branch.Start()

[------Screen Classes------]
[Screen]
AllowOperatorMenuButton=@Bool[true]
ScreenInitCommand=%Screens.Common.Init
InitCommand=%Screens.Common.Init

[--]
[Common]
Fallback=Screen
PlayMusic=@Bool[not not GetSysConfig().MenuMusic]
StopMusicOnBack=@Bool[not GetSysConfig().MenuMusic]
WaitForChildrenBeforeTweeningOut=@Bool[false]
FirstUpdateCommand=Screens.Common.FirstUpdate(self)
ScreenFirstUpdateCommand=
HeaderX=
HeaderY=
HeaderOnCommand=visible,Bool[false]
StyleIcon=@Bool[not not (CurStyleName()~="none" and GetEnv("ProfileLoaded"))]
StyleIconX=Metrics.System.StyleIconXY[1]
StyleIconY=Metrics.System.StyleIconXY[2]
StyleIconOnCommand=
ShowStage=@Bool[not not (CurStyleName()~="none" and not IsDemonstration() and GetEnv("ProfileLoaded"))]
StageOnCommand=%StageText
MemoryCardIcons=@Bool[true]
MemoryCardDisplayP1X=Metrics.System.USBIconX[1]
MemoryCardDisplayP1Y=Metrics.System.USBIconY
MemoryCardDisplayP1OnCommand=%function(s) MemoryCardDisplay.On(s,1) end
MemoryCardDisplayP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
MemoryCardDisplayP2X=Metrics.System.USBIconX[2]
MemoryCardDisplayP2Y=Metrics.System.USBIconY
MemoryCardDisplayP2OnCommand=%function(s) MemoryCardDisplay.On(s,2) end
MemoryCardDisplayP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
TimerSeconds=-1
TimerStealth=@Bool[false]
#GetSysConfig().Timer and Timer.GetRemainingSeconds()>0 or not GetPref("MenuTimer")
ForceTimer=@Bool[not not GetSysConfig().Timer]
# and GetEnv("ProfileLoaded")
TimerX=Metrics.System.MenuTimerXY[1]
TimerY=Metrics.System.MenuTimerXY[2]
TimerOnCommand=horizalign,center;vertalign,top;shadowlength,0;visible,Bool[not not GetPref("MenuTimer")]
# SM5: (TimerMetricsGroup)
TimerMetricsGroup=MenuTimer
FooterX=
FooterY=
FooterOnCommand=visible,Bool[false]
HelpX=@Metrics.System.HelpTextXY[1]
HelpY=@Metrics.System.HelpTextXY[2]
HelpOnCommand=playcommand,Lua;queuecommand,FirstUpdate;effectperiod,Metric("HelpDisplay","TipShowTime");luaeffect,Update
HelpFirstUpdateCommand=
#commented out because it's not quite 3 seconds it switches
#HelpUpdateCommand=diffusealpha,math.min(1,3*(1.5-math.abs(self:GetSecsIntoEffect()-1.5)))
HelpText=
HelpChangedCommand=
UnderlayX=
UnderlayY=
UnderlayOnCommand=
OverlayX=
OverlayY=
OverlayOnCommand=
TimerOffCommand=
HeaderOffCommand=
StyleIconOffCommand=
StageOffCommand=
MemoryCardDisplayP1OffCommand=%function(s) MemoryCardDisplay.Off(s,1) end
MemoryCardDisplayP2OffCommand=%function(s) MemoryCardDisplay.Off(s,2) end
FooterOffCommand=
HelpOffCommand=
UnderlayOffCommand=
OverlayOffCommand=

[--]
[CommonService]
AllowOperatorMenuButton=@Bool[false]
Fallback=CommonBlankNoBG
PrevScreen=ServiceMenu
NextScreen=ServiceMenu

[CommonBlankNoBG]
# SWME Blank with No Background
Fallback=CommonBlank
BackgroundOnCommand=visible,Bool[false]

[CommonBlank]
Fallback=Common
HeaderOnCommand=visible,Bool[false]
StyleIconOnCommand=visible,Bool[false]
TimerStealth=@Bool[true]
TimerOnCommand=visible,Bool[false]
FooterOnCommand=visible,Bool[false]
HelpText=

[Null]
# No transitions
Fallback=CommonBlankNoBG

[StageFallback]
Class=ScreenStage
Fallback=Stage
#SWMEBNoBG
OverlayOnCommand=
AllowBack=@Bool[true]
CharacterIconP1Y=
CharacterIconP1X=
CharacterIconP1OnCommand=visible,Bool[false]
CharacterIconP2Y=
CharacterIconP2X=
CharacterIconP2OnCommand=visible,Bool[false]
ArtistY=
ArtistX=
ArtistOnCommand=
SongTitleY=
SongTitleX=
SongTitleOnCommand=
MinimumDelay=0
CharacterIconP1OffCommand=
CharacterIconP2OffCommand=
SongTitleOffCommand=
ArtistOffCommand=

[--]
[Attract]
Class=ScreenAttract
Fallback=CommonBlank
StartScreen=AttractCancel
ScreenInitCommand=%function(s) Screens.Common.Init(s) Screens.Attract.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) Screens.Attract.Init(s) end
BackGoesToStartScreen=@Bool[true]

# Enable hitting Escape to exit the game, like on the title screen.
HelpP1BackPressInputMessageCommand=playcommand,BackExit
HelpP2BackPressInputMessageCommand=playcommand,BackExit
HelpP1StartPressInputMessageCommand=playcommand,CancelExit
HelpP2StartPressInputMessageCommand=playcommand,CancelExit
HelpCoinInsertedMessageCommand=playcommand,CancelExit
HelpBackExitCommand=%function(s) SetEnv("DoExit",1) end
HelpCancelExitCommand=%function(s) SetEnv("DoExit",0) end

[AttractCancel]
Fallback=Screen
Class=ScreenBranch
Choices=CheckExit,Start
ConditionCheckExit=GetEnv("DoExit") and GetEnv("DoExit")==1
NextScreenCheckExit=screen,Exit
ConditionStart=true
NextScreenStart=@"screen,"..Branch.Title()

[OptionsSharedMenu]
# 1-column menu
Fallback=Options
#Hack to force condensed rows.
ItemsStartX=2
ItemsEndX=1
#Cursor on left, submenu preview on right.
ItemsLongRowSharedX=-144
IconsP1X=32
#0
IconsP2X=192
#144
ColorSelected=@ModsMenu.ItemColor(1,true)
ColorNotSelected=@ModsMenu.ItemColor(2,true)
ColorDisabled=@ModsMenu.ItemColor(3,true)
LineHighlightOnCommand=visible,Bool[false]

[OptionsShared]
Fallback=OptionsSharedMenu
# 1 column menu with titles
LabelsX=-144
ItemsLongRowSharedX=112

[Options]
# 2-column menu
ScreenInitCommand=%function(s) Screens.Common.Init(s) FitScreenToAspect(s) end
InitCommand=%function(s) Screens.Common.Init(s) FitScreenToAspect(s) s:effectperiod(math.huge) end
Class=ScreenOptionsMaster
Fallback=Common
FrameCaptureCommand=%Capture.ActorFrame.CaptureInternal
FirstUpdateCommand=Screens.Common.FirstUpdate(self) ModsMenu.FirstUpdate(self)
# General mods menu lua bindings:
OptionMenuFlags=@ModsMenu.GetPageType()
Lines=@ModsMenu.NextLine()
NumShownItems=table.getn(ModsMenu.GetTop().Contents)
HelpText=@join("\n",Languages[CurLanguage()].ScreenOptions.HelpTips)
#3.95:
FrameOnCommand=x,Metrics.ModsMenu.FrameXY[1];y,Metrics.ModsMenu.FrameXY[2];horizalign,center;vertalign,middle;playcommand,LuaOn;queuecommand,TweenOn
FrameLuaOnCommand=%function(s) Frame=s end
FrameTweenOnCommand=%function() PlaySound("Options open",true) end
FrameOffCommand=playcommand,LuaOff;queuecommand,TweenOff
FrameLuaOffCommand=%function(s) Capture.ModsMenu.Off(s) Frame=nil end
FrameTweenOffCommand=%function(s) end
#SM5: (Frame is now called Container)
ContainerOnCommand=x,Metrics.ModsMenu.FrameXY[1];y,Metrics.ModsMenu.FrameXY[2];horizalign,center;vertalign,middle;playcommand,"LuaOn";queuecommand,"TweenOn"
ContainerLuaOnCommand=%function(s) Frame=s end
ContainerTweenOnCommand=
ContainerOffCommand=playcommand,LuaOff;queuecommand,TweenOff
ContainerLuaOffCommand=%function(s) Capture.ModsMenu.Off(s) Frame=nil end
ContainerTweenOffCommand=%function(s) end
PageX=Metrics.ModsMenu.PageXY[1]
PageY=Metrics.ModsMenu.PageXY[2]
PageOnCommand=%function(s) s:zwrite(1) Env()._DQ={} Env()._CachedDQ={} LuaEffect(s,"Update") end
PageUpdateCommand=%function(s) if Env()._DQ then for pn=1,2 do if Env()._CachedDQ[pn]~=Env()._DQ[pn] then Broadcast("DisqualifyP"..pn..tostring(Env()._DQ[pn])) end Env()._CachedDQ[pn]=Env()._DQ[pn] Env()._DQ[pn]=false end end end
LineHighlightOnCommand=
LineHighlightChangeCommand=%ModsMenu.MoveCursor
LineHighlightChangeToExitCommand=
ShowScrollBar=@Bool[false]
ShowExitRow=@Bool[true]
#@Bool[not ModsMenu.ShowTabList(ModsMenu.GetTop())]
#ShowExplanations: false just means the text will be forced to "". The objects will still be loaded
ShowExplanations=@Bool[false]
ExplanationP1X=Metrics.ModsMenu.ExplanationX[1]
ExplanationP1Y=Metrics.ModsMenu.ExplanationY
ExplanationP2X=Metrics.ModsMenu.ExplanationX[2]
ExplanationP2Y=Metrics.ModsMenu.ExplanationY
ExplanationTogetherX=Metrics.ModsMenu.ExplanationSharedX
ExplanationTogetherY=Metrics.ModsMenu.ExplanationY
ExplanationTogetherOnCommand=%function(s) end
#visible,Bool[false]
ExplanationP1OnCommand=%function(s) ModsMenu.AfterInit() end
ExplanationP2OnCommand=%function(s) ModsMenu.AfterInit() end
#ExplanationP1OnCommand=%function(s) s:ztestmode("writeonfail") ModsMenu.AfterInit() end
#ExplanationP2OnCommand=%function(s) s:ztestmode("writeonfail") ModsMenu.AfterInit() end
ExplanationZoom=1
MoreX=
MoreY=
MoreOnCommand=%function(s) Capture.ModsMenu.On(Frame) Capture.ModsMenu.More(s) s:visible(Bool[false]) end
MoreCaptureCommand=%Capture.ActorFrame.CaptureInternal
MoreShowMoreCommand=
MoreHideMoreCommand=
MoreExitSelectedP1Command=%function(s) if rows then rows.exit.text:stopeffect() end end
MoreExitSelectedP2Command=%function(s) if rows then rows.exit.text:stopeffect() end end
MoreExitUnselectedP1Command=
MoreExitUnselectedP2Command=
DisqualifyP1X=Metrics.ModsMenu.DisqualifyX[1]
DisqualifyP1Y=Metrics.ModsMenu.DisqualifyY
DisqualifyP1OnCommand=%function(s) Capture.ModsMenu.DQ(s,1) s:effectperiod(math.huge) LuaEffect(s,"Update") end
DisqualifyP1UpdateCommand=%function(s) Env()._DQ[1]=true end
DisqualifyP1OffCommand=%function(s) s:stopeffect() s:diffusealpha(0) Env()._DQ=nil Env()._CachedDQ=nil end
DisqualifyP2X=Metrics.ModsMenu.DisqualifyX[2]
DisqualifyP2Y=Metrics.ModsMenu.DisqualifyY
DisqualifyP2OnCommand=%function(s) Capture.ModsMenu.DQ(s,2) s:effectperiod(math.huge) LuaEffect(s,"Update") end
DisqualifyP2UpdateCommand=%function(s) Env()._DQ[2]=true end
DisqualifyP2OffCommand=%function(s) s:stopeffect() s:diffusealpha(0) Env()._DQ=nil Env()._CachedDQ=nil end
# 3.9 specific metrics, but we are going to reuse them.
NumShownItems=@Metrics.ModsMenu.NumItems
ItemsStartY=@Metrics.ModsMenu.ItemsTopY
ItemsSpacingY=@Metrics.ModsMenu.ItemsHeight/Metrics.ModsMenu.NumItems
#3.95 does things differently to 3.9
NumRowsShown=@Metrics.ModsMenu.NumItems
Row1Y=@ModsMenu.RowY()
Row2Y=@ModsMenu.RowY()
Row3Y=@ModsMenu.RowY()
Row4Y=@ModsMenu.RowY()
Row5Y=@ModsMenu.RowY()
Row6Y=@ModsMenu.RowY()
Row7Y=@ModsMenu.RowY()
Row8Y=@ModsMenu.RowY()
Row9Y=@ModsMenu.RowY()
Row10Y=@ModsMenu.RowY()
Row11Y=@ModsMenu.RowY()
Row12Y=@ModsMenu.RowY()
Row13Y=@ModsMenu.RowY()
Row14Y=@ModsMenu.RowY()
Row15Y=@ModsMenu.RowY()
Row16Y=@ModsMenu.RowY()
Row17Y=@ModsMenu.RowY()
Row18Y=@ModsMenu.RowY()
Row19Y=@ModsMenu.RowY()
Row20Y=@ModsMenu.RowY()
Row21Y=@ModsMenu.RowY()
Row22Y=@ModsMenu.RowY()
Row23Y=@ModsMenu.RowY()
Row24Y=@ModsMenu.RowY()
Row25Y=@ModsMenu.RowY()
Row26Y=@ModsMenu.RowY()
Row27Y=@ModsMenu.RowY()
Row28Y=@ModsMenu.RowY()
Row29Y=@ModsMenu.RowY()
Row30Y=@ModsMenu.RowY()
Row31Y=@ModsMenu.RowY()
Row32Y=@ModsMenu.RowY()
Row33Y=@ModsMenu.RowY()
Row34Y=@ModsMenu.RowY()
Row35Y=@ModsMenu.RowY()
RowYOffScreenTop=@Metrics.ModsMenu.ItemsTopY-(Metrics.ModsMenu.ItemsHeight/Metrics.ModsMenu.NumItems)
RowYOffScreenCenter=@Metrics.ModsMenu.ItemsHeight/2+Metrics.ModsMenu.ItemsTopY
RowYOffScreenBottom=@Metrics.ModsMenu.ItemsTopY+Metrics.ModsMenu.ItemsHeight
SeparateExitRow=@(function() GetScreen():aux(0) return Bool[true] end)()
SeparateExitRowY=@Metrics.ModsMenu.ExitY
CursorTweenSeconds=@Metrics.ModsMenu.TweenSeconds
# insert dummy values to shut sm5 up: zero height will crash sm5 (fail assert IIRC)
ScrollBarHeight=1
ScrollBarTime=0
############## OptionRow specific metrics: Loaded for each row.
#AllowRepeatingChangeValueInput=@Bool[table.getn(CachedText)<2]
AllowRepeatingChangeValueInput=@Bool[true]
ShowBpmInSpeedTitle=@Bool[false]
CapitalizeAllOptionNames=@Bool[false]
ThemeItems=@Bool[false]
ThemeTitles=@Bool[false]
TweenSeconds=Metrics.ModsMenu.TweenSeconds
####
#There's no corresponding 3.95 metric for optionrow frame; zero it for now.
FrameX=0
FrameY=0
ArrowsX=Metrics.ModsMenu.BulletX
LabelsX=Metrics.ModsMenu.TitleX
LabelsOnCommand=shadowlength,0;horizalign,center;zoom,.75
#SM5 renames Labels to Title
TitleX=Metrics.ModsMenu.TitleX
TitleY=0
#Sm5 won't give you mod icons unless you ask for it
ShowModIcons=@Bool[true]
ModIconMetricsGroup=OptionIcon
ShowUnderlines=@Bool[true]
IconsP1X=Metrics.ModsMenu.IconsX[1]
IconsP2X=Metrics.ModsMenu.IconsX[2]
IconsOnCommand=%function(s) s:visible(Bool[false]) end
#SM5 renames optionicons to ModIcon:
ModIconP1X=Metrics.ModsMenu.IconsX[1]
ModIconP2X=Metrics.ModsMenu.IconsX[2]
#new sm5 metric?
ItemsMinBaseZoom=1
# Item text. Force condensed by default:
#ItemsStartX=2
#ItemsGapX=1
#ItemsEndX=1
#Force condensed rows, unless it's for the tab bar
ItemsStartX=@Metrics.ModsMenu.ItemsListX[1]
ItemsGapX=@Metrics.ModsMenu.ItemsListGapX
ItemsEndX=@Metrics.ModsMenu.ItemsListX[2]
# Item text for condensed rows: (2-column menus)
ItemsLongRowP1X=Metrics.ModsMenu.ItemsX[1]
ItemsLongRowP2X=Metrics.ModsMenu.ItemsX[2]
# Shared condensed rows: (eg, Exit row)
ItemsLongRowSharedX=Metrics.ModsMenu.ItemsSharedX
ItemsOnCommand=%function(s) s:shadowlength(0) s:horizalign("center") s:zoom(.75) end
# Row diffuse. ROW_EXIT is hardcoded to diffuseshift,1.0 between Selected and NotSelected colours, unless you stopeffect() when going to the exit row.
ColorSelected=@ModsMenu.ItemColor(1)
ColorNotSelected=@ModsMenu.ItemColor(2)
ColorDisabled=@ModsMenu.ItemColor(3)

[ScreenOptionsMaster]
OptionRow=1;together;SelectNone
OptionRowDefault=
OptionRow,1=@ModsMenu.SubmenuLine()

Speed=@CrippledProfiles.Flag()
Speed,1=@CrippledProfiles.Pacify()
SpeedDefault=

# With OptionsList, OptionRowHandlerLua doesn't let you do submenus.
# If you want submenus, you must use OptionRowHandlerList and define the menus in here, which is stupid and limiting.
# (also, SelectNone falls back onto SelectOne)

OptionsList=@OptionsList.MenuDefinition.Options()
OptionsListDefault=@OptionsList.MenuDefinition.Base()
OptionsList,1=@OptionsList.MenuDefinition.Row(1)
OptionsList,2=@OptionsList.MenuDefinition.Row(2)
OptionsList,3=@OptionsList.MenuDefinition.Row(3)
OptionsList,4=@OptionsList.MenuDefinition.Row(4)
OptionsList,5=@OptionsList.MenuDefinition.Row(5)
OptionsList,6=@OptionsList.MenuDefinition.Row(6)
OptionsList,7=@OptionsList.MenuDefinition.Row(7)
OptionsList,8=@OptionsList.MenuDefinition.Row(8)
OptionsList,9=@OptionsList.MenuDefinition.Row(9)
OptionsList,10=@OptionsList.MenuDefinition.Row(10)
OptionsList,11=@OptionsList.MenuDefinition.Row(11)
OptionsList,12=@OptionsList.MenuDefinition.Row(12)
OptionsList,13=@OptionsList.MenuDefinition.Row(13)
OptionsList,14=@OptionsList.MenuDefinition.Row(14)
OptionsList,15=@OptionsList.MenuDefinition.Row(15)
OptionsList,16=@OptionsList.MenuDefinition.Row(16)
OptionsList,17=@OptionsList.MenuDefinition.Row(17)
OptionsList,18=@OptionsList.MenuDefinition.Row(18)
OptionsList,19=@OptionsList.MenuDefinition.Row(19)
OptionsList,20=@OptionsList.MenuDefinition.Row(20)

OLTestTop=4;selectnone
OLTestTopDefault=
OLTestTop,1=name,testa;screen,OLSub1
OLTestTop,2=name,testb;screen,OLSub2
OLTestTop,3=name,testc;screen,OLSub3
OLTestTop,4=name,testd;screen,OLSub4

OLRival=@OptionsList.MenuDefinition.Rivals.Options()
OLRivalDefault=@OptionsList.MenuDefinition.Rivals.Default()
OLRival,1=@OptionsList.MenuDefinition.Rivals.Row(1)
OLRival,2=@OptionsList.MenuDefinition.Rivals.Row(2)
OLRival,3=@OptionsList.MenuDefinition.Rivals.Row(3)
OLRival,4=@OptionsList.MenuDefinition.Rivals.Row(4)
OLRival,5=@OptionsList.MenuDefinition.Rivals.Row(5)
OLRival,6=@OptionsList.MenuDefinition.Rivals.Row(6)
OLRival,7=@OptionsList.MenuDefinition.Rivals.Row(7)
OLRival,8=@OptionsList.MenuDefinition.Rivals.Row(8)
OLRival,9=@OptionsList.MenuDefinition.Rivals.Row(9)
OLRival,10=@OptionsList.MenuDefinition.Rivals.Row(10)
OLRival,11=@OptionsList.MenuDefinition.Rivals.Row(11)
OLRival,12=@OptionsList.MenuDefinition.Rivals.Row(12)
OLRival,13=@OptionsList.MenuDefinition.Rivals.Row(13)
OLRival,14=@OptionsList.MenuDefinition.Rivals.Row(14)
OLRival,15=@OptionsList.MenuDefinition.Rivals.Row(15)
OLRival,16=@OptionsList.MenuDefinition.Rivals.Row(16)
OLRival,17=@OptionsList.MenuDefinition.Rivals.Row(17)
OLRival,18=@OptionsList.MenuDefinition.Rivals.Row(18)
OLRival,19=@OptionsList.MenuDefinition.Rivals.Row(19)
OLRival,20=@OptionsList.MenuDefinition.Rivals.Row(20)

OLSub1=2
OLSub1Default=
OLSub1,1=name,sub1a
OLSub1,2=name,sub1b

OLSub2=2
OLSub2Default=
OLSub2,1=name,sub2a
OLSub2,2=name,sub2b

OLSub3=2
OLSub3Default=
OLSub3,1=name,sub3a
OLSub3,2=name,sub3b

OLSub4=2
OLSub4Default=
OLSub4,1=name,sub4a
OLSub4,2=name,sub4b

[--]
[SelectMaster]
Class=ScreenSelectMaster
Fallback=Select
# DefaultChoice has a todo note to move to screenselect (because Choices itself is). Is this the case in SM5 then?
DefaultChoice=
SharedPreviewAndCursor=@Bool[true]
NumIconParts=0
NumPreviewParts=0
NumCursorParts=0
ShowScroller=@Bool[false]
ScrollerOnCommand=
ScrollerOffCommand=
ScrollerSecondsPerItem=
ScrollerNumItemsToDraw=
ScrollerFastCatchup=
ScrollerTransform=
OptionOrderUp=
OptionOrderDown=
OptionOrderLeft=
OptionOrderRight=
WrapCursor=@Bool[true]
OptionOrderAuto=
OverrideLockInputSeconds=@Bool[false]
LockInputSeconds=
# never:
NumChoicesOnPage1=2147483647
PreSwitchPageSeconds=
PostSwitchPageSeconds=
WrapScroller=@Bool[false]
AllowRepeatingInput=@Bool[false]
OverrideSleepAfterTweenOffSeconds=@Bool[false]
SleepAfterTweenOffSeconds=
ExplanationPage1Y=
ExplanationPage1X=
ExplanationPage1OnCommand=visible,Bool[false]
ExplanationPage1OffCommand=
ExplanationPage2Y=
ExplanationPage2X=
ExplanationPage2OnCommand=visible,Bool[false]
ExplanationPage2OffCommand=
MorePage1Y=
MorePage1X=
MorePage1OnCommand=visible,Bool[false]
MorePage1OffCommand=
MorePage2Y=
MorePage2X=
MorePage2OnCommand=visible,Bool[false]
MorePage2OffCommand=

[Select]
Fallback=Common
IdleCommentSeconds=0
IdleTimeoutSeconds=0
IdleTimeoutScreen=
AllowDisabledPlayerInput=@Bool[false]
UpdateOnMessage=
CodeNames=
#Code[name]=
ChoiceNames=
#Choice[name]=
NextScreen1=
NextScreen2=
IdleCommentSeconds=
# NotITG evaluates this metric per frame:
SendMoreInputs=@Bool[true]

[InputHandler]
# (TEMPLATE) If you want a screen with inputs (especially on 3.95 vanilla), go here
Fallback=SelectMaster
WrapCursor=@Bool[true]
AllowDisabledPlayerInput=@Bool[false]
AllowRepeatingInput=@Bool[true]
#ScreenInitCommand=%function(s) InputHandler.RegisterSM5(callback) end
#CodeNames=@InputHandler.Init(InputHandler.Register(callback))
CodeNames=@InputHandler.Init(TestCodeTable)
Codes=@InputHandler.Code()
CodesAction=@InputHandler.Action()
#needs at least 2 choices for autorepeat to work:
ChoiceNames=Start,Start
ChoiceStart=
#MemoryCardIcons=@Bool[false]
#ShowStage=@Bool[false]
#StyleIcon=@Bool[false]
#TimerSeconds=-1
#TimerStealth=@Bool[true]
#StopMusicOnBack=@Bool[false]
#FirstUpdateCommand=
#InitCommand=

[------Stats------]
[CatalogXml]
ShowPlayModeRegular=1
ShowPlayModeNonstop=1
ShowPlayModeOni=1
ShowPlayModeEndless=0
ShowPlayModeBattle=0
ShowPlayModeRave=0
ShowStyleSingle=1
ShowStyleVersus=1
ShowStyleDouble=1
ShowStyleCouple=0
ShowStyleSolo=0
ShowStyleReal=0
ShowStepsTypeDance-single=1
ShowStepsTypeDance-double=1
ShowStepsTypeDance-couple=0
ShowStepsTypeDance-solo=0
ShowStepsTypePump-single=0
ShowStepsTypePump-halfdouble=0
ShowStepsTypePump-double=0
ShowStepsTypePump-couple=0
ShowStepsTypeEz2-single=0
ShowStepsTypeEz2-double=0
ShowStepsTypeEz2-real=0
ShowStepsTypePara-single=0
ShowStepsTypePara-versus=0
ShowStepsTypeDs3ddx-single=0
ShowStepsTypeBm-single=0
ShowStepsTypeBm-double=0
ShowStepsTypeIidx-single7=0
ShowStepsTypeIidx-double7=0
ShowStepsTypeIidx-single5=0
ShowStepsTypeIidx-double5=0
ShowStepsTypeManiax-single=0
ShowStepsTypeManiax-double=0
ShowStepsTypeTechno-single4=0
ShowStepsTypeTechno-single5=0
ShowStepsTypeTechno-single8=0
ShowStepsTypeTechno-double4=0
ShowStepsTypeTechno-double5=0
ShowStepsTypePnm-five=0
ShowStepsTypePnm-nine=0
ShowStepsTypeLights-cabinet=0
InternetRankingHomeUrl=http://groovestats.com/
InternetRankingUploadUrl=http://www.roxorgames.com/itg/redirect.php?location=upload_stats
InternetRankingViewGuidUrl=http://www.roxorgames.com/itg/redirect.php?location=view_guid&
ProductTitle=In The Groove 2
FooterText=In The Groove 2 is copyright 2005 Roxor Games Inc.
FooterLink=http://www.roxorgames.com

[RadarValues]
# Write the following to stats.xml: changing either of these to false will nuke whatever was there previously and force them to 0
#Step counts:
WriteSimpleValues=@Bool[true]
#Radar floats:
WriteComplexValues=@Bool[true]

[------Shared Actors------]
[DifficultyMeter]
#Just meter number, coloured to the difficulty slot.
ShowFeet=@Bool[false]
ShowDifficulty=@Bool[false]
ShowMeter=@Bool[true]
ZeroMeterString=x
MeterX=0
MeterY=0
MeterOnCommand=shadowlength,0
MeterSetCommand=diffusealpha,1
MeterTextChangedCommand=
# the Lua functions for difficultylist rely on the Aux values to set the position	
MeterSetNoneCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,-1) end
MeterSetBeginnerCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,0) end
MeterSetEasyCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,1) end
MeterSetMediumCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,2) end
MeterSetHardCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,3) end
MeterSetChallengeCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,4) end
MeterSetEditCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,5) end
MeterSetNoneCourseCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,-1) end
MeterSetBeginnerCourseCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,0) end
MeterSetEasyCourseCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,1) end
MeterSetRegularCourseCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,2) end
MeterSetDifficultCourseCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,3) end
MeterSetChallengeCourseCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,4) end
MeterSetEditCourseCommand=%function(s) Capture.DifficultyList.SetMeterColor(s,5) end
#dummy:
NumFeetInMeter=
MaxFeetInMeter=
GlowIfMeterGreaterThan=2147483647
ShowEditDescription=@Bool[false]
# AutoColorFeet crashes on DIFFICULTY_INVALID
AutoColorFeet=@Bool[false]
[--]
[Banner]
#All evaluated on theme load:
ScrollRandom=@Bool[false]
ScrollRoulette=@Bool[false]

[FadingBanner]
# Don't redir banners to _blank, otherwise the sprite in the stack goes invisible and you can't get it back without reloading the screen.
BannerOnCommand=aux,5/GetPref("MusicWheelSwitchSpeed")
#;scaletoclipped,unpack(Metrics.SelectMusic.BannerSize)
# When scrolling through the songwheel, these counterintuitively-named commands get run:
#  Banner to fade out: FadeOff (cached to cached) or FadeFromCached (cached to high res)
#  Banner beneath to be revealed: ResetFade
# Notes:
#  FadeOff doesn't fire if every song in a folder uses the same group banner
#  FadeFromCached won't fire if either banners and/or banner caching is/are disabled
BannerFadeOffCommand=decelerate,self:getaux();cropbottom,1) Broadcast("WheelMoving"
BannerFadeFromCachedCommand=linear,.5;diffusealpha,0) Broadcast("WheelSettled"
BannerResetFadeCommand=visible,Bool[true];finishtweening;cropbottom,-.25;fadebottom,.25;diffusealpha,1

[--]
[MenuTimer]
#Todo: Metric the beeper?
WarningStart=15
WarningBeepStart=9
MaxStallSeconds=0
# Format functions get run per frame.
Text1OnCommand=%function(s) Tweens.MenuTimer.On(s,1) end
Text1FormatFunction=MenuTimer and MenuTimer.Format.Integer or math.floor
#math.ceil
Text2OnCommand=%function(s) Tweens.MenuTimer.On(s,2) end
Text2FormatFunction=MenuTimer and MenuTimer.Format.Fraction or function(n) return math.mod(n,1) end
#3.95:
WarningCommand16=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand15=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand14=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand13=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand12=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand11=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand10=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand9=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand8=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand7=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand6=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand5=%function(s) Tweens.MenuTimer.Warning(s) Broadcast("MenuTimerWarning") end
WarningCommand4=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand3=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand2=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand1=%function(s) Tweens.MenuTimer.Warning(s) end
WarningCommand0=%function(s) Tweens.MenuTimer.Warning(s) Broadcast("MenuTimerExpired") end
# SM5:
Warning16Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning15Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning14Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning13Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning12Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning11Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning10Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning9Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning8Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning7Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning6Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning5Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning4Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning3Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning2Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning1Command=%function(s) Tweens.MenuTimer.Warning(s) end
Warning0Command=%function(s) Tweens.MenuTimer.Warning(s) end

[BPMDisplay]
#This BPMDisplay is the same for both ScreenSelectMusic and ScreenGameplay.
NormalColor=1.0,1.0,1.0,1
#ChangeColor applies even when Cycle=@false
ChangeColor=1.0,1.0,1.0,1
ExtraColor=0.7,0.0,0.0,1
Cycle=@Bool[not IsCourseMode()]
#Cycle=@Bool[true]
NoBPMText= 
Separator=-
TextX=0
TextY=0
TextOnCommand=%function(s) Capture.BPMObject(s) s:shadowlength(0) s:effectclock('beat') end
#if mwItems then LuaEffect(s,"Effect") end end
#Live BPM: (text flickers between values in SGP, so limit it to SSM and maybe SPO (modsmenu) only.)
TextSelectMenuOnCommand=luaeffect,Effect
TextSelectMenuOffCommand=stopeffect
TextEffectCommand=%function(s) s:settext(math.round(s:GetEffectDelta()/GetScreen():GetEffectDelta()*60)) end
#TextEffectCommand=%function(s) if Env().SongMods.LiveBPM then s:settext(math.round(s:GetEffectDelta()/GetScreen():GetEffectDelta()*60)) end end
# Fix ratemods getting applied twice in oITG:
TextGameplayOnCommand=effectclock,music;aux,Env().SongMods.Rate;luaeffect,GameplayTextUpdate
TextGameplayTextUpdateCommand=%function(s) s:settext(math.floor(tonumber(s:GetText() or 0)/s:getaux())) end
LabelX=0
LabelY=0
LabelOnCommand=visible,Bool[false]

[PercentageDisplay]
#TODO: metric it out?
PercentDecimalPlaces=2
PercentTotalSize=5
PercentUseRemainder=@Bool[false]
PercentP1X=0
PercentP1Y=0
PercentP1OnCommand=
PercentP1OffCommand=
PercentP2X=0
PercentP2Y=0
PercentP2OnCommand=
PercentP2OffCommand=
PercentRemainderP1X=0
PercentRemainderP1Y=0
PercentRemainderP1OnCommand=
PercentRemainderP1OffCommand=
PercentRemainderP2X=0
PercentRemainderP2Y=0
PercentRemainderP2OnCommand=
PercentRemainderP2OffCommand=
DancePointsDigits=1
DancePointsP1X=0
DancePointsP1Y=0
DancePointsP1OnCommand=
DancePointsP1OffCommand=
DancePointsP2X=0
DancePointsP2Y=0
DancePointsP2OnCommand=
DancePointsP2OffCommand=
# Keep this disabled to force Add percent display (normal ITG.) Subtractive/Average percent displays don't work properly.
ApplyScoreDisplayOptions=@Bool[false]

[ArtistDisplay]
Fallback=HelpDisplay

[BitmapText]
#Only used on Roulette item & in NetEvaluation player list
RainbowColor1=0.0,0.0,0.0,1
RainbowColor2=0.1,0.1,0.1,1
RainbowColor3=0.2,0.2,0.2,1
RainbowColor4=0.3,0.3,0.3,1
RainbowColor5=0.2,0.2,0.2,1
RainbowColor6=0.1,0.1,0.1,1
RainbowColor7=0.0,0.0,0.0,1

[HelpDisplay]
TipShowTime=3
TipOnCommand=shadowlength,0;zoom,15/20

[LyricDisplay]
# In and Out gets evaluated before lua initialises. Wrap them in a function call
InCommand=%function(s) Tweens.Gameplay.LyricText.In(s) end
OutCommand=%function(s) Tweens.Gameplay.LyricText.Out(s) end
WipeDimFactor=@Metrics.Gameplay.LyricText.DimColour

[------Overlays------]
[DebugOverlay]
Class=ScreenDebugOverlay
Fallback=Screen
InitCommand=%function(s)DebugOverlay=s end

[SyncOverlay]
Class=ScreenSyncOverlay
Fallback=Screen
InitCommand=%function(s)SyncOverlay=s end

[StatsOverlay]
#SM5 screen. Only stats text is predefined, along with the skips box.
ScreenInitCommand=%function(s) Screens.Common.Init(s) s:queuemessage("InitGlobals") end
ScreenOnCommand=%function(s) s:SetUpdateFunction(RunLuaEffectList) end
#ScreenInitGlobalsMessageCommand=%function(s) s:SetUpdateFunction(RunLuaEffectList) end
#Put game timer in Stats (text) here?
#StatsOnCommand=visible,Bool[true];shadowlength,0;settext,TimerInit()
#StatsInitGlobalsMessageCommand=%function(s) Trace("InitTimer()") GlobalClock=s s:effectperiod(math.huge) Timer=TimerInit(s) LuaEffect(s,"Update") end
StatsOnCommand=%function(s) Trace("InitTimer()") GlobalClock=s s:effectperiod(math.huge) Timer=TimerInit(s) LuaEffect(s,"Update") end
StatsUpdateCommand=%function(s) Trace("Timer.Update()") Timer.Update(s) end
StatsX=Metrics.System.TimerXY[1]
StatsY=Metrics.System.TimerXY[2]

[SystemLayer3.9]
#Only used to tell 3.9 users they're using a too-old Stepmania version. ([SystemLayer] is a hardcoded section name in 3.9)
Fallback=Screen
CreditsP1X=320
CreditsP1Y=240
CreditsPressStart=StepMania 3.9 is incompatible with this theme.::Use OpenITG or StepMania 3.95 instead.
CreditsP2OnCommand=hidden,1

[SystemOverlay]
#Careful. Each credit text update fires the OnCommands for Message, MessageFrame, Stats, Time, CreditsP1/P2.
#Any commands you want to run on boot must be done via InitGlobals
Class=ScreenSystemLayer
Fallback=Screen
#In SM5, all the predefined text objects are gone, and two AutoActor overlays replace it.
InitCommand=%function(s) SystemOverlay=s s:queuemessage("InitGlobals") s:queuemessage("CheckNetwork") s:queuemessage("HideSystemMessage") end

TimeX=SCREEN_LEFT+16
TimeY=SCREEN_TOP+16
TimeOnCommand=aux,GAMESTATE:StageIndex()
TimeInitGlobalsMessageCommand=%function(s) math.randomseed(s:getaux()) math.random() s:aux(0) Tweens.System.TimerOn(s) end
# Recycle ScreenTestMode toggle for frame-skip display instead
TimeScreenTestModeChangedMessageCommand=%function(s) if GetPref("ScreenTestMode") then SetPref("ScreenTestMode",false) SetPref("Timestamping",not GetPref("Timestamping")) end s:visible(Bool[GetPref("Timestamping")]) end
TimeTimestampingChangedMessageCommand=visible,Bool[GetPref("Timestamping")]
CreditsJoinOnly=@Bool[false]
CreditsP1X=Metrics.System.CreditsTextX[1]
CreditsP1Y=Metrics.System.CreditsTextY
CreditsP1OnCommand=%function(s) s:aux(1) Tweens.System.CreditsTextOn(s,1) end
CreditsP2X=Metrics.System.CreditsTextX[2]
CreditsP2Y=Metrics.System.CreditsTextY
#CreditsP2OnCommand=%function(s) s:aux(2) Tweens.System.CreditsTextOn(s,2) end
CreditsP2OnCommand=aux,2) Tweens.System.CreditsTextOn(self,2) SystemOverlay:GetChild(""):visible(Bool[false]

CreditsP1RefreshCreditTextMessageCommand=%function(s) if SCREENMAN then RefreshCardText(s,1) end end
CreditsP2RefreshCreditTextMessageCommand=%function(s) if SCREENMAN then RefreshCardText(s,2) end end

# Global game clock
StatsOnCommand=
StatsInitGlobalsMessageCommand=%function(s) GlobalClock=s s:effectperiod(math.huge) Tweens.System.StatsOn(s) end
StatsX=SCREEN_RIGHT-16
StatsY=SCREEN_TOP+16
MessageX=Metrics.System.Message.TextXY[1]
MessageY=Metrics.System.Message.TextXY[2]
MessageInitGlobalsMessageCommand=%function(s) Tweens.System.Message.Text.Init(s) OverlayText=s end
MessageOnCommand=%function(s) Tweens.System.Message.Text.On(s) end
MessageOffCommand=%function(s) Tweens.System.Message.Text.Off(s) end

#let the layer set these:
MessageFrameX=0
MessageFrameY=0
MessageFrameOnCommand=draworder,-1;visible,Bool[true]
MessageFrameOffCommand=

MessageFramePlayersFinalizedMessageCommand=%function(s) Screens.PlayerEntry.PlayersFinalized(s) end
MessageFrameAutosyncChangedMessageCommand=%function(s) Screens.Gameplay.AutoSyncChanged(s) end

# Reuse monkey input to help debug profile data
MessageFrameMonkeyInputChangedMessageCommand=%function(s) if GetSysConfig().ProfileDebugHotkey then local f=GetPref("SignProfileData") SetPref("SignProfileData",not f) SetPref("MonkeyInput",false) s:queuecommand("ProfileDebugShow") end end
MessageFrameProfileDebugShowCommand=%function(s) ScreenMessage("Sign Profile Data - "..(GetPref("SignProfileData") and "on" or "off")) end

MessageFrameUpdateCommand=%function(s) Timer.Update(s) end

# Strings (these should probably go in Languages[]) TODO
CreditsPressStart=Press Start
CreditsInsertCard=Insert USB
CreditsCardTooLate=Too late
CreditsCardNoName=NoName
CreditsCardReady=Ready
CreditsCardChecking=Checking USB
CreditsCardRemoved=USB removed
CreditsFreePlay=Free Play
CreditsCredits=Credits:
CreditsNotPresent=Not Present
CreditsLoadFailed=Load Failed
CreditsLoadedFromLastGoodAppend= (backup)

[GlobalInputHandler]
# oITG only
InitCommand=%function(s) if SyncOverlay then local c=Capture.ActorFrame.GetChildren(SyncOverlay).children if table.getn(c)>0 then c[3]:zoom(1) for _,v in next,c,nil do if IsBitmapText(v)then v:shadowlength(0)end end end end if DebugOverlay then local c=Capture.ActorFrame.GetChildren(DebugOverlay).children if table.getn(c)>0 then c[2]:settext(GetPref("MachineName")) for _,v in next,c,nil do if IsBitmapText(v)then v:shadowlength(0)end end end end if SystemOverlay then for _,v in next,Capture.ActorFrame.GetChildren(DebugOverlay).children,nil do if IsBitmapText(v)then v:shadowlength(0)end end end end
Class=ScreenTestInput
Fallback=CommonBlankNoBG
#Null
DevicesOnCommand=visible,Bool[false]
DevicesX=
DevicesY=
InputsOnCommand=visible,Bool[false]
InputsX=
InputsY=
AllowOperatorMenuButton=@Bool[false]
PlayMusic=@Bool[false]
StyleIcon=@Bool[false]
ShowStage=@Bool[false]
MemoryCardIcons=@Bool[false]
TimerSeconds=-1

[--]
[Prompt]
Fallback=CommonBlankNoBG
BackgroundOnCommand=%Tweens.Prompt.BackgroundOn
QuestionX=Metrics.Prompt.QuestionXY[1]
QuestionY=Metrics.Prompt.QuestionXY[2]
QuestionOnCommand=%Tweens.Prompt.Question.On
QuestionOffCommand=%Tweens.Prompt.Question.Off
CursorOnCommand=%Tweens.Prompt.Cursor.On
CursorOffCommand=%Tweens.Prompt.Cursor.Off
#Type PROMPT_OK
Answer1Of1Text=OK
Answer1Of1X=Metrics.Prompt.Button.X[1]
Answer1Of1Y=Metrics.Prompt.Button.Y
Answer1Of1OnCommand=%function(s) Tweens.Prompt.Answer.On(s,1,1) end
Answer1Of1OffCommand=%function(s) Tweens.Prompt.Answer.Off(s,1,1) end
#Type PROMPT_YES_NO
Answer1Of2Text=Yes
Answer1Of2X=Metrics.Prompt.Button.X[2][1]
Answer1Of2Y=Metrics.Prompt.Button.Y
Answer1Of2OnCommand=%function(s) Tweens.Prompt.Answer.On(s,1,2) end
Answer1Of2OffCommand=%function(s) Tweens.Prompt.Answer.Off(s,1,2) end
Answer2Of2Text=No
Answer2Of2X=Metrics.Prompt.Button.X[2][2]
Answer2Of2Y=Metrics.Prompt.Button.Y
Answer2Of2OnCommand=%function(s) Tweens.Prompt.Answer.On(s,2,2) end
Answer2Of2OffCommand=%function(s) Tweens.Prompt.Answer.Off(s,2,2) end
#Type PROMPT_YES_NO_CANCEL
#the editor asks "Do you want to save changes before exiting?"
Answer1Of3Text=@GetEnv("EditMode") and "Save" or "Yes"
Answer1Of3X=Metrics.Prompt.Button.X[3][1]
Answer1Of3Y=Metrics.Prompt.Button.Y
Answer1Of3OnCommand=%function(s) Tweens.Prompt.Answer.On(s,1,3) end
Answer1Of3OffCommand=%function(s) Tweens.Prompt.Answer.Off(s,1,3) end
Answer2Of3Text=@GetEnv("EditMode") and "Discard" or "No"
Answer2Of3X=Metrics.Prompt.Button.X[3][2]
Answer2Of3Y=Metrics.Prompt.Button.Y
Answer2Of3OnCommand=%function(s) Tweens.Prompt.Answer.On(s,2,3) end
Answer2Of3OffCommand=%function(s) Tweens.Prompt.Answer.Off(s,2,3) end
Answer3Of3Text=Cancel
Answer3Of3X=Metrics.Prompt.Button.X[3][3]
Answer3Of3Y=Metrics.Prompt.Button.Y
Answer3Of3OnCommand=%function(s) Tweens.Prompt.Answer.On(s,3,3) end
Answer3Of3OffCommand=%function(s) Tweens.Prompt.Answer.Off(s,3,3) end

[TextEntry]
Fallback=CommonBlankNoBG
QuestionX=Metrics.TextEntry.QuestionXY[1]
QuestionY=Metrics.TextEntry.QuestionXY[2]
AnswerBoxX=Metrics.TextEntry.AnswerBoxXY[1]
AnswerBoxY=Metrics.TextEntry.AnswerBoxXY[2]
AnswerX=Metrics.TextEntry.AnswerXY[1]
AnswerY=Metrics.TextEntry.AnswerXY[2]
QuestionOnCommand=%Tweens.TextEntry.Question.On
AnswerBoxOnCommand=%Tweens.TextEntry.AnswerBox.On
AnswerOnCommand=%Tweens.TextEntry.Answer.On
CursorOnCommand=%Tweens.TextEntry.Cursor.On
CursorPollCommand=%Tweens.TextEntry.Cursor.Poll
QuestionOffCommand=%Tweens.TextEntry.Question.Off
AnswerBoxOffCommand=%Tweens.TextEntry.AnswerBox.Off
AnswerOffCommand=%Tweens.TextEntry.Answer.Off
CursorOffCommand=%Tweens.TextEntry.Cursor.Off

[------Arcade------]
[HardwareStatus]
Class=@(OPENITG or IsArcade()) and "ScreenArcadeDiagnostics" or "ScreenInstructions"
Fallback=CommonService
TitleX=SCREEN_CENTER_X-160
TitleY=SCREEN_BOTTOM-120
TitleOnCommand=horizalign,right;vertalign,top;zoom,0.75;shadowlength,0;y,SCREEN_TOP+24+GetScreen():getaux()*10
TitleOffCommand=
USBInfoX=SCREEN_CENTER_X-150
USBInfoY=SCREEN_BOTTOM-120
USBInfoOnCommand=horizalign,left;vertalign,top;zoom,0.75;shadowlength,0;y,SCREEN_TOP+24+GetScreen():getaux()*10
USBInfoOffCommand=

[ScreenArcadePatch]
Fallback=Update
[Update]
Class=ScreenArcadePatch
Fallback=CommonService
HelpText=
HelpTextWaiting=Press &START; to exit
HelpTextFinished=Press &START; to restart
HelpTextError=Press &START; to exit
IntroText=You must supply a .itg patch file on the root of a USB memory card.
ListX=SCREEN_CENTER_X
ListY=SCREEN_CENTER_Y+32
ListOnCommand=vertalign,top;shadowlength,0
ListOffCommand=
StateX=SCREEN_CENTER_X
StateY=SCREEN_CENTER_Y-32
StateOnCommand=shadowlength,0
StateOffCommand=

[ArcadeStart]
#This screen loads drivers for arcade hardware, but also forces default mappings on arcade inputs.
#Does this screen correctly handle P3IO? Will an assert be thrown?
Class=ScreenArcadeStart
Fallback=CommonBlankNoBG
ErrorX=SCREEN_CENTER_X
ErrorY=SCREEN_CENTER_Y
ErrorOnCommand=shadowlength,0
NextScreen=@Branch.Start()

[ArcadeInit]
Class=ScreenInstructions
Fallback=CommonBlankNoBG
NextScreen=@Branch.SkipArcadeInit()
PrevScreen=@Branch.SkipArcadeInit()

[------Home------]
[RecordsMenu]
Fallback=ServiceMenu
LineNames=@ModsMenu.Init(RecordsMenu())
PrevScreen=@ModsMenu.Branch("RecordsMenu",Branch.Title(),false)
NextScreen=@ModsMenu.Branch("RecordsMenu",Branch.Title(),true)

[Records]
Fallback=Ranking
NextScreen=RecordsMenu
ShowOnlyMostRecentScores=@Bool[false]
ManualScroling=@Bool[true]
StepsTypesToHide=@GAMESTATE:GetEnv("StepsTypesToHide")
ShowStepsScores=@GAMESTATE:GetEnv("PlayMode")=="Regular"
ShowNonstopCourseScores=@GAMESTATE:GetEnv("PlayMode")=="Nonstop"
ShowSurvivalCourseScores=@GAMESTATE:GetEnv("PlayMode")=="Oni"
#InitCommand=%function() Trace(sprintf("StepsTypesToHide=%s PlayMode=%s", GAMESTATE:GetEnv("StepsTypesToHide"), GAMESTATE:GetEnv("PlayMode"))) end

[------Edit------]
[EditCoursesSongMenu]
Fallback=EditCoursesMenu

[oldEditMenu]
ScreenInitCommand=%function(s) Screens.Common.Init(s) Screens.EditMenu.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) Screens.EditMenu.Init(s) end
ExplanationOnCommand=%Screens.EditMenu.UpdateStats
RowLabelOnCommand=%function(s) Screens.EditMenu.NextRow.Label(s) end
RowValueOnCommand=%function(s) Screens.EditMenu.NextRow.Value(s) end

[EditMenu]
Class=ScreenEditMenu
Fallback=Common
InitCommand=%function(s) Screens.Common.Init(s) TopScreen=s SetEnv("EditMode",1) end
# ExplanationOnCommand is run on each ExplanationText Refresh (ie, upon row change)
ExplanationX=
ExplanationY=
ExplanationOnCommand=%function(s) s:visible(Bool[false]) Broadcast('MoveHighlight') end
# run only on screen load
NumStepsLoadedFromProfileX=Metrics.EditMenu.EditsUsedXY[1]
NumStepsLoadedFromProfileY=Metrics.EditMenu.EditsUsedXY[2]
NumStepsLoadedFromProfileOnCommand=diffusealpha,0;shadowlength,0;playcommand,Dump
NumStepsLoadedFromProfileDumpCommand=%function(s) Screens.EditMenu.On(TopScreen) end
PrevScreen=@Branch.Title()
ShowStage=@Bool[false]

#Beta3:
#evaluated when changing rows
ExplanationGroup=
ExplanationSong=
ExplanationStepsType=
ExplanationSteps=
ExplanationSourceStepsType=
ExplanationSourceSteps=
ExplanationAction=

# Left and right arrows.
Arrows1X=Metrics.EditMenu.ArrowsX[1]
Arrows2X=Metrics.EditMenu.ArrowsX[2]
ArrowsEnabledColor=1,1,1,1
ArrowsDisabledColor=0.25,0.25,0.25,1
# Row general
RowLabelsX=Metrics.EditMenu.LabelsX
# (before beta3:) The game hardcodes the row titles left-aligned AFTER oncommand. Hack to get round it.
RowLabelOnCommand=%function(s) s:shadowlength(0) Env()._name=s:GetText() EditMenuRows=EditMenuRows or {} EditMenuRows[Env()._name]={Label=s} end
RowValueOnCommand=%function(s) s:maxwidth(Metrics.EditMenu.ValueMaxWidth) s:shadowlength(0) local lastRow=EditMenuRows[Env()._name] lastRow.Label:horizalign("center") lastRow.Value=s end
# Rows:
# Group
Row1Y=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*0
RowValue1X=Metrics.EditMenu.ValuesX
GroupBannerX=Metrics.EditMenu.Banners.Folder.XY[1]
GroupBannerY=Metrics.EditMenu.Banners.Folder.XY[2]
GroupBannerWidth=Metrics.EditMenu.Banners.Folder.Size[1]
GroupBannerHeight=Metrics.EditMenu.Banners.Folder.Size[2]
# Song
Row2Y=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*1
#Song value is unused
RowValue2X=Metrics.EditMenu.ValuesX
SongBannerX=Metrics.EditMenu.Banners.Song.XY[1]
SongBannerY=Metrics.EditMenu.Banners.Song.XY[2]
SongBannerWidth=Metrics.EditMenu.Banners.Song.Size[1]
SongBannerHeight=Metrics.EditMenu.Banners.Song.Size[2]
SongTextBannerX=Metrics.EditMenu.ValuesX
SongTextBannerY=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*1
# Type
Row3Y=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*2
RowValue3X=Metrics.EditMenu.ValuesX
# Steps
Row4Y=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*3
RowValue4X=Metrics.EditMenu.Steps.ValueX
MeterX=Metrics.EditMenu.Steps.MeterX
MeterY=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*3
# Fill Type
RowValue5X=Metrics.EditMenu.ValuesX
Row5Y=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*4
# Fill Steps
Row6Y=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*5
RowValue6X=Metrics.EditMenu.Steps.ValueX
SourceMeterX=Metrics.EditMenu.Steps.MeterX
SourceMeterY=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*5
# Action
RowValue7X=Metrics.EditMenu.ValuesX
Row7Y=Metrics.EditMenu.RowStartY+Metrics.EditMenu.RowSpacingY*6
#will these work?
GroupBannerCaptureCommand=%Capture.ActorFrame.CaptureInternal
SongBannerCaptureCommand=%Capture.ActorFrame.CaptureInternal
SongTextBannerCaptureCommand=%Capture.ActorFrame.CaptureInternal
MeterCaptureCommand=%Capture.ActorFrame.CaptureInternal
SourceMeterCaptureCommand=%Capture.ActorFrame.CaptureInternal

[EditMenuRow]
# Text:
Group=Folder
Song=Song
StepsType=Type
Steps=Chart
SourceStepsType=Source Type
SourceSteps=Source Chart
Action=Action

[EditMenuAction]
# Text:
Edit=Edit
Delete=Delete
Create=New

[EditDifficultyMeter]
Fallback=DifficultyMeter

[EditPractice]
Fallback=Edit
PrevScreen=@Branch.SelectMusic()

[ScreenEdit]
# fonts are hardcoded to read from "ScreenEdit". lets fix that
Fallback=Edit
Class=ScreenBranch
Choices=1
Condition1=true
NextScreen1=screen,Edit

[EditInit]
Class=ScreenEdit
Fallback=CommonBlankNoBG

InputTipsX=
InputTipsY=
InputTipsOnCommand=
InfoX=
InfoY=
InfoOnCommand=
PlayRecordHelpX=
PlayRecordHelpY=
PlayRecordHelpOnCommand=
PlayRecordHelpText=

InitCommand=%function(s) Screens.Common.Init(s) LoadProfile() Screens.Gameplay.Init(s) end
StageX=
StageY=


[Edit]
Class=ScreenEdit
Fallback=CommonBlank
PrevScreen=EditMenu
#InitCommand gets run twice for whatever reason
InitCommand=%function(s) Screens.Common.Init(s) if not GetScreen():GetChild("Info") then LoadProfile() Screens.Gameplay.Init(s) SetEnv("EditMode",1) end PrepareScreen("PlayerOptionsBPMEdit") DeletePreparedScreens() end
HelpLuaCommand=%Screens.Gameplay.On
FirstUpdateCommand=Screens.Common.FirstUpdate(self)
ScreenFirstUpdateCommand=
ShowStage=@Bool[false]
# Panes: Left=InputTips, Right=Info
InputTipsX=Metrics.Edit.InputTipsXY[1]
InputTipsY=Metrics.Edit.InputTipsXY[2]
InputTipsOnCommand=horizalign,left;vertalign,middle;shadowlength,0;zoom,15/20
InputTipsSlideOutMessageCommand=visible,Bool[true];stoptweening;accelerate,0.3;x,Metrics.Edit.InputTipsXY[1]-256
InputTipsSlideInMessageCommand=stoptweening;decelerate,0.3;x,Metrics.Edit.InputTipsXY[1]
InfoX=Metrics.Edit.InfoXY[1]
InfoY=Metrics.Edit.InfoXY[2]
InfoOnCommand=%function(s) Broadcast("HideOverlay") s:horizalign("left") s:vertalign("middle") s:shadowlength(0) s:zoom(15/20) s:maxheight(SCREEN_HEIGHT/s:GetZoom()) s:draworder(-1) end
InfoSlideOutMessageCommand=visible,Bool[true];stoptweening;accelerate,0.3;x,Metrics.Edit.InfoXY[1]+256
InfoSlideInMessageCommand=stoptweening;decelerate,0.3;x,Metrics.Edit.InfoXY[1]
# Displayed while playing a chart:
PlayRecordHelpX=Metrics.Edit.PlayRecordHelpXY[1]
PlayRecordHelpY=Metrics.Edit.PlayRecordHelpXY[2]
PlayRecordHelpOnCommand=horizalign,center;vertalign,middle;shadowlength,0;zoom,15/20;luaeffect,Update;effectclock,beat
PlayRecordHelpText= 
PlayRecordHelpUpdateCommand=%function(s) local beat=math.floor(s:GetSecsIntoEffect()) s:settext(sprintf("Beat %d/%d",math.mod(beat,4)+1,math.floor(beat/4)+1)) end
# Hooks
OverlayPlayCommand=%Screens.Edit.State.Play
OverlayRecordCommand=%Screens.Edit.State.Record
OverlayEditCommand=%Screens.Edit.State.Edit
OverlayCaptureCommand=%Capture.ActorFrame.CaptureInternal
OverlayHideOverlayMessageCommand=visible,Bool[false]
OverlayUnhideMessageCommand=visible,Bool[true]
UnderlaySlideOutMessageCommand=visible,Bool[true]

[EditSaveSync]
Fallback=SaveSync
NextScreen=Edit

[oldEdit]
HelpLuaCommand=%Screens.Edit.On
InputTipsOnCommand=%Screens.Edit.InputTipsOn
InfoOnCommand=%Screens.Edit.InfoOn
PlayRecordHelpOnCommand=%Screens.Edit.PlayRecordHelpOn
PlayRecordHelpUpdateCommand=%Screens.Edit.PlayRecordHelpUpdate

[MiniMenu]
InitCommand=%Screens.Common.Init
Fallback=Options
BackgroundOnCommand=
ShowExitRow=@Bool[false]
ThemeItems=@Bool[false]
ShowStage=@Bool[false]
StyleIcon=@Bool[false]
MemoryCardIcons=Bool[false]
TimerSeconds=-1
TimerStealth=@Bool[true]
FirstUpdateCommand=Screens.Common.FirstUpdate(self) ModsMenu.AfterInit()
LineHighlightOnCommand=x,0
LabelsX=0
ItemsLongRowSharedX=0
ColorSelected=0,0,0,1
ColorNotSelected=1,1,1,1
ColorDisabled=0.75,0.75,0.75,1
ItemsStartY=-160
NumRowsShown=16
ItemsSpacingY=@362/Metric("MiniMenu","NumShownItems")
RowYOffScreenTop=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*-0.5
RowYOffScreenCenter=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*(Metric("MiniMenu","NumShownItems")/2-0.5)
RowYOffScreenBottom=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*(Metric("MiniMenu","NumShownItems")-0.5)
Row1Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*0
Row2Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*1
Row3Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*2
Row4Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*3
Row5Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*4
Row6Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*5
Row7Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*6
Row8Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*7
Row9Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*8
Row10Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*9
Row11Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*10
Row12Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*11
Row13Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*12
Row14Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*13
Row15Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*14
Row16Y=@Metric("MiniMenu","ItemsStartY")+Metric("MiniMenu","ItemsSpacingY")*15

[MiniSubmenu]
LabelsX=-128
ItemsLongRowSharedX=128

Fallback=MiniMenu
[ScreenMiniMenuEditHelp]
Fallback=MiniMenu
ColorDisabled=1,1,1,1
[ScreenMiniMenuMainMenu]
Fallback=MiniMenu
[ScreenMiniMenuAreaMenu]
Fallback=MiniSubmenu
[ScreenMiniMenuStepsInformation]
Fallback=MiniSubmenu
[ScreenMiniMenuSongInfomation]
Fallback=MiniSubmenu
[ScreenMiniMenuBackgroundChange]
Fallback=MiniSubmenu
[ScreenMiniMenuPreferences]
Fallback=MiniSubmenu
[ScreenMiniMenuInsertAttack]
Fallback=MiniMenu
[ScreenMiniMenuCourseDisplay]
Fallback=MiniMenu
[ScreenMiniMenuCourseOptions]
Fallback=MiniMenu
[ScreenPlayerOptionsEdit]
Fallback=PlayerOptionsBasic
LineNames=@ModsMenu.Init(ModsPagesPlayerEdit())
[ScreenSongOptionsEdit]
Fallback=PlayerOptionsBasic
LineNames=@ModsMenu.Init(ModsPagesSongEdit())

[-----UNTESTED PS2 Stuff-----]
[PS2Memcard]
Class=ScreenPS2Memcard
Fallback=SaveSync
HelpText=
TextX=0
TextY=0
TextOnCommand=x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;shadowlength,0;zoom,.75
TextOffCommand=
TextWorkingCommand=
TextPromptCommand=
TextPromptYesCommand=
TextPromptNoCommand=
TextChangeToYesCommand=
TextChangeToNoCommand=
TextYesCommand=
TextNoCommand=
TextSuccessCommand=sleep,1
TextCancelledCommand=sleep,1
OverlayPromptCommand=

[PS2MemcardCommitEdit]
Class=@IsPS2() and "ScreenPS2Memcard" or "ScreenSaveSync"
Fallback=PS2Memcard

[PS2MemcardBeforeEditMenu]
# before edit menu
Fallback=PS2Memcard
Action=StartEditMenu
[PS2MemcardSave]
Fallback=PS2Memcard
Action=Save
[PS2MemcardLoad]
Fallback=PS2Memcard
Action=Load
[PS2MemcardStartup]
Fallback=PS2Memcard
Action=Startup
NextScreen=@Branch.FirstAttract()
[PS2MemcardAutoSave]
Fallback=PS2Memcard
Action=AutoSave
[PS2MemcardAutoSaveAfterEvaluation]
Fallback=PS2Memcard
Action=AutoSave

[PS2MemcardAutoSaveAfterNameEntry]
[PS2MemcardAutoSaveBeforeOptionsMenu]
[PS2MemcardAutoSaveAfterOptionsMenu]
[PS2MemcardAutoSaveAfterRestoreDefaults]

[AttachController]
# This is a simple screen that displays a message and waits for OK, and
# is skipped entirely if at least one controller is inserted.
Class=ScreenAttachController
Fallback=CommonBlankNoBG
NextScreen=PS2MemcardStartup
TimerSeconds=0
TimerStealth=1
AllowDisabledPlayerInput=1
FirstUpdateCommand=if AnyControllersAreConnected() then SCREENMAN:SetNewScreen("PS2MemcardStartup") end
StyleIcon=0
MemoryCardIcons=0

[ScreenEditMenuDeleteSteps]
#SaveSync really is the wrong screen for this, and it probably doesn't even delete the file.
Fallback=PS2MemcardCommitEdit
NextScreen=EditMenu
PrevScreen=EditMenu
Action=DeleteOneEdit
QuestionOnCommand=%function(s) s:settext("Do you want to delete this edit?") Tweens.Prompt.Question.On(s) end
Answer1Of2Text=Delete

[ScreenMemcardSaveEditsAfterSave]
Fallback=MemcardSaveEditsAfterExit
# these screens are stacked; it doesn't matter what NextScreen is set to.
NextScreen=Edit

[ScreenMemcardSaveEditsAfterExit]
Fallback=PS2MemcardCommitEdit
#Action= is ScreenPS2MemCard specific
Action=SaveOneEdit
NextScreen=@(function()GetScreen():queuemessage("DoExit")return""end)()
PrevScreen=Edit
QuestionOnCommand=%function(s) s:settext("Do you want to save changes?") Tweens.Prompt.Question.On(s) end
Answer1Of2Text=Save

# No idea what these are supposed to do exactly, but they're in the itg ps2 theme data.
[PS2MemcardUnformat]
Class=ScreenPS2MemcardUnformat
[PS2MemcardFill]
Class=ScreenPS2MemcardFill
[PS2MemcardCorrupt]
Class=ScreenPS2MemcardCorrupt

[------Service Menu Screens------]
[ScreenOptionsMenu]
#Go to the correct screen based on game state instead, since the following screens hardcode "ScreenOptionsMenu" on Next/PrevScreen.
#ArcadeDiags, Bookkeeping, CenterImage, MapControllers, NetworkOptions, ProfileOptions, TestInput, TestLights
AllowOperatorMenuButton=@Bool[false]
Class=ScreenBranch
Fallback=Screen
Choices=0,1,2,3,4,5,6
Condition0=GAMESTATE:GetEnv("BackToTitle")
NextScreen0=@"screen,"..Branch.Title()
Condition1=GAMESTATE:GetEnv("TitleBack")
NextScreen1=@"screen,"..Branch.FirstAttract()
Condition2=GAMESTATE:GetEnv("ServiceMenu")
NextScreen2=screen,ServiceMenu
Condition3=GAMESTATE:GetEnv("Caution")
NextScreen4=@"lua,UnjoinPlayers;screen,"..Branch.InputTestNext()
Condition4=GAMESTATE:GetEnv("Title")
NextScreen4=@"lua,UnjoinPlayers;screen,"..Branch.TitleNext()
# Use player 2 service button (unmapped by default) to access debug menu.
Condition5=GlobalInput.GetInput(2,"Operator")
NextScreen5=screen,DebugMenu
Condition6=true
NextScreen6=screen,ServiceMenu

[DebugMenu]
Fallback=ServiceMenu
LineNames=@ModsMenu.Init(DebugMenuScreens)
PrevScreen=@ModsMenu.Branch("DebugMenu",Branch.ExitServiceMenu(),false)
NextScreen=@ModsMenu.Branch("DebugMenu",Branch.ExitServiceMenu(),true)

[DebugMenuContents]
Fallback=ServiceMenuContents
LineNames=@ModsMenu.Init(DebugMenuScreens)
PrevScreen=@ModsMenu.Branch("DebugMenuList",Branch.ExitServiceMenu(),false)
NextScreen=@ModsMenu.Branch("DebugMenuList",Branch.ExitServiceMenu(),true)

[ExitServiceMenu]
Fallback=Boot
ScreenInitCommand=
NextScreen=ExitServiceMenu2
PrevScreen=ExitServiceMenu
MinimumLoadDelaySeconds=0

[ExitServiceMenu2]
Fallback=ExitServiceMenu
NextScreen=@Branch.AfterExitServiceMenu()

[ManageProfiles]
Fallback=ServiceMenu
InitCommand=%function(s) LoadProfile() Screens.Common.Init(s) FitScreenToAspect(s) s:effectperiod(math.huge) end
LineNames=@ModsMenu.Init(ProfileManagementMenu())
PrevScreen=@ModsMenu.Branch("ManageProfiles",Branch.ExitManageProfiles(),false)
NextScreen=@ModsMenu.Branch("ManageProfiles",Branch.ExitManageProfiles(),true)

[ManageProfilesContents]
Fallback=Options
LineNames=@ModsMenu.Init(ProfileManagementMenu())
PrevScreen=@ModsMenu.Branch("ManageProfiles",Branch.ExitManageProfiles(),false)
NextScreen=@ModsMenu.Branch("ManageProfiles",Branch.ExitManageProfiles(),true)

[ManageProfilesSave]
Fallback=Boot
InitCommand=
ScreenInitCommand=
NextScreen=@Branch.AfterExitManageProfiles()
PrevScreen=ManageProfilesSave
MinimumLoadDelaySeconds=0

[ServiceMenu]
ShowStage=@Bool[false]
AllowOperatorMenuButton=@Bool[false]
Fallback=OptionsSharedMenu
InitCommand=%function(s) Screens.Common.Init(s) s:effectperiod(math.huge) GAMESTATE:SetEnv("ServiceMenu",1) end
LabelsOnCommand=visible,Bool[false]
LineNames=@ModsMenu.Init(ServiceMenuScreens())
PrevScreen=@ModsMenu.Branch("ServiceMenu",Branch.ExitServiceMenu(),false)
NextScreen=@ModsMenu.Branch("ServiceMenu",Branch.ExitServiceMenu(),true)
#Does fallback block this?
OptionMenuFlags=@ModsMenu.GetPageType()
IconsOnCommand=%function(s) s:diffusealpha(0.5) end

[ServiceMenuContents]
ShowStage=@Bool[false]
AllowOperatorMenuButton=@Bool[false]
Fallback=OptionsShared
InitCommand=%function(s) Screens.Common.Init(s) s:effectperiod(math.huge) end
LabelsX=-144
ItemsLongRowSharedX=GetScreen():getaux()==table.getn(ModsMenu.GetTop().Contents)+1 and 0 or 112
#LabelsOnCommand=shadowlength,0;horizalign,center;zoom,.75
LineNames=@ModsMenu.Init(ServiceMenuScreens())
PrevScreen=@ModsMenu.Branch("ServiceMenu",Branch.ExitServiceMenu(),false)
NextScreen=@ModsMenu.Branch("ServiceMenu",Branch.ExitServiceMenu(),true)
#OptionMenuFlags=@ModsMenu.GetPageType()
OptionMenuFlags=forceallplayers;explanations;together

[NewServiceMenu]
Fallback=NewModsMenu
PlayMusic=@Bool[not not GetSysConfig().MenuMusic]
StyleIcon=@Bool[false]
TimerSeconds=-1
ShowStage=@Bool[false]
# Workaround for softlock when opening this screen via service button:
InitCommand=%function(s) Screens.Common.Init(s) if GAMESTATE:GetNumSidesJoined()==0 then JoinPlayer1(true) end SetEnv("ServiceMenu",1) end
UpdateOnMessage=@(function()Screens.NewModsMenu.InitMenu(ServiceMenuScreens())end)()
PrevScreen=@Screens.NewModsMenu.Back(Branch.FirstAttract())
HelpGoToPrevScreenCommand=%function(s) Screens.NewModsMenu.GoToPrevScreen(Branch.FirstAttract()) end
HelpGoToNextScreenCommand=%function(s) Screens.NewModsMenu.GoToNextScreen(Branch.FirstAttract()) end

[--]
[Bookkeeping]
Class=ScreenBookkeeping
Fallback=CommonService
AllTimeX=SCREEN_CENTER_X
AllTimeY=SCREEN_CENTER_Y+200
AllTimeOnCommand=zoom,1.5
TitleX=SCREEN_CENTER_X
TitleY=SCREEN_CENTER_Y-200
TitleOnCommand=zoom,1.5
DataX=
DataY=SCREEN_CENTER_Y
DataOnCommand=

[TestPattern]
Fallback=InputHandler
AllowDisabledPlayerInput=@Bool[true]
AllowRepeatingInput=@Bool[false]
CodeNames=@InputHandler.Init(ServiceTestPatternInputs)
PrevScreen=ServiceMenu
ChoiceStart=screen,ServiceMenu

[CenterImage]
Class=ScreenCenterImage
Fallback=TestPattern
AllowResize=@Bool[not IsArcade()]
[ScreenCenterImage]
Fallback=CenterImage

# to get at the unused text object:
#OnCommand=queuecommand,FirstUpdate
#FirstUpdateCommand=%function(s) local x=GetScreen():GetChild("") if x and IsBitmapText(x) then x:settext(" Done") x:diffuse(1,1,1,1) x:y(SCREEN_BOTTOM-16) x:shadowlength(0) x:zoom(1) end end

[Remap]
Class=ScreenMapControllers
Fallback=CommonBlankNoBG
WaitForChildrenBeforeTweeningOut=@Bool[true]
# for whatever reason, these get evaluated between lua state reset and reload
EvenLineIn=%function(s)s:addx(SCREEN_CENTER_X-320)s:addy(-16)local c=Capture.ActorFrame.GetChildren(s).children for col=1,2 do if c[col] then c[col]:addx(320-SCREEN_CENTER_X) end end GetScreen():aux(GetScreen():getaux()+1)s:aux(GetScreen():getaux())s:addy(SCREEN_HEIGHT)s:sleep(0.025*GetScreen():getaux())s:decelerate(0.15)s:addy(-SCREEN_HEIGHT)end
OddLineIn=%function(s)s:addx(SCREEN_CENTER_X-320)s:addy(-16)local c=Capture.ActorFrame.GetChildren(s).children for col=1,2 do if c[col] then c[col]:addx(320-SCREEN_CENTER_X) end end GetScreen():aux(GetScreen():getaux()+1)s:aux(GetScreen():getaux())s:addy(SCREEN_HEIGHT)s:sleep(0.025*GetScreen():getaux())s:decelerate(0.15)s:addy(-SCREEN_HEIGHT)end
EvenLineOut=sleep,.015*self:getaux();accelerate,.15;addy,-SCREEN_HEIGHT
OddLineOut=sleep,.015*self:getaux();accelerate,.15;addy,-SCREEN_HEIGHT
[ScreenMapControllers]
Fallback=Remap

[Packages]
# used mostly for joining both players for the title screen (so pad lights are active)

#List zips in Packages/ folder, and download packages from a http server (needs keyboard) (latter is broken)
Class=ScreenPackages
Fallback=CommonService
NumPackagesShow=16
NumLinksShow=16
#canDL = enable right pane (remote). disabled just means it's stuck on "--Visit URL--"
CanDL=@Bool[false]
# Packages = left pane, Web = right pane.
PackagesBGX=SCREEN_CENTER_X-160
PackagesBGY=SCREEN_CENTER_Y
PackagesBGOnCommand=
WebBGX=SCREEN_CENTER_X+160
WebBGY=SCREEN_CENTER_Y
WebBGOnCommand=
PackagesBGBackCommand=%function(s) if GetScreen():GetChild("Packages") then GetScreen():GetChild("Packages"):diffusealpha(1) end end
PackagesBGAwayCommand=%function(s) if GetScreen():GetChild("Packages") then GetScreen():GetChild("Packages"):diffusealpha(0.5) end end
WebBGBackCommand=%function(s) if GetScreen():GetChild("Web") then GetScreen():GetChild("Web"):diffusealpha(1) end end
WebBGAwayCommand=%function(s) if GetScreen():GetChild("Web") then GetScreen():GetChild("Web"):diffusealpha(0.5) end end
PackagesBGWidth=288
PackagesX=SCREEN_CENTER_X-160
PackagesY=SCREEN_CENTER_Y
PackagesOnCommand=shadowlength,0;zoom,0.75
WebBGWidth=288
WebX=SCREEN_CENTER_X+160
WebY=SCREEN_CENTER_Y
WebOnCommand=shadowlength,0;zoom,0.75
WebURLX=SCREEN_CENTER_X+160
WebURLY=SCREEN_TOP+16
WebURLOnCommand=
WebSelX=SCREEN_CENTER_X
WebSelY=SCREEN_CENTER_Y
WebSelOnCommand=
PackagesBGOffCommand=
WebBGOffCommand=
WebSelOffCommand=
PackagesOffCommand=
WebOffCommand=
DownloadOffCommand=
DownloadBGOffCommand=
DownloadStatusOffCommand=
#two objects named "Download"
DownloadX=SCREEN_CENTER_X
DownloadY=SCREEN_BOTTOM-64
DownloadOnCommand=diffuse,0.25,0.25,0.25,1
DownloadProgressColor=0,1,1,1
DownloadStatusX=SCREEN_CENTER_X
DownloadStatusY=SCREEN_BOTTOM-16
DownloadStatusOnCommand=
PrevScreen=ServiceMenu
NextScreen=ServiceMenu

[Profiles]
#Manages local profiles.
#Hardcoded to load "ScreenProfileOptions" after editing any profiles
#Also hardcoded to return to "ScreenOptionsMenu" on exit.
Class=ScreenProfileOptions
Fallback=OptionsShared
ScreenInitCommand=%function(s) Screens.Common.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) GAMESTATE:SetEnv("BackToTitle",1) end

#Hack to force condensed rows.
ItemsStartX=2
ItemsEndX=1
OptionMenuFlags=smnavigation

[Recache]
#Re-generates song cache.
Class=ScreenReloadSongs
Fallback=Screen
NextScreen=@Branch.FirstAttract()

[ReloadStreams]
Fallback=Boot
InitCommand=%Screens.Start
ScreenInitCommand=%Screens.Start
NextScreen=ReloadStreams2

[ReloadStreams2]
Fallback=Boot
InitCommand=%function(s) GetSysProfile().StreamCache={} UpdateStreamCache() end
NextScreen=@Branch.FirstAttract()

[SetTime]
ScreenInitCommand=%function(s) Screens.Common.Init(s) end
InitCommand=%Screens.Common.Init
Class=ScreenSetTime
TimerSeconds=-1
TimerStealth=@Bool[true]
Fallback=CommonService
NextScreen=@Branch.SetTimeNext()
PrevScreen=@Branch.SetTimeBack()

[IngameTestInput]
# When starting a game 
Fallback=TestInput
# because InputTest goes to ScreenOptionsMenu on back/start, set a flag so the user doesn't go forward when hitting escape.
DevicesP1BackMessageCommand=%function(s) GAMESTATE:SetEnv("TitleBack",1) end
DevicesP2BackMessageCommand=%function(s) GAMESTATE:SetEnv("TitleBack",1) end

# don't black the background
AllowOperatorMenuButton=@Bool[true]

[TestInput]
Class=ScreenTestInput
Fallback=CommonService
PlayMusic=@Bool[not not GetSysConfig().MenuMusic]

#hardcoded:
#DevicesX=SCREEN_LEFT+20
#DevicesY=SCREEN_TOP+80
#InputsX=SCREEN_CENTER_X-250
#InputsY=SCREEN_CENTER_Y

DevicesOnCommand=zoom,1;shadowlength,0;horizalign,left;vertalign,top;visible,Bool[not not GAMESTATE:GetEnv("ServiceMenu")]
DevicesX=SCREEN_LEFT+32
DevicesY=SCREEN_TOP+72
InputsOnCommand=zoom,0.75;shadowlength,0
#;visible,Bool[not not GAMESTATE:GetEnv("ServiceMenu")]
InputsX=SCREEN_CENTER_X
InputsY=SCREEN_CENTER_Y

[TestLights]
Class=ScreenTestLights
Fallback=CommonService

TextOnCommand=shadowlength,0;zoom,0.75
TextX=SCREEN_CENTER_X
TextY=SCREEN_CENTER_Y
TextOffCommand=

[DefaultSong]
#TODO Get rid; this screen doesn't work
Fallback=ServiceMenuContents
LineNames=Groups,Songs
LineGroups=list,Groups
LineSongs=list,SongsInCurrentSongGroup
LineDifficulties=list,Difficulties
LineNoteSkins=list,NoteSkins

[--]
[UserPacks]

##need:
#Sounds/ScreenUserPacks delete
#Sounds/ScreenUserPacks transfer done
#Sounds/LinkedOptionsMenu move row
#Sounds/LinkedOptionsMenu switch menu

Class=ScreenUserPacks
AllowOperatorMenuButton=@Bool[false]
Fallback=CommonBlank
PrevScreen=ServiceMenu
#TODO: text strings
#Beta3 / nITG asks for these strings:
TransferWaitText=@"TransferWaitText"
TransferCancelText=@"TransferCancelText"
LinkedOptionsMenuAddedZipsX=SCREEN_WIDTH*0.25
LinkedOptionsMenuAddedZipsY=SCREEN_CENTER_Y-32
LinkedOptionsMenuAddedZipsOnCommand=
LinkedOptionsMenuUSBZipsX=SCREEN_WIDTH*0.75
LinkedOptionsMenuUSBZipsY=SCREEN_CENTER_Y-32
LinkedOptionsMenuUSBZipsOnCommand=
LinkedOptionsMenuSASExitX=SCREEN_CENTER_X
LinkedOptionsMenuSASExitY=SCREEN_CENTER_Y+192
LinkedOptionsMenuSASExitOnCommand=
DisclaimerText=@"Place .zip files inside a USB folder named UserPacks.\nFor courses, the file must be laid out as: /Courses/coursefolder/course.crs::for example: /Courses/Marathon2/Driven.crs"
DisclaimerX=SCREEN_CENTER_X
DisclaimerY=SCREEN_CENTER_Y+192
DisclaimerOnCommand=zoom,0.75;shadowlength,0;wrapwidthpixels,576/self:GetZoomX()

[LinkedOptionsMenuAddedZips]
Fallback=LinkedOptionsMenu
IndicatorUpTweenOffCommand=stoptweening;linear,0.2;diffusealpha,0;queuemessage,UpdateDiskStats

[LinkedOptionsMenuUSBZips]
Fallback=LinkedOptionsMenu

[LinkedOptionsMenuSASExit]
# single entry named "Exit"; goes to PrevScreen when you hit start.
Fallback=LinkedOptionsMenu
RowOffsetY=-48

[LinkedOptionsMenu]
RowOffsetX=0
RowOffsetY=-112
RowSpacingY=16
CursorOffsetX=0
MenuWrapping=@Bool[true]
RowsPerPage=14
FrameOnCommand=
CursorOnCommand=
CursorTweenOnCommand=
CursorTweenOffCommand=diffusealpha,0
CursorFocusCommand=diffusealpha,1
CursorUnfocusCommand=diffusealpha,0
CursorMoveUpCommand=stoptweening;linear,0.15
CursorMoveDownCommand=stoptweening;linear,0.15
IndicatorUpOnCommand=y,-136
IndicatorDownOnCommand=y,136
IndicatorUpTweenOnCommand=stoptweening;linear,0.2;diffusealpha,1
IndicatorUpTweenOffCommand=stoptweening;linear,0.2;diffusealpha,0
IndicatorUpPageChangeCommand=
IndicatorDownTweenOnCommand=stoptweening;linear,0.2;diffusealpha,1
IndicatorDownTweenOffCommand=stoptweening;linear,0.2;diffusealpha,0
IndicatorDownPageChangeCommand=
RowOnCommand=shadowlength,0;zoom,0.75;diffusealpha,0
RowTweenOnCommand=stoptweening;linear,0.15;diffusealpha,1
RowTweenOffCommand=stoptweening;linear,0.15;diffusealpha,0
RowOffCommand=diffusealpha,0

[------Misc------]
[Redirect]
Class=ScreenBranch
Fallback=Screen
Choices=1
Condition1=true
NextScreen1=

[OptionsGraphics]
Fallback=ServiceMenuContents
LineNames=@LineNumbers(1,6)
Line1=conf,Windowed
Line2=conf,DisplayResolution
Line3=conf,DisplayColor
Line4=conf,TextureResolution
Line5=conf,TextureColor
Line6=conf,MovieColor
#Line7=conf,DelayedTextureDelete
#crashes on "Illegal instruction 4"
#Line8=conf,AspectRatio
#Line8=conf,Vsync

[Game]
Fallback=ServiceMenuContents
LineNames=1,2
Line1=conf,Game
Line2=conf,Theme

[ScreenCredits]
#broken screen; crashes on load and can't do anything about it
BackgroundsSpacingX=
BackgroundsSpacingY=3
BackgroundsScrollSecondsPerItem=
BackgroundsWidth=
BackgroundsHeight=
TextsColorIntro=
TextsColorHeader=
TextsColorNormal=
TextsZoom=
TextsSpacingX=
TextsSpacingY=
TextsScrollSecondsPerItem=

[PlayLights]
Class=ScreenPlayLights
Fallback=CommonBlankNoBG
InitCommand=%function(s) local song=SONGMAN:GetRandomSong() GAMESTATE:SetCurrentSong(song) ForeachPlayer(function(pn) local steps=song:GetAllSteps()[1+math.random()*table.getn(song:GetAllSteps())] GAMESTATE:SetCurrentSteps(pText[pn],steps) end) end
# next and prev both go to PrevScreen
PrevScreen=@Branch.GameplayBack()

[--]
[ScreenTest]
# hit F9-F12 to enter Sandbox, TestSound, TestFonts, Sandbox
Class=ScreenTest
Fallback=Screen
[ScreenTestFonts]
Class=ScreenTestFonts
Fallback=ScreenTest
[ScreenTestSound]
Class=ScreenTestSound
Fallback=ScreenTest
[ScreenSandbox]
Class=ScreenSandbox
Fallback=ScreenTest

[--]
[Jukebox]
Class=ScreenJukebox
Fallback=Gameplay
ShowCourseModifiersProbability=1
AllowAdvancedModifiers=@Bool[false]
InitCommand=%function(s) Screens.Common.Init(s) Screens.Gameplay.Init(s) LoadSpeedMod() end
AllowStyleTypes=TwoPlayersTwoSides,OnePlayerTwoSides

[JukeboxMenu]
InitCommand=%function(s) Screens.Common.Init(s) FitScreenToAspect(s) LoadProfile() end
Class=ScreenOptionsMaster
Fallback=OptionsShared
StyleIcon=@Bool[false]
TimerSeconds=0
LineNames=@ModsMenu.Init(JukeboxMenu())
PrevScreen=@ModsMenu.Branch("JukeboxMenu",Branch.Title(),false)
NextScreen=@ModsMenu.Branch("JukeboxMenu","Jukebox",true)

[Jukebox DifficultyMeterP1]
Fallback=Gameplay DifficultyMeterP1
[Jukebox DifficultyMeterP2]
Fallback=Gameplay DifficultyMeterP2

[--]
[Exit]
Class=ScreenExit
Fallback=Screen
InitCommand=%function() PROFILEMAN:SaveMachineProfile() end

[ExitCommand]
# why does oITG github master (as of 25 Nov 2017) omit ScreenExitCommand from the makefile LOL
Class=ScreenExitCommand
Fallback=Exit
ExecPath=
ExecParams=

[Reboot]
Class=ScreenBranch
Choices=1,2,3
Condition1=OPENITG
NextScreen1=screen,RebootoITG
Condition2=IsArcade() and not OPENITG
NextScreen2=screen,RebootCrash
Condition3=@Bool[true]
NextScreen3=screen,Exit

[RebootoITG]
#Used to reboot in oITG without needing to bust open a shell.
Fallback=ExitCommand
ExecPath=reboot
ExecParams=

[RebootCrash]
# Stock ITG will force a reboot if it crashes. Deliberately make itg panic
Class=

[ExitToDebug]
#Exit to a shell and mount rw ready to copy files or do whatever else.
Fallback=ExitCommand
ExecPath=mount
ExecParams=-oremount,rw /itgdata/custom

[TestExit]
Fallback=ExitCommand
ExecPath=sleep
ExecParams=10

[--]

[Crash]
AllowOperatorMenuButton=0
Class=ScreenTest
Fallback=Common
InitCommand=%function(s) MessageManager.Broadcast(MESSAGEMAN,"_ShowCrashMessage") end

[aCrash]
# Display a crash message (hit Start to dismiss)
Class=ScreenInstructions
Fallback=CommonBlankNoBG
NextScreen=CrashReset
PrevScreen=CrashReset
InitCommand=
ShowStage=@Bool[false]
ForceTimer=@Bool[false]
TimerStealth=@Bool[false]
MemoryCardIcons=@Bool[false]

[CrashReset]
Class=ScreenTest
Fallback=CommonBlankNoBG
InitCommand=%function(s) GAMESTATE:DelayedGameCommand("reloadtheme;screen,Boot") end

[------Old Screens inherited from 3.9-------]
[MusicScroll]
Class=ScreenMusicScroll
Fallback=Attract
NextScreen=@IsCourseMode() and "RankingCourses" or "RankingSongs"
TimerSeconds=@math.max(1,(table.getn(SONGMAN:GetAllSongs())/96)-1)
ForceTimer=@Bool[true]
TimerStealth=@Bool[true]
[ScreenMusicScroll]
ScrollDelay=0.075/table.getn(SONGMAN:GetAllSongs())*96
ScrollSpeed=1/table.getn(SONGMAN:GetAllSongs())*96
TextZoom=0.75

[SelectCharacter]
Class=ScreenSelectCharacter
Fallback=Common

[ScreenSelectCharacter]
# assets:
#  G/ScreenSelectCharacter card arrows
#  G/ScreenSelectCharacter title 2x2
#  G/ScreenSelectCharacter attack frame 1x2
#  G/ScreenSelectCharacter explanation
#  S/ScreenSelectCharacter change
#  G/ScreenSelectCharacter icon 3x2
#  F/ScreenSelectCharacter icon

# MAX_CHAR_ICONS_TO_SHOW 11
# NUM_ATTACK_LEVELS 3
# onscreen objects:
#	Sprite			m_sprTitle[NUM_PLAYERS];
#	Banner			m_sprIcons[NUM_PLAYERS][MAX_CHAR_ICONS_TO_SHOW];
#	Sprite			m_sprCard[NUM_PLAYERS];
#	Sprite			m_sprCardArrows[NUM_PLAYERS];
#	Sprite			m_sprAttackFrame[NUM_PLAYERS];
#	OptionIcon		m_AttackIcons[NUM_PLAYERS][NUM_ATTACK_LEVELS][NUM_ATTACKS_PER_LEVEL];
#	Sprite			m_sprExplanation;

#  G/ScreenSelectCharacter title 2x2
# subsprites: p1, p2, p1cpu, p2cpu
TitleP1OnCommand=
TitleP1OffCommand=
TitleP2OnCommand=
TitleP2OffCommand=

#cards are 100x160
CardP1OnCommand=
CardP1OffCommand=
CardP2OnCommand=
CardP2OffCommand=
CardArrowsP1OnCommand=
CardArrowsP1OffCommand=
CardArrowsP2OnCommand=
CardArrowsP2OffCommand=

#  G/ScreenSelectCharacter explanation
ExplanationOnCommand=
ExplanationOffCommand=

#  G/ScreenSelectCharacter attack frame 1x2
AttackFrameP1OnCommand=
AttackFrameP1OffCommand=
AttackFrameP2OnCommand=
AttackFrameP2OffCommand=

#  G/ScreenSelectCharacter icon 3x2
AttackIconWidth=
AttackIconHeight=

AttackIconsP1StartX=
AttackIconsP1StartY=
AttackIconsP2StartX=
AttackIconsP2StartY=
AttackIconsSpacingX=
AttackIconsSpacingY=
AttackIconsP1OnCommand=
AttackIconsP1OffCommand=
AttackIconsP2OnCommand=
AttackIconsP2OffCommand=
SleepAfterTweenOffSeconds=

# Icons are actually Banner class, ScaleToClipped. Falls back to character's card path then "Common fallback banner"
IconWidth=38
IconHeight=38

IconsP1OnCommand=
IconsP1OffCommand=
IconsP2OnCommand=
IconsP2OffCommand=

[SelectDifficulty]
Class=ScreenSelectDifficulty
Fallback=Select

NumChoicesOnPage1=
LockInputSeconds=
SleepAfterChoiceSeconds=
SleepAfterTweenOffSeconds=
CursorChooseCommand=
CursorP%dOffsetXFromPicture=
CursorP%dOffsetYFromPicture=
ShadowChooseCommand=
ShadowLengthX=
ShadowLengthY=
OKChooseCommand=
DisabledColor=
IgnoredElementOnCommand=

[SelectStyle]
#deprecated; removed in sm5
Class=ScreenSelectStyle
Fallback=Select

IconGainFocusCommand=
IconLoseFocusCommand=
DisabledColor=

[SelectGroup]
# group select, like in DDR 4th mix plus
Class=ScreenSelectGroup
Fallback=Common
[ScreenSelectGroup]
BannerWidth=
BannerHeight=
SleepAfterTweenOffSeconds=
[GroupList]
SpacingY=
SpacingX=
StartY=
StartX=
ShowItemCommand=
HideItemCommand=
LoseFocusGroupCommand=
GainFocusGroupCommand=
LoseFocusItemCommand=
GainFocusItemCommand=
ScrollTweenCommand=
[MusicList]
NumRows=
NumColumns=
CropWidth=
SpacingX=
StartY=
StartX=
InitCommand=

[NameEntryDDR]
# Deprecated DDR-style scrolling-arrows name entry screen that's not in SM5
# Uses pref: GetRankingName { RANKING_OFF, RANKING_ON, RANKING_LIST };
# RANKING_LIST means you only get to put your name in for ranked courses (like DDR Extreme and similar)

# PS how do you get rid of that stupid text shadow

Class=ScreenNameEntry
# fall back to Common for In and Out transitions
InitCommand=%function(s) for i,c in next,Capture.ActorFrame.GetChildren(s).children,nil do if IsBitmapText(c) then c:shadowlength(0) end end end
Fallback=Common
NextScreen=@Branch.NameEntryNext()
PrevScreen=@Branch.NameEntryNext()
MaxRankingNameLength=4
PlayerP1OnePlayerOneSideX=PlayerX(1)
PlayerP2OnePlayerOneSideX=PlayerX(2)
PlayerP1TwoPlayersTwoSidesX=PlayerX(1)
PlayerP2TwoPlayersTwoSidesX=PlayerX(2)
PlayerP1OnePlayerTwoSidesX=SCREEN_CENTER_X
PlayerP2OnePlayerTwoSidesX=SCREEN_CENTER_X

[ScreenNameEntry]
Fallback=NameEntryDDR
CategoryY=SCREEN_CENTER_Y+190
CategoryZoom=0.75
CharsZoomSmall=1.0
CharsZoomLarge=1.5
CharsSpacingY=40
ScrollingCharsColor=0.6,0.8,0.8,1
SelectedCharsColor=0.8,1,1,1
ReceptorArrowsY=SCREEN_CENTER_Y-140
NumCharsToDrawBehind=2
NumCharsToDrawTotal=12
FakeBeatsPerSec=2.5
TimerSeconds=24

[ScreenEndlessBreak]
# Not in SM5. Displays a picture, countdown timer, and character models. Derived from Screen. Also, no lua bindings
# Interprets the endless break preference in minutes for whatever stupid reason
Class=ScreenEndlessBreak
Fallback=CommonBlank

[ScreenUnlock]
UnlockTextScrollX=
UnlockTextScrollStartY=
UnlockTextScrollEndY=
UnlockTextScrollZoom=
UnlockTextScrollRows=
UnlockTextScrollMaxWidth=
UnlockTextScrollIconX=
UnlockTextScrollIconSize=
UnlockTextScroll
TypeOfPointsToDisplay=
UnlockIconCommand=
TimeToDisplay=
PointsZoom=

[------Common------]
[PlayerStageStats]
# Recycles grades into clear lamps: FFC/FEC/pass/fail (this works even on 3.9 btw)
# Note: While 20 grade tiers is possible,
#       GradeDisplay is hardcoded to use a maximum of 7 tiers + fail (ostensibly for DDR style grades - AAAA,AAA,AA,A,B,C,D,E)
#		- on the songwheel, 8 tiers are possible (tiers 8-20 all use the same subsprite; fail is never shown)
NumGradeTiersUsed=3
GradeTier02IsAllPerfects=@Bool[true]
GradePercentTier01=1
GradePercentTier02=-10000000
GradePercentTier03=-10000000

[Grade]
Tier01=Full Fantastic Combo
Tier02=Full Excellent Combo
Tier03=Pass
Failed=Fail
NoData=No Data

[HighScore]
EmptyName=@Metrics.ScorePlaceholderName

[--]
[TapNoteScore]
#Used to generate catalog.xml
None=
HitMine=
AvoidMine=
Miss=
Boo=
Good=
Great=
Perfect=
Marvelous=
[HoldNoteScore]
#Used to generate catalog.xml
None=
NG=
OK=
[RadarCategory]
Stream=
Voltage=
Chaos=
Air=
Freeze=
Taps=
Jumps=
Holds=
Mines=
Rolls=
Hands=
[Difficulty]
#Used in ScreenRanking to title the score columns.
Beginner=@Languages[CurLanguage()].Difficulty.Beginner
Easy=@Languages[CurLanguage()].Difficulty.Easy
Medium=@Languages[CurLanguage()].Difficulty.Medium
Hard=@Languages[CurLanguage()].Difficulty.Hard
Challenge=@Languages[CurLanguage()].Difficulty.Challenge
Edit=@Languages[CurLanguage()].Difficulty.Edit
[CourseDifficulty]
Fallback=Difficulty
Easy=@Languages[CurLanguage()].CourseDifficultyNames[1]
Regular=@Languages[CurLanguage()].CourseDifficultyNames[2]
Difficult=@Languages[CurLanguage()].CourseDifficultyNames[3]

[------Attract Screens------]
[Demonstration]
Class=ScreenDemonstration
Fallback=Jukebox
SecondsToShow=30
DifficultiesToShow=easy,medium
InitCommand=%function(s) Screens.Common.Init(s) Screens.Attract.Init(s) LoadProfile() LoadSpeedMod() Screens.Gameplay.Init(s) end
NextScreen=Logo
StartScreen=AttractCancel
#@Branch.Title()
ShowCourseModifiersProbability=0
UseForcedModifiersInBeginner=@Bool[true]
AllowStyleTypes=OnePlayerTwoSides,TwoPlayersTwoSides

[Demonstration DifficultyMeterP1]
Fallback=Jukebox DifficultyMeterP1
[Demonstration DifficultyMeterP2]
Fallback=Jukebox DifficultyMeterP2

[oldScreenHowToPlay]
Class=ScreenHowToPlay
Fallback=Attract
TimerSeconds=25
SecondsToShow=25
UseLifeMeterBar=@Bool[true]
LifeMeterBarX=Metrics.Gameplay.LifeX[1]
LifeMeterBarY=Metrics.Gameplay.LifeY
LifeMeterBarOnCommand=%function(s) Tweens.Gameplay.Life.On(s,1) end
UseCharacter=@Bool[false]
UsePad=@Bool[false]
PadX=SCREEN_CENTER_X-280
PadY=SCREEN_CENTER_Y+70
PadOnCommand=Zoom,15;RotationY,180;sleep,4.7;linear,1.0;RotationY,360;Zoom,20;AddX,190;AddY,80
UseNotefield=1
Stepfile=ScreenHowToPlay steps.sm
PlayerX=SCREEN_CENTER_X+160
PlayerY=SCREEN_CENTER_Y
PlayerOnCommand=
SongBPM=100
NumPerfects=4
NumMisses=6

[HowToPlay]
Fallback=Demonstration
NextScreen=RankingSongs
DifficultiesToShow=beginner
AllowStyleTypes=OnePlayerOneSide
SecondsToShow=41
LifeP1OnCommand=%function(s) Capture.Lifebar.On(s,1) LuaEffect(s,"Update") Tweens.Gameplay.Life.On(s,1) s:draworder(99) end

[HowToPlay DifficultyMeterP1]
Fallback=Demonstration DifficultyMeterP1
[HowToPlay DifficultyMeterP2]
Fallback=Demonstration DifficultyMeterP2

[--]
[Instructions]
# Literally, a registered version of SWME, with MenuStart sending you to NextScreen.
Class=ScreenInstructions
Fallback=Common

[--]
[Logo]
Class=@SM_VERSION==5 and "ScreenAttract" or "ScreenLogo"
Fallback=ScreenLogo
ScreenInitCommand=%function(s) Screens.Common.Init(s) Screens.Attract.Init(s) end
InitCommand=%function(s) Broadcast("ResetGame") Screens.Common.Init(s) Screens.Attract.Init(s) end
LogoX=SCREEN_CENTER_X
LogoY=SCREEN_CENTER_Y
LogoOnCommand=visible,Bool[false]
NextScreen=@GetPref("ShowInstructions") and "HowToPlay" or "RankingSongs"
TimerSeconds=15
ForceTimer=@Bool[true]

[--]
[RankingSongs]
NextScreen=@table.getn(CourseCache[PLAY_MODE_NONSTOP])>0 and CanPlayMarathons() and "RankingCourses" or "AfterRanking"
Fallback=Ranking
ShowStepsScores=@Bool[true]
StepsTypeTextCommand=%function(s) s:visible(Bool[true]) s:settext(string.capitalize(split("-",s:GetText())[2]).." Song High Scores") end
#Edit is seldom used. Also, since beginner is off, shift left one space.
ColSpacingX=(Metrics.Ranking.Rows.ColsRight-Metrics.Ranking.Rows.ColsLeft)/(table.getn(RankingDifficulties)-1)*SongRankingSpacingZoomX
DifficultyStartX=SCREEN_CENTER_X+Metric("RankingSongs","StepsScoreOffsetStartX")
StepsScoreOffsetStartX=@Metrics.Ranking.Rows.ColsLeft-Metric("RankingSongs","ColSpacingX")*SongRankingShiftRowsLeft
#apply colours to entries
ListScoreRowItemsOnCommand=queuecommand,SetAttribs
ListScoreRowItemsSetAttribsCommand=%function(s) s:shadowlength(0) for i,row in next,Capture.ActorFrame.GetChildren(s).children,nil do for c=1,6 do local col=row.children[c+2] col:diffuse(unpack(difficultyColors[c-1])) end end end
StepsScoreOnCommand=zoom,1;shadowlength,0

[RankingCourses]
NextScreen=@table.getn(CourseCache[PLAY_MODE_ONI])>0 and "RankingSurvival" or "AfterRanking"
Fallback=Ranking
ShowNonstopCourseScores=@Bool[true]
ShowSurvivalTime=@Bool[true]
StepsTypeTextCommand=%function(s) s:visible(Bool[true]) s:settext(string.capitalize(split("-",s:GetText())[2]).." Marathon High Scores") end
#Since the game won't let you pick Beginner/Challenge/Edit difficulty for courses, shift left one space and widen the column gap.
ColSpacingX=(Metrics.Ranking.Rows.ColsRight-Metrics.Ranking.Rows.ColsLeft)/(table.getn(RankingCourseDifficulties)-1)*CourseRankingSpacingZoomX
CourseDifficultyStartX=SCREEN_CENTER_X+Metric("RankingCourses","CourseListScoreOffsetStartX")
CourseListScoreOffsetStartX=@Metrics.Ranking.Rows.ColsLeft-Metric("RankingCourses","ColSpacingX")*CourseRankingShiftRowsLeft
ListScoreRowItemsOnCommand=queuecommand,SetAttribs
ListScoreRowItemsSetAttribsCommand=%function(s) s:shadowlength(0) local list=Capture.ActorFrame.GetChildren(s) for i,row in next,list.children,nil do for c=1,table.getn(row.children)-2 do local col=row.children[c+2] col:diffuse(unpack(difficultyColors[_G["COURSE_DIFFICULTY_"..string.upper(RankingCourseDifficulties[c])]])) end end end
CourseListScoreOnCommand=zoom,1;shadowlength,0;wrapwidthpixels,(1/self:GetZoomX())*Metric("RankingCourses","ColSpacingX")

[RankingOni]
NextScreen=RankingSurvival
Fallback=RankingCourses
ShowNonstopCourseScores=@Bool[false]
ShowOniCourseScores=@Bool[true]
StepsTypeTextCommand=%function(s) s:visible(Bool[true]) s:settext(string.capitalize(split("-",s:GetText())[2]).." Oni High Scores") end

[RankingSurvival]
Fallback=RankingCourses
NextScreen=AfterRanking
ShowNonstopCourseScores=@Bool[false]
ShowSurvivalCourseScores=@Bool[true]
#Survival, oddly, loads the sprite for "PageType OniCourses"
StepsTypeTextCommand=%function(s) s:visible(Bool[true]) s:settext(string.capitalize(split("-",s:GetText())[2]).." Survival High Scores") end
ColSpacingX=(Metrics.Ranking.Rows.ColsRight-Metrics.Ranking.Rows.ColsLeft)/(math.max(1,table.getn(RankingSurvivalDifficulties)-1))*SurvivalRankingSpacingZoomX
CourseDifficultyStartX=SCREEN_CENTER_X+Metric("RankingSurvival","CourseListScoreOffsetStartX")
CourseListScoreOffsetStartX=@Metrics.Ranking.Rows.ColsLeft-Metric("RankingSurvival","ColSpacingX")*SurvivalRankingShiftRowsLeft
ListScoreRowItemsOnCommand=queuecommand,SetAttribs
ListScoreRowItemsSetAttribsCommand=%function(s) s:shadowlength(0) local list=Capture.ActorFrame.GetChildren(s) for i,row in next,list.children,nil do for c=1,table.getn(row.children)-2 do local col=row.children[c+2] col:diffuse(unpack(difficultyColors[_G["COURSE_DIFFICULTY_"..string.upper(RankingSurvivalDifficulties[c])]])) end end end
CourseListScoreOnCommand=zoom,1;shadowlength,0;wrapwidthpixels,(1/self:GetZoomX())*Metric("RankingSurvival","ColSpacingX")
CourseDifficultiesToShow=@join(",",RankingSurvivalDifficulties)

[AfterRanking]
Fallback=Redirect
NextScreen1=@"screen,"..(GetPref("ShowInstructions") and "Demonstration" or "Logo")

[ScreenRanking]
CoursesToShow=
#only gets evaluated if CoursesToShow is blank in stepmania.ini
#CoursesToShow=/Courses/Marathon/Just Dance.crs,/Courses/Marathon/Caddywhompus.crs,/Courses/Marathon/Energy.crs,/Courses/Marathon/Trance.crs,/Courses/Marathon2/Driven.crs,/Courses/Marathon2/Nightmare.crs

[Ranking]
CoursesToShow=
ScreenInitCommand=%function(s) Screens.Common.Init(s) FitScreenToAspect(s) end
InitCommand=%function(s) Screens.Common.Init(s) FitScreenToAspect(s) end
Class=ScreenRanking
Fallback=Attract
NextScreen=Logo
# Frame:
#PageType gets unloaded and reloaded again when it changes pages.
PageTypeX=Metrics.Ranking.PageXY[1]
PageTypeY=Metrics.Ranking.PageXY[2]
PageTypeOnCommand=draworder,-1;diffusecolor,unpack(UIColor("RankingPane"));diffusealpha,CommonPaneDiffuseAlpha) local self=GetScreen():GetChild("BannerFrame") self:Load(GetPathG("Ranking mask",true);blend,noeffect;zbias,1;zbuffer,Bool[true];x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;visible,Bool[true]
#off only gets run at the end.
PageTypeOffCommand=
# Heading:
StepsTypeX=Metrics.Ranking.StepsTypeX
StepsTypeY=Metrics.Ranking.HeadingY
StepsTypeOnCommand=visible,Bool[false];queuecommand,Text
StepsTypeOffCommand=
# indexes corresponds to StepsTypesToHide (show?), gets applied to score bitmaptext objects.
# Gets overridden anyway so it doesn't matter what the colour values are.
StepsTypeColor1=1,1,1,1
StepsTypeColor2=1,1,1,1
StepsTypeColor3=1,1,1,1
StepsTypeColor4=1,1,1,1
StepsTypeColor5=1,1,1,1
#NOTE: The difficulty columns are offset from their difficulty slot
DifficultyStartX=0
DifficultyY=Metrics.Ranking.HeadingY
Difficulty1OnCommand=shadowlength,0;diffuse,unpack(difficultyColors[0])
Difficulty2OnCommand=shadowlength,0;diffuse,unpack(difficultyColors[1])
Difficulty3OnCommand=shadowlength,0;diffuse,unpack(difficultyColors[2])
Difficulty4OnCommand=shadowlength,0;diffuse,unpack(difficultyColors[3])
Difficulty5OnCommand=shadowlength,0;diffuse,unpack(difficultyColors[4])
Difficulty6OnCommand=shadowlength,0;diffuse,unpack(difficultyColors[5])
Difficulty1OffCommand=
Difficulty2OffCommand=
Difficulty3OffCommand=
Difficulty4OffCommand=
Difficulty5OffCommand=
Difficulty6OffCommand=
CourseDifficultyStartX=0
CourseDifficultyY=Metrics.Ranking.HeadingY
CourseDifficultyEasyOnCommand=shadowlength,0;diffuse,unpack(difficultyColors[1])
CourseDifficultyRegularOnCommand=shadowlength,0;diffuse,unpack(difficultyColors[2])
CourseDifficultyDifficultOnCommand=shadowlength,0;diffuse,unpack(difficultyColors[3])
CourseDifficultyEasyOffCommand=
CourseDifficultyRegularOffCommand=
CourseDifficultyDifficultOffCommand=
# Scroller:
ListScoreRowItemsX=SCREEN_CENTER_X
ListScoreRowItemsY=SCREEN_CENTER_Y
ListScoreRowItemsOnCommand=
ListScoreRowItemsCaptureCommand=%Capture.ActorFrame.CaptureInternal
ListScoreRowItemsOffCommand=
SongScoreRowsToShow=5
SongScoreSecondsPerRow=@Metrics.Ranking.ScrollSpeed
# Columns:
RowSpacingX=0
RowSpacingY=@Metrics.Ranking.Rows.RowHeight
ColSpacingY=0
# Row heading (left)
SongFrameOffsetX=0
SongFrameOffsetY=0
SongFrameOnCommand=diffuse,unpack(UIColor("RankingEntry"));sleep,Metric("Ranking","SongScoreSecondsPerRow")*(Metric("Ranking","NumMostRecentScoresToShow"))+Metric("Ranking","SongScoreRowsToShow")*Metric("Ranking","SongScoreSecondsPerRow");linear,0.3;diffusealpha,0
SongFrameOffCommand=
SongTitleOffsetX=@Metrics.Ranking.Rows.TitleX
SongTitleOffsetY=0
SongTitleOnCommand=wrapwidthpixels,312;shadowlength,0
SongTitleOffCommand=
CourseListFrameOffsetX=0
CourseListFrameOffsetY=0
CourseListFrameOnCommand=diffuse,unpack(UIColor("RankingEntry"))
CourseListFrameOffCommand=
CourseListTitleOffsetX=@Metrics.Ranking.Rows.TitleX
CourseListTitleOffsetY=0
CourseListTitleOnCommand=wrapwidthpixels,312;shadowlength,0
CourseListTitleOffCommand=
# Row contents (right)
StepsScoreOffsetStartX=@-Metric("RankingSongs","ColSpacingX")
StepsScoreOffsetY=0
StepsScoreOnCommand=shadowlength,0
StepsScoreOffCommand=
CourseListScoreOffsetStartX=@-Metric("RankingCourses","ColSpacingX")/2
CourseListScoreOffsetY=0
CourseListScoreOnCommand=%function(s) s:shadowlength(0) s:diffuse(unpack(difficultyColors[GetScreen():getaux()+1])) GetScreen():aux(math.mod(GetScreen():getaux()+1,table.getn(RankingCourseDifficulties))) end
CourseListScoreOffCommand=
# General:
ShowCategories=@Bool[false]
# Pick one:
ShowStepsScores=@Bool[false]
ShowNonstopCourseScores=@Bool[false]
ShowOniCourseScores=@Bool[false]
ShowSurvivalCourseScores=@Bool[false]
#
ManualScroling=@Bool[not not GetPref("ScreenTestMode")]
ShowOnlyMostRecentScores=@Bool[true]
NumMostRecentScoresToShow=@Metrics.Ranking.NumEntriesMax
DifficultiesToShow=@join(",",RankingDifficulties)
CourseDifficultiesToShow=@join(",",RankingCourseDifficulties)
StepsTypesToHide=dance-double,dance-couple,dance-solo,lights-cabinet
SecondsPerPage=@Metric("Ranking","SongScoreSecondsPerRow")*(Metric("Ranking","NumMostRecentScoresToShow")+0.5)

PageFadeSeconds=0.0
NoScoreName=@Metrics.ScorePlaceholderName
ShowSurvivalTime=@Bool[false]

## category ranking page layout -

BannerX=SCREEN_CENTER_X
BannerY=SCREEN_CENTER_Y-184
BannerOnCommand=
BannerOffCommand=
BannerFrameX=SCREEN_CENTER_X
BannerFrameY=SCREEN_CENTER_Y-184
BannerFrameOnCommand=
BannerFrameOffCommand=
CourseTitleX=SCREEN_CENTER_X
CourseTitleY=SCREEN_CENTER_Y-128
CourseTitleOnCommand=
CourseTitleOffCommand=
CategoryX=SCREEN_CENTER_X+192
CategoryY=SCREEN_CENTER_Y-192
CategoryOnCommand=
CategoryOffCommand=

BulletStartX=SCREEN_CENTER_X-272
NameStartX=SCREEN_CENTER_X-144
ScoreStartX=SCREEN_CENTER_X+48
PointsStartX=SCREEN_CENTER_X+48
TimeStartX=SCREEN_CENTER_X+240

BulletStartY=SCREEN_CENTER_Y-80
NameStartY=SCREEN_CENTER_Y-80
ScoreStartY=SCREEN_CENTER_Y-80
PointsStartY=SCREEN_CENTER_Y-80
TimeStartY=SCREEN_CENTER_Y-80

Bullet1OnCommand=
Name1OnCommand=
Score1OnCommand=
Points1OnCommand=
Time1OnCommand=
Bullet2OnCommand=
Name2OnCommand=
Score2OnCommand=
Points2OnCommand=
Time2OnCommand=
Bullet3OnCommand=
Name3OnCommand=
Score3OnCommand=
Points3OnCommand=
Time3OnCommand=
Bullet4OnCommand=
Name4OnCommand=
Score4OnCommand=
Points4OnCommand=
Time4OnCommand=
Bullet5OnCommand=
Name5OnCommand=
Score5OnCommand=
Points5OnCommand=
Time5OnCommand=

Bullet1OffCommand=
Name1OffCommand=
Score1OffCommand=
Points1OffCommand=
Time1OffCommand=
Bullet2OffCommand=
Name2OffCommand=
Score2OffCommand=
Points2OffCommand=
Time2OffCommand=
Bullet3OffCommand=
Name3OffCommand=
Score3OffCommand=
Points3OffCommand=
Time3OffCommand=
Bullet4OffCommand=
Name4OffCommand=
Score4OffCommand=
Points4OffCommand=
Time4OffCommand=
Bullet5OffCommand=
Name5OffCommand=
Score5OffCommand=
Points5OffCommand=
Time5OffCommand=

[RankingCategory]
Fallback=Ranking
ShowCategories=@Bool[true]


[--]

[TitleTestInput]
# Title screen with input test and pad lights
# use this instead of the live lights on 3.95 plain?
Class=ScreenTestInput
Fallback=TitleJoin
InitCommand=%function(s) GAMESTATE:Reset() Screens.Common.Init(s) Screens.Attract.Init(s) if GetPref("CoinMode")==COIN_MODE_PAY and GAMESTATE:GetCoins()<GetPref("CoinsPerCredit") then SetScreen(Branch.FirstAttract()) else JoinBothPlayers() GameCommand("playmode,Regular") GAMESTATE:SetEnv("Title",1) end end
FirstUpdateCommand=if not self:GetChild("Devices")and self:GetChild("")then self:GetChild(""):visible(Bool[false])end
DevicesOnCommand=visible,Bool[false]
InputsOnCommand=zoom,0.7
DevicesX=
DevicesY=
InputsX=SCREEN_CENTER_X-250
InputsY=SCREEN_CENTER_Y
DevicesP1BackMessageCommand=%function(s) GAMESTATE:SetEnv("TitleBack",1) end
DevicesP2BackMessageCommand=%function(s) GAMESTATE:SetEnv("TitleBack",1) end
DevicesCoinModeChangedMessageCommand=%function(s) SetScreen(Branch.Title()) end

[TitleJoin]
Fallback=TitleMenu
HelpLuaCommand=%Screens.Title.Join.On
ScreenFirstUpdateCommand=%Screens.Title.Join.FirstUpdate
ChoiceNames=@MenuNames(TitleMenuEntries(),nil,nil,1)
ShowScroller=@Bool[false]

[TitleMenu]
Fallback=SelectMaster
Class=ScreenTitleMenu
ScreenInitCommand=%Screens.Attract.Init
PrevScreen=@Branch.TitleBack()
InitCommand=%function(s) if GetSysConfig().PadLightsOnTitle then JoinBothPlayers() end Screens.Common.Init(s) Screens.Attract.Init(s) if GetPref("CoinMode")==COIN_MODE_PAY and GAMESTATE:GetCoinsNeeded()>0 then SetScreen(Branch.FirstAttract()) end end
MorePage1OnCommand=visible,Bool[false]
#) JoinBothPlayers(
#MorePage1OnCommand=visible,Bool[false]) if GetSysConfig().PadLightsOnTitle then JoinBothPlayers() end

# Enable both sides so the pad lights will be active; unjoin the players on Start so we're not forced to play versus (the screen joins back whoever hit start afterwards)
CodeNames=@GetSysConfig().PadLightsOnTitle and "Unjoin" or ""
CodeUnjoin=Start
#CodeUnjoinAction=lua,UnjoinPlayers
#quicker this way: doing it through lua adds a noticeable pause

#CodeUnjoinAction=style,single;lua,ForceSongAndSteps;preparescreen,EditInit;preparescreen,UnjoinPlayers;deletepreparedscreens
CodeUnjoinAction=preparescreen,UnjoinPlayers;deletepreparedscreens
ScreenOnCommand=%Screens.Title.Menu.On
HelpLuaCommand=%Screens.Title.Menu.On
FirstUpdateCommand=Screens.Common.FirstUpdate(self) Screens.Title.Menu.FirstUpdate(self)
ScreenFirstUpdateCommand=%Screens.Title.Menu.FirstUpdate
TimerSeconds=-1
CoinModeChangeScreen=@Branch.Title()
# IdleTimeout* doesn't apply to pay mode. Pay mode holds this screen until Start is pressed.
IdleTimeoutSeconds=GAMESTATE:GetCoinMode()==COIN_MODE_FREE and Metrics.Title.IdleTimeout or -1
IdleTimeoutScreen=@Branch.FirstAttract()
ChoiceNames=@MenuNames(TitleMenuEntries())
Choices=@MenuEntries()
SharedPreviewAndCursor=@Bool[true]
AllowDisabledPlayerInput=@Bool[true]
WrapCursor=@Bool[false]
WrapScroller=@Bool[false]
ShowScroller=@Bool[true]
ScrollerX=Metrics.Title.EntriesXY[1]
ScrollerY=Metrics.Title.EntriesXY[2]
ScrollerTransform=function(self,offset,itemIndex,numItems) self:y(Metrics.Title.EntriesSpacingY*offset) end
ScrollerNumItemsToDraw=@table.getn(TitleMenuEntries())*2
OverrideLockInputSeconds=@Bool[false]
LockInputSeconds=Metrics.Title.LockInputTime
LogoOnCommand=visible,Bool[false]
LogoX=
LogoY=
VersionX=Metrics.Title.VersionXY[1]
VersionY=Metrics.Title.VersionXY[2]
VersionOnCommand=zoom,0.75;horizalign,left;diffuse,1,1,1,0;shadowlength,0;visible,Bool[not not GetSysConfig().VerboseTitleMenu];playcommand,SetText
VersionSetTextCommand=%function(s) if GetRevision then s:settext(sprintf("%s r%d",s:GetText(),GetRevision())) end end
SongsX=Metrics.Title.SongsXY[1]
SongsY=Metrics.Title.SongsXY[2]
SongsOnCommand=zoom,0.75;horizalign,right;diffuse,1,1,1,0;shadowlength,0;playcommand,SetText;visible,Bool[not not GetSysConfig().VerboseTitleMenu]
#SongsSetTextCommand=%function(s) local text=s:GetText() s:settext(string.format('%s, %d courses',string.gsub(string.sub(text,1,string.find(text,',')-1),'groups','folders'),table.getn(SONGMAN:GetAllCourses(false)))) end
#SongsSetTextCommand=%function(s) local text=s:GetText() s:settext(string.format('%s\n%d marathons, %d survival courses',string.gsub(string.sub(text,1,string.find(text,',')-1),'groups','folders'),table.getn(CourseCache[PLAY_MODE_NONSTOP]),table.getn(CourseCache[PLAY_MODE_ONI]))) end
SongsSetTextCommand=%function(s) local text=s:GetText() s:settext(string.gsub(string.sub(text,1,string.find(text,',')-1),'groups','folders')) end
MaxStagesX=Metrics.Title.MaxStagesXY[1]
MaxStagesY=GetSysConfig().PadLightsOnTitle and GAMESTATE:GetCoinMode()~=COIN_MODE_HOME and Metrics.Title.MaxStagesXY[2] or SCREEN_CENTER_Y+64
MaxStagesOnCommand=horizalign,center;diffuse,1,1,1,1;shadowlength,0;playcommand,SetText
MaxStagesSetTextCommand=%function(s) s:settext(TitleMenuStageText()) end
MaxStagesText=stage
LifeDifficultyX=Metrics.Title.LifeDiffXY[1]
LifeDifficultyY=Metrics.Title.LifeDiffXY[2]
LifeDifficultyOnCommand=visible,Bool[false]
#zoom,0.75;horizalign,left;diffuse,1,1,1,0;shadowlength,0;playcommand,SetText;visible,Bool[not not GetSysConfig().VerboseTitleMenu]
LifeDifficultySetTextCommand=%function(s) s:settext(GetSerialNumber and GetSerialNumber() or "") end

VersionSelectDownMessageCommand=stoptweening;playcommand,Show
VersionShowCommand=decelerate,0.3;diffusealpha,1
VersionHideCommand=decelerate,0.3;diffusealpha,0
VersionSelectUpMessageCommand=stoptweening;playcommand,Hide
SongsSelectDownMessageCommand=stoptweening;playcommand,Show
SongsShowCommand=decelerate,0.3;diffusealpha,1
SongsHideCommand=decelerate,0.3;diffusealpha,0
SongsSelectUpMessageCommand=stoptweening;playcommand,Hide
LifeDifficultySelectDownMessageCommand=stoptweening;playcommand,Show
LifeDifficultyShowCommand=decelerate,0.3;diffusealpha,1
LifeDifficultyHideCommand=decelerate,0.3;diffusealpha,0
LifeDifficultySelectUpMessageCommand=stoptweening;playcommand,Hide

#LogoP1SelectPressInputMessageCommand=%function() Broadcast("SelectDown") PlaySound("SelectMusic select down",true) end
#LogoP1SelectLiftInputMessageCommand=%function() Broadcast("SelectUp") end
#LogoP2SelectPressInputMessageCommand=%function() Broadcast("SelectDown") PlaySound("SelectMusic select down",true) end
#LogoP2SelectLiftInputMessageCommand=%function() Broadcast("SelectUp") end

[------Net Screens------]
[NetworkOptions]
Class=ScreenNetworkOptions
Fallback=ServiceMenuContents

[SMOnlineLogin]
Class=ScreenSMOnlineLogin
Fallback=Options
PrevScreen=@Branch.Title()
NextScreen=@Branch.NetRoom()
TimerSeconds=-1
ShowExitRow=@Bool[false]

#Hack to force condensed rows.
ItemsStartX=2
ItemsEndX=1
OptionMenuFlags=smnavigation

[NetSelectBase]
Class=ScreenNetSelectBase
Fallback=SelectMusic
TimerSeconds=-1
#Check if we've been booted from the server.
RoomWheelSystemMessageNoAnimateMessageCommand=queuecommand,CheckNetwork
RoomWheelSystemMessageMessageCommand=queuecommand,CheckNetwork
RoomWheelCheckNetworkCommand=%function(s) if not IsNetwork() then SetScreen(Branch.Title()) end end
ChatInputBoxWidth=Metrics.NetBase.Chat.Input.Box.Size[1]
ChatInputBoxHeight=Metrics.NetBase.Chat.Input.Box.Size[2]
ChatInputBoxX=Metrics.NetBase.Chat.Input.Box.XY[1]
ChatInputBoxY=Metrics.NetBase.Chat.Input.Box.XY[2]
ChatInputBoxOnCommand=%Tweens.NetBase.Chat.Input.Box.On
ChatInputBoxOffCommand=%Tweens.NetBase.Chat.Input.Box.On
ChatOutputBoxWidth=Metrics.NetBase.Chat.Output.Box.Size[1]
ChatOutputBoxHeight=Metrics.NetBase.Chat.Output.Box.Size[2]
ChatOutputBoxX=Metrics.NetBase.Chat.Output.Box.XY[1]
ChatOutputBoxY=Metrics.NetBase.Chat.Output.Box.XY[2]
ChatOutputBoxOnCommand=%Tweens.NetBase.Chat.Output.Box.On
ChatOutputBoxOffCommand=%Tweens.NetBase.Chat.Output.Box.Off
ChatTextInputWidth=Metrics.NetBase.Chat.Input.Text.Width
ChatInputX=Metrics.NetBase.Chat.Input.Text.XY[1]
ChatInputY=Metrics.NetBase.Chat.Input.Text.XY[2]
ChatInputOnCommand=%Tweens.NetBase.Chat.Input.Text.On
ChatInputOffCommand=%Tweens.NetBase.Chat.Input.Text.Off
ChatTextOutputWidth=@Metrics.NetBase.Chat.Output.Text.Width
ChatOutputLines=@Metrics.NetBase.Chat.Output.Text.Lines
ChatOutputX=Metrics.NetBase.Chat.Output.Text.XY[1]
ChatOutputY=Metrics.NetBase.Chat.Output.Text.XY[2]
ChatOutputOnCommand=%Tweens.NetBase.Chat.Output.Text.On
ChatOutputOffCommand=%Tweens.NetBase.Chat.Output.Text.Off
UsersBGX=Metrics.NetBase.Players.Box.XY[1]
UsersBGY=Metrics.NetBase.Players.Box.XY[2]
UsersBGOnCommand=%Tweens.NetBase.Players.Box.On
UsersBGColor=@join(",",NetPlayerBoxColor)
UsersBGWidth=Metrics.NetBase.Players.Box.Size[1]
UsersBGHeight=Metrics.NetBase.Players.Box.Size[2]
UsersBGOffCommand=%Tweens.NetBase.Players.Box.Off
UsersX=Metrics.NetBase.Players.Text.StartX
UsersDX=Metrics.NetBase.Players.Text.SpacingX
UsersY=Metrics.NetBase.Players.Text.TopY
UsersAY=Metrics.NetBase.Players.Text.BottomY
#On only gets evaluated for new text objects added, not to existing ones.
UsersOnCommand=%Tweens.NetBase.Players.Text.On
#Off is only used on screen tween out.
UsersOffCommand=%Tweens.NetBase.Players.Text.Off
#gets evaluated on each player list update per list change.
Users0Color=@join(",",NetPlayerStatusColors.Inactive)
Users1Color=@join(",",NetPlayerStatusColors.Inactiveundefined)
Users2Color=@join(",",NetPlayerStatusColors.NetScreen)
Users3Color=@join(",",NetPlayerStatusColors.Options)
Users4Color=@join(",",NetPlayerStatusColors.Evaluation)

[NetRoom]
Fallback=NetSelectBase
Class=ScreenNetRoom
PrevScreen=@Branch.Title()
MusicSelectScreen=@Branch.SelectMusic()
FirstUpdateCommand=Screens.Common.FirstUpdate(self) local s=self s:GetChild("TitleBG"):z(-1) s:SetDrawByZPosition(true)
TitleBGWidth=Metrics.NetRoom.TitleBG.Size[1]
TitleBGHeight=Metrics.NetRoom.TitleBG.Size[2]
TitleBGX=Metrics.NetRoom.TitleBG.XY[1]
TitleBGY=Metrics.NetRoom.TitleBG.XY[2]
TitleBGOnCommand=%Tweens.NetRoom.TitleBG.On
TitleBGOffCommand=%Tweens.NetRoom.TitleBG.Off
# "Title" width re-uses TitleBGWidth
TitleX=Metrics.NetRoom.Title.XY[1]
TitleY=Metrics.NetRoom.Title.XY[2]
TitleOnCommand=%Tweens.NetRoom.Title.On
TitleOffCommand=%Tweens.NetRoom.Title.Off
RoomWheelX=Metrics.NetRoom.RoomWheel.XY[1]
RoomWheelY=Metrics.NetRoom.RoomWheel.XY[2]
RoomWheelOnCommand=%Tweens.NetRoom.RoomWheelOn
OpenRoomColor=@join(",",NetRoomColors.Open)
PasswdRoomColor=@join(",",NetRoomColors.Password)
InGameRoomColor=@join(",",NetRoomColors.Busy)

[NetSelectMusicSilent]
Fallback=NetSelectMusic

[NetSelectMusic]
Fallback=NetSelectBase
Class=ScreenNetSelectMusic
#NOTE: No PaneDisplay nor pretty much anything here!!
#oITG can grab radar values (but not high scores)
PrevScreen=@IsNetSMOnline() and Branch.NetRoom() or Branch.SelectMusicBack()
NextScreen=@Branch.Stage()
RoomSelectScreen=@Branch.NetRoom()
NoSongsScreen=@Branch.SelectMusicBack()
MeterP1CurrentStepsP1ChangedMessageCommand=queuecommand,ChangeP1
MeterP1ChangeP1Command=%function(s) Screens.SelectMusic.NetDifficultyChanged(s,1) end
MeterP2CurrentStepsP2ChangedMessageCommand=queuecommand,ChangeP2
MeterP2ChangeP2Command=%function(s) Screens.SelectMusic.NetDifficultyChanged(s,2) end
DiffBGCurrentStepsP1ChangedMessageCommand=%function(s) Screens.SelectMusic.StepsChanged(1) end
DiffBGCurrentStepsP2ChangedMessageCommand=%function(s) Screens.SelectMusic.StepsChanged(2) end
DiffBGCurrentSongChangedMessageCommand=%function(s) Screens.SelectMusic.SongChanged() end
FirstUpdateCommand=Screens.Common.FirstUpdate(self) self:GetChild("DiffBG"):z(-1) self:SetDrawByZPosition(true)
DiffBGWidth=Metrics.NetSelectMusic.DiffBG.Size[1]
DiffBGHeight=Metrics.NetSelectMusic.DiffBG.Size[2]
DiffBGX=Metrics.NetSelectMusic.DiffBG.XY[1]
DiffBGY=Metrics.NetSelectMusic.DiffBG.XY[2]
DiffBGOnCommand=%Tweens.NetSelectMusic.DiffBG.On
DiffBGOffCommand=%Tweens.NetSelectMusic.DiffBG.Off
#DifficultyIconP1X=Metrics.NetSelectMusic.DifficultyIconX[1]
#DifficultyIconP1Y=Metrics.NetSelectMusic.DifficultyIconY
#DifficultyIconP1OnCommand=visible,Bool[false]
#MeterP1X=Metrics.NetSelectMusic.MeterX[1]
#MeterP1Y=Metrics.NetSelectMusic.MeterY
MeterP1OnCommand=aux,GAMESTATE:GetPreferredDifficulty(pNum[1]);visible,Bool[false]
#DifficultyIconP2X=Metrics.NetSelectMusic.DifficultyIconX[2]
#DifficultyIconP2Y=Metrics.NetSelectMusic.DifficultyIconY
#DifficultyIconP2OnCommand=visible,Bool[false]
#MeterP2X=Metrics.NetSelectMusic.MeterX[2]
#MeterP2Y=Metrics.NetSelectMusic.MeterY
MeterP2OnCommand=aux,GAMESTATE:GetPreferredDifficulty(pNum[2]);visible,Bool[false]
MusicWheelX=Metrics.NetSelectMusic.MusicWheelXY[1]
MusicWheelY=Metrics.NetSelectMusic.MusicWheelXY[2]
BPMDisplayX=Metrics.NetSelectMusic.BPMDisplayXY[1]
BPMDisplayY=Metrics.NetSelectMusic.BPMDisplayXY[2]
BPMDisplayOnCommand=%Tweens.NetSelectMusic.BPMDisplay.On
#OptionIconsP1X=Metrics.NetSelectMusic.OptionIconsX[1]
#OptionIconsP1Y=Metrics.NetSelectMusic.OptionIconsY
#OptionIconsP1OnCommand=visible,Bool[false]
#OptionIconsP2X=Metrics.NetSelectMusic.OptionIconsX[2]
#OptionIconsP2Y=Metrics.NetSelectMusic.OptionIconsY
#OptionIconsP2OnCommand=visible,Bool[false]

[--]
[RoomWheel]
# Used by NetRoom
CreateRoomColor=@join(",",NetRoomColors.New)
Fallback=MusicWheel
RoomWheelItemStartOnCommand=ztestmode,writeonfail
RoomWheelItemFinishOnCommand=
ItemSpacingY=@GetScreen():GetChild("DiffBG") and Metrics.MusicWheel.SpacingY or Metrics.NetRoom.RoomWheel.SpacingY
NumWheelItems=@GetScreen():GetChild("DiffBG") and Metrics.MusicWheel.NumItems or Metrics.NetRoom.RoomWheel.NumItems

[RoomWheelItem]
Fallback=WheelItemBase
TextX=Metrics.NetRoom.RoomWheelItem.Text.XY[1]
TextY=Metrics.NetRoom.RoomWheelItem.Text.XY[2]
TextWidth=Metrics.NetRoom.RoomWheelItem.Text.Width
TextOnCommand=%Tweens.NetRoom.RoomWheelItem.TextOn
DescX=Metrics.NetRoom.RoomWheelItem.Desc.XY[1]
DescY=Metrics.NetRoom.RoomWheelItem.Desc.XY[2]
DescWidth=Metrics.NetRoom.RoomWheelItem.Desc.Width
DescOnCommand=%Tweens.NetRoom.RoomWheelItem.DescOn

[--]
[ScreenEvaluation]
MaxComboNumDigits=5
[ScreenNetEvaluation]
UsersBGWidth=Metrics.Evaluation.PlayerListBG.Size[1]
UsersBGHeight=Metrics.Evaluation.PlayerListBG.Size[2]
UsersBGColor=@Metrics.Evaluation.PlayerListBG.Color
UserDX=@Metrics.Evaluation.PlayerListLines.SpacingX
UserDY=@Metrics.Evaluation.PlayerListLines.SpacingY
UsersBG1X=@Metrics.Evaluation.PlayerListBG.X[1]
UsersBG1Y=@Metrics.Evaluation.PlayerListBG.Y
UsersBG2X=@Metrics.Evaluation.PlayerListBG.X[2]
UsersBG2Y=@Metrics.Evaluation.PlayerListBG.Y
User1X=@Metrics.Evaluation.PlayerListLines.TopX[1]
User1Y=@Metrics.Evaluation.PlayerListLines.TopY
User2X=@Metrics.Evaluation.PlayerListLines.TopX[2]
User2Y=@Metrics.Evaluation.PlayerListLines.TopY

[NetEvaluation]
Class=ScreenNetEvaluation
Fallback=EvaluationStage
#this screen assumes grade and DDR score are shown
ShowGradeArea=@Bool[true]
ShowScoreArea=@Bool[true]
ScoreLabelOnCommand=visible,Bool[false]
ScoreNumberP1OnCommand=visible,Bool[false]
ScoreNumberP2OnCommand=visible,Bool[false]
UsersBGOnCommand=%Tweens.Evaluation.PlayerListBG.On
UsersBGOffCommand=%Tweens.Evaluation.PlayerListBG.Off
UserOnCommand=%Tweens.Evaluation.PlayerListLines.On
UserSelCommand=%Tweens.Evaluation.PlayerListLines.Highlight
UserDeSelCommand=%Tweens.Evaluation.PlayerListLines.Unhighlight
UserOffCommand=%Tweens.Evaluation.PlayerListLines.Off

[------Game Screens------]
[Caution]
Class=ScreenSplash
Fallback=CommonBlankNoBG
NextScreen=@Branch.CautionNext()
PrevScreen=@Branch.CautionBack()
AllowStartToSkip=@Bool[false]
MinimumLoadDelaySeconds=4
PrepareScreen=@Bool[true]
PlayMusic=@Bool[not not GetSysConfig().MenuMusic]

#[StartGame000]
[StartGame]
Class=ScreenBranch
Fallback=Screen
Choices=0,1,2
Condition0=GetNumPlayersEnabled()==0
NextScreen0="screen,"..Branch.FirstAttract()
Condition1=GetPref("MonkeyInput")
NextScreen1=screen,StartGame0
Condition2=@Bool[true]
#NextScreen2=screen,StartGame1
NextScreen2=screen,StartGame2

[StartGame0]
#Just here to help monkey input find every crash.
#lets monkey input go into each course screen easily (normally, it's only through the mods menu)
#Delete this and rename ScreenStartGame1 back when done.
Fallback=InputHandler
PrevScreen=@Branch.FirstAttract()
WrapCursor=0
AllowRepeatingInput=0
ChoiceNames=dance,marathon,survival
Choicedance=playmode,regular;screen,StartGame1
Choicemarathon=playmode,nonstop;screen,StartGame1
Choicesurvival=playmode,oni;mod,lifetime;screen,StartGame1

[StartGame1]
Class=ScreenSplash
Fallback=CommonBlankNoBG
NextScreen=@SM_VERSION>=5 and Branch.StartGame() or "StartGame2"
PrevScreen=
AllowStartToSkip=@Bool[false]
MinimumLoadDelaySeconds=0
PrepareScreen=@Bool[false]
TimerSeconds=0.1
ForceTimer=@Bool[true]

[StartGame2]
# Set up simple mode (one folder only, sort by easy meter)
Class=ScreenBranch
Fallback=Screen
Choices=1,2
Condition1=not (GetSysConfig().StartOnFullMode or IsAnyPlayerUsingProfile() or IsNetwork())
NextScreen1=@"songgroup,"..GetSysConfig().DefaultFolder..";sort,Preferred;screen,StartGame3"
Condition2=@Bool[true]
NextScreen2=songgroup,--ALL MUSIC--;sort,Group;screen,StartGame3

[StartGame3]
Fallback=Redirect
NextScreen1=@"screen,"..Branch.StartGame()

[aScreenStartGame3]
Class=ScreenSplash
Fallback=CommonBlankNoBG
NextScreen=@Branch.StartGame()
PrevScreen=@Branch.Title()
AllowStartToSkip=@Bool[false]
MinimumLoadDelaySeconds=0
PrepareScreen=@Bool[false]
TimerSeconds=0.1
ForceTimer=@Bool[true]

[JoinBothPlayers]
Fallback=SetTime
#Packages

[UnjoinPlayers]
Class=ScreenEz2SelectPlayer
Fallback=CommonBlankNoBG
StyleIcon=@Bool[false]
ShowStage=@Bool[false]
MemoryCardIcons=@Bool[false]

[ScreenEz2SelectPlayer]
JoinFrameP1X=
JoinFrameP1Y=
JoinFrameP2X=
JoinFrameP2Y=
JoinMessageP1X=
JoinMessageP1Y=
JoinMessageP2X=
JoinMessageP2Y=
PrevScreen=
NextScreen=
BounceJoinMessage=@Bool[false]
SilentWait=
FoldOnJoin=@Bool[false]

[PlayerEntryNewNoFadeIn]
Fallback=PlayerEntry

[PlayerEntryNew]
Fallback=PlayerEntry
Class=ScreenSelectMaster
# clearing the tween queue works round an infinite loop bug when joining the second side
HelpSideJoinedP1MessageCommand=%function(s) GetScreen():finishtweening() SetScreen("PlayerEntryNew") end
HelpSideJoinedP2MessageCommand=%function(s) GetScreen():finishtweening() SetScreen("PlayerEntryNew") end
NextScreen=StartGame

CodeNames=
#Unjoin
CodeUnjoin=Select
CodeUnjoinAction=lua,function() UnjoinPlayers(true) SetScreen("PlayerEntryNewNoFadeIn") end

[PlayerEntry]
Class=ScreenSelectMaster
Fallback=SelectMaster
# plug a bug where with neither side joined, the menu timer reaches 0 and doesn't do anything. Go back to attract if the timer runs out instead.
HelpMenuTimerMessageCommand=%function(s) if GetNumPlayersEnabled()==0 then SetScreen(Branch.FirstAttract()) end end
ScreenInitCommand=%function(s) Screens.Common.Init(s) SetEnv("StyleChoice",false) Screens.PlayerEntry.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) SetEnv("StyleChoice",false) Screens.PlayerEntry.Init(s) end
ScreenOnCommand=%Screens.PlayerEntry.On
HelpLuaCommand=%Screens.PlayerEntry.On
FirstUpdateCommand=Screens.Common.FirstUpdate(self) Screens.PlayerEntry.FirstUpdate(self)
ScreenFirstUpdateCommand=%Screens.PlayerEntry.FirstUpdate
PrevScreen=@Branch.PlayerEntryBack()
TimerSeconds=@MenuTimer.Seconds(Metrics.PlayerEntry.MenuTimer)
TimerStealth=@Bool[not (GetPref("MenuTimer") or GetSysConfig().Timer)]
# IdleTimeout* doesn't apply to pay mode. Here, only apply it to Home Mode with menu timer.
IdleTimeoutSeconds=@GAMESTATE:GetCoinMode()~=COIN_MODE_HOME and 0 or Metrics.PlayerEntry.MenuTimer
IdleTimeoutScreen=@Branch.Title()
AllowRepeatingInput=@Bool[false]
ChoiceNames=@GetNumPlayersEnabled()==0 and "dummy" or MenuNames(PlayerEntryChoices[CurGame][GetNumPlayersEnabled()])
Choicedummy=
Choices=@MenuEntries()
# which default gets picked?
DefaultChoice=s
#@PlayerEntryChoices[CurGame][GetNumPlayersEnabled()][1].Style
# does not reread ChoiceNames
UpdateOnMessage=CoinInserted
#,SideJoinedP1,SideJoinedP2
WrapCursor=@Bool[false]
OverrideLockInputSeconds=@Bool[false]
LockInputSeconds=0
OverrideSleepAfterTweenOffSeconds=@Bool[false]
SleepAfterTweenOffSeconds=0
# TODO: Broken in SM5
OptionOrderUp=
OptionOrderDown=
OptionOrderLeft=
#@OptionOrder(PlayerEntryChoices[CurGame][GetNumPlayersEnabled()],-1)
OptionOrderRight=
#@OptionOrder(PlayerEntryChoices[CurGame][GetNumPlayersEnabled()],1)
OptionOrderAuto=
#@OptionOrder(PlayerEntryChoices[CurGame][GetNumPlayersEnabled()],1)
# Needed for single/double selector to work:
NumIconParts=@GAMESTATE:GetNumSidesJoined()>0 and 1 or 0
NumCursorParts=0
NumPreviewParts=0
ShowScroller=@Bool[false]
WrapScroller=@Bool[false]
SharedPreviewAndCursor=@Bool[true]
PreSwitchPageSeconds=0
PostSwitchPageSeconds=0
DisabledColor=.5,.5,.5,0
# Shut stepmania up
IconPart1ChoicesX=
IconPart1ChoicesY=
IconPart1ChoicesOnCommand=
IconPart1ChoicesOffCommand=
IconPart1ChoicesOffFocusedCommand=
IconPart1ChoicesOffUnfocusedCommand=

[ProfileLoad]
#SM5 screen.
Class=ScreenProfileLoad
Fallback=CommonBlankNoBG
ScreenOnCommand=%function(s) s:Continue() LoadProfile() end
NextScreen=@Branch.AfterLoadProfiles()
LoadEdits=@Bool[false]

[------------------------------------------------------------------]
[EnterCourseModeIntermediate]
Class=ScreenSplash
Fallback=CommonBlank
NextScreen=@Branch.EnterCourseModeIntermediate()
PrevScreen=@Branch.EnterCourseModeIntermediate()
AllowStartToSkip=@Bool[false]
MinimumLoadDelaySeconds=0
PrepareScreen=@Bool[false]

[ScreenSelectMusic]
CustomSongWaitText=@Languages[CurLanguage()].ScreenSelectMusic.Customs.Loading
CustomSongCancelText=@Languages[CurLanguage()].ScreenSelectMusic.Customs.Cancel
Fallback=SelectMusic

[SelectMusicPracticeSilent]
PlayMusic=@Bool[false]
Fallback=SelectMusicPractice

[SelectMusicPractice]
Fallback=SelectMusic
OptionsMenuAvailable=@Bool[false]
NextScreen=EditPractice

[SelectMusicSilent]
Fallback=SelectMusic

[SelectMusic]

# r23 adds this; what is it??
NonPresenceP1X=
NonPresenceP1Y=
NonPresenceP1OnCommand=%function(s) DumpActor(s,"NonPresenceP1") end
NonPresenceP1OffCommand=
NonPresenceP2X=
NonPresenceP2Y=
NonPresenceP2OnCommand=%function(s) DumpActor(s,"NonPresenceP2") end
NonPresenceP2OffCommand=
NonPresenceP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
NonPresenceP2CaptureCommand=%Capture.ActorFrame.CaptureInternal

Class=ScreenSelectMusic
FOV=0
#FOV=120
FOVCenterX=SCREEN_CENTER_X
FOVCenterY=SCREEN_CENTER_Y
Fallback=Common
ScreenInitCommand=%function(s) Screens.Common.Init(s) Screens.SelectMusic.Init(s) s:effectclock("music") end
InitCommand=%function(s) Screens.Common.Init(s) Screens.SelectMusic.Init(s) s:effectclock("music") end
ScreenOnCommand=%Screens.SelectMusic.On
HelpLuaCommand=%Screens.SelectMusic.On
HelpFirstUpdateCommand=%Screens.SelectMusic.FirstUpdate
HelpAlarmMessageCommand=%Screens.SelectMusic.Alarm
ScreenFirstUpdateCommand=%Screens.SelectMusic.FirstUpdate
ScreenModsCommand=%Screens.SelectMusic.On
# SSM crashes from nonexistent stage objects when ShowStage is false
ShowStage=@Bool[true]
AlignMusicBeat=@Bool[true]
StopMusicOnBack=@Bool[true]
TimerSeconds=MenuTimer.Seconds(Metrics.SelectMusic.MenuTimer)
SampleMusicDelay=Metrics.SelectMusic.SampleDelay
PrevScreen=@Branch.SelectMusicBack()
NextScreen=@Branch.SelectMusicNext()
NextOptionsScreen=@Branch.SelectMusicModsPlayer()
DoRouletteOnMenuTimer=@Bool[false] 
Codes=CodeMod Codes
UnderlayOnCommand=x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y

# jab Select to move through the chart info pages. (use an unused object to track state)
DifficultyIconP1P1SelectPressInputMessageCommand=aux,0
DifficultyIconP1P1StartPressInputMessageCommand=aux,1
DifficultyIconP1P1MenuLeftPressInputMessageCommand=aux,1
DifficultyIconP1P1MenuRightPressInputMessageCommand=aux,1
#DifficultyIconP1P1SelectLiftInputMessageCommand=%function(s) if Player(1) and not IsCourseMode() and s:getaux()==0 and Env().FullMode then CustomDifficultyList.CycleDifficultyDisplay(1,1) end s:aux(0) end
DifficultyIconP2P2SelectPressInputMessageCommand=aux,0
DifficultyIconP2P2StartPressInputMessageCommand=aux,1
DifficultyIconP2P2MenuLeftPressInputMessageCommand=aux,1
DifficultyIconP2P2MenuRightPressInputMessageCommand=aux,1
#DifficultyIconP2P2SelectLiftInputMessageCommand=%function(s) if Player(2) and not IsCourseMode() and s:getaux()==0 and Env().FullMode then CustomDifficultyList.CycleDifficultyDisplay(2,1) end s:aux(0) end

MeterType=DifficultyMeter
OptionsMenuAvailable=@Bool[not not Env().FullMode]
ModeMenuAvailable=not not Env().FullMode
SelectMenuAvailable=@Bool[true]
#too much work for a really bad UI (IMO)
UseOptionsList=@Bool[false]
#UseOptionsList=@Bool[not not GetSysConfig().UseOptionsList]
HelpText=@join("\n",Languages[CurLanguage()].ScreenSelectMusic[Env().FullMode and "HelpTips" or "HelpTipsSimple"])
HelpSelectMenuOnMessageCommand=stopeffect;stoptweening;linear,0.15;diffusealpha,0
HelpSelectMenuOffMessageCommand=stopeffect;stoptweening;linear,0.15;diffusealpha,1;luaeffect,Update
ShowOptionsMessageSeconds=@Metrics.SelectMusic.OptionsMenuPromptTime
HelpChangedCommand=%Screens.SelectMusic.InputEvent
HelpSongChosenMessageCommand=%Screens.SelectMusic.SongChosen
TweenOptionsMessageOffImmediately=@(function() Screens.SelectMusic.EnterModsMenu() return Bool[false] end)()
WaitForChildrenBeforeTweeningOut=@Bool[true]
#NotITG: what are the values? I guess it works the same as sm4/sm5 (PIU Pro onwards)
PreviewMusicMode=0
# Show on the opposite side of the screen to the player's pane, in the unused area (1-player only)
ShowRadar=@Bool[not not (not IsCourseMode() and GetNumPlayersEnabled()==1 and GetSysConfig().ShowGrooveRadar and GetSysConfig().SelectMusicExtraInfo)]
RadarX=Metrics.SelectMusic.GrooveRadarX[MasterPlayer()]
RadarY=Metrics.SelectMusic.GrooveRadarY
# diffuse only applies to the base and labels sprites. it doesn't seem to affect the pentilateral at all.
# children: [1].self = value map container, [1].children[1] = base sprite, [2]-[6] = each label
RadarOnCommand=aux,MasterPlayer();finishtweening;queuecommand,FinishOn;draworder,3) Tweens.SelectMusic.ExtraPane.On(self
# SetUpdateRate() doesn't work on the pentilateral directly for whatever reason, despite it being an ActorFrame
RadarFinishOnCommand=%function(s) s:SetUpdateRate(5) s:hurrytweening(5) end
# Overrides for the hardcoded tweens when entering/leaving the sort menu

RadarLeaveSortMenuMessageCommand=%function(s) local penta=Capture.ActorFrame.GetChildren(s).children[1].self penta:finishtweening() penta:zoom(0) penta:decelerate(.15) penta:zoom(1) s:queuecommand("AfterTweenIn") end
#RadarTweenInCommand=%function(s) local penta=Capture.ActorFrame.GetChildren(s).children[1].self penta:finishtweening() penta:zoom(0) penta:decelerate(.15) penta:zoom(1) s:queuecommand("AfterTweenIn") end
RadarAfterTweenInCommand=%function(s) s:SetUpdateRate(5) end
RadarEnterSortMenuMessageCommand=%function(s) s:SetUpdateRate(1) local penta=Capture.ActorFrame.GetChildren(s).children[1].self penta:stoptweening() penta:accelerate(.15) penta:zoom(0) end
#RadarTweenOutCommand=%function(s) s:SetUpdateRate(1) local penta=Capture.ActorFrame.GetChildren(s).children[1].self penta:stoptweening() penta:accelerate(.15) penta:zoom(0) end
RadarOffCommand=%function(s) Capture.ActorFrame.GetChildren(s).children[1].self:stoptweening() s:SetUpdateRate(1) Tweens.SelectMusic.ExtraPane.Off(s) end

# lol; very broken groove graph. use the debug menu to get it
ShowGraph=@Bool[not not (not IsCourseMode() and GetNumPlayersEnabled()==1 and GetSysConfig().ShowGrooveGraph)]
GraphX=@Player(1) and SCREEN_CENTER_X+288 or Player(2) and SCREEN_CENTER_X-288
GraphY=@SCREEN_CENTER_Y+160
GraphOnCommand=%function(s)s:ztestmode("writeonpass")s:draworder(3)local rc=Capture.ActorFrame.GetChildren(s).children rc[1]:visible(0) for i=2,table.getn(rc)do local c=rc[i] c:additiveblend(1)c:effectclock("beat")c:spin()c:effectmagnitude(0,-90,0)end end
#GraphOnCommand=%function(s)s:ztestmode("writeonfail")s:draworder(3)local rc=Capture.ActorFrame.GetChildren(s).children for i=2,6 do rc[i]:effectmagnitude(0,-90,0)rc[i]:spin()end end
#GraphCurrentSongChangedMessageCommand=%function(s) local rc=Capture.ActorFrame.GetChildren(s).children for i=2,6 do rc[i]:stoptweening() rc[i]:linear(0.04) rc[i]:zoom(0) end if CurSong() then for i,l in next,GetStepsList(),nil do local d=l:GetDifficulty()+2 if rc[d] then rc[d]:stoptweening() rc[d]:linear(0.04) rc[d]:zoom(1) end end end end
GraphInputEventMessageCommand=
#propagate,1;stoptweening;rotationy,90;linear,0.15;rotationy,180;propagate,0
GraphOffCommand=propagate,0
#cd titles why not
CDTitleX=SCREEN_CENTER_X+144
CDTitleY=SCREEN_CENTER_Y-88
CDTitleOnCommand=visible,Bool[not not GetSysConfig().ShowCDTitle];draworder,2;rotationx,5.625;pitch,5.625;effectclock,beat
;scaletoclipped,128,36
CDTitleFrontCommand=spin;effectmagnitude,0,180,0;cullmode,back
CDTitleBackCommand=spin;effectmagnitude,0,180,0;cullmode,front;diffuse,0,0,0,.75;glow,.75,.75,.75,.75
CDTitleOffCommand=
#Do not touch these three or the theme will break:
ShowPanes=@Bool[true]
ShowDifficultyList=@Bool[true]
ShowCourseContents=@Bool[IsCourseMode()]
#CodeMod hooks. If they're hidden, then the codemod hooks don't run. use zoom(0), diffusealpha(0) or something instead
OptionIconsP1X=
OptionIconsP1Y=
OptionIconsP1OnCommand=%function(s) s:aux(1) Capture.ModsIconRow.On(s) s:zoom(GetSysConfig().ShowModsIcons and 1 or 0) end
OptionIconsP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
OptionIconsP1PollCommand=%Capture.ModsIconRow.Poll
OptionIconsP1OffCommand=%Capture.ModsIconRow.Off
OptionIconsP2X=
OptionIconsP2Y=
OptionIconsP2OnCommand=%function(s) s:aux(2) Capture.ModsIconRow.On(s) s:zoom(GetSysConfig().ShowModsIcons and 1 or 0) end
OptionIconsP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
OptionIconsP2PollCommand=%Capture.ModsIconRow.Poll
OptionIconsP2OffCommand=%Capture.ModsIconRow.Off
BalloonX=
BalloonY=
BalloonOnCommand=%function(s) Balloons=Balloons or {} table.insert(Balloons,s) s:aux(table.getn(Balloons)+1) s:visible(Bool[not not GetSysConfig().ShowBalloons]) end
BalloonCurrentSongChangedMessageCommand=
BalloonShowCommand=
BalloonHideCommand=
BalloonOffCommand=%function() Balloons=nil end
#Course List Hooks
CourseContentsX=Metrics.SelectMusic.CourseContentsXY[1]
CourseContentsY=Metrics.SelectMusic.CourseContentsXY[2]
CourseContentsOnCommand=%function(s) CourseContentsList.On(s) Tweens.SelectMusic.CourseContents.On(s) end
CourseContentsOffCommand=%Tweens.SelectMusic.CourseContents.Off
CourseContentsShowCommand=%Tweens.SelectMusic.CourseContents.Show
CourseContentsHideCommand=%Tweens.SelectMusic.CourseContents.Hide
#Song changed hooks
DifficultyListX=
DifficultyListY=
DifficultyListOnCommand=playcommand,CaptureOn;visible,Bool[false]
DifficultyListOffCommand=playcommand,CaptureOff
DifficultyListCaptureOnCommand=%Capture.DifficultyList.On
DifficultyListCaptureOffCommand=%Capture.DifficultyList.Off
DifficultyListCaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyListShowCommand=
DifficultyListHideCommand=
CourseHasModsX=
CourseHasModsY=
CourseHasModsOnCommand=visible,Bool[not not GetSysConfig().ShowCourseHasMods]
#oITG sends "SongChosen", which is used to fade to black when showing the mods menu prompt text after hitting Start. Manually send it for plain 3.95 (which doesn't send this message).
CourseHasModsOffCommand=%function(s) if not OPENITG and SM_VERSION==3.95 then Broadcast("SongChosen") end end
CourseHasModsShowCommand=playcommand,Hide
CourseHasModsHideCommand=%Screens.SelectMusic.SongChanged
OverlayOnCommand=
OverlayOffCommand=
HeaderX=SCREEN_CENTER_X
HeaderY=SCREEN_CENTER_Y
HeaderOnCommand=
HeaderOffCommand=
BannerX=Metrics.SelectMusic.BannerXY[1]
BannerY=Metrics.SelectMusic.BannerXY[2]
BannerOnCommand=draworder,2
BannerOffCommand=%Tweens.SelectMusic.Banner.Off
BannerWidth=Metrics.SelectMusic.BannerSize[1]
BannerHeight=Metrics.SelectMusic.BannerSize[2]
BannerFrameX=Metrics.SelectMusic.BannerFrameXY[1]
BannerFrameY=Metrics.SelectMusic.BannerFrameXY[2]
BannerFrameOnCommand=%function(s) s:diffuse(unpack(UIColor("SelectMusicSongInfoBar")))Tweens.SelectMusic.BannerFrame.On(s) end
BannerFrameOffCommand=%Tweens.SelectMusic.BannerFrame.Off
StageX=Metrics.SelectMusic.StageXY[1]
StageY=Metrics.SelectMusic.StageXY[2]
StageOnCommand=%function(s) s:visible(Bool[not GetSysConfig().Timer]) Tweens.SelectMusic.Stage.On(s) s:settext(StageText()) end
StageStepsChangedP1MessageCommand=%function(s) if IsCourseMode() then s:settext(tostring(Env().CourseLengthSongs).." stages") end end
StageStepsChangedP2MessageCommand=%function(s) if IsCourseMode() then s:settext(tostring(Env().CourseLengthSongs).." stages") end end
StageOffCommand=%Tweens.SelectMusic.Stage.Off
#SongOptionsX=@Metrics.SelectMusic.SongOptionsXY[1]
#SongOptionsY=@Metrics.SelectMusic.SongOptionsXY[2]
#SongOptionsOnCommand=%function(s) Tweens.SelectMusic.SongOptions.On(s) Screens.SelectMusic.SongOptionsText(s) end
#SongOptionsOffCommand=%Tweens.SelectMusic.SongOptions.Off
#SongOptionsExtraCommand=
SongOptionsX=Metrics.System.HelpTextXY[1]
SongOptionsY=Metrics.System.HelpTextXY[2]
SongOptionsOnCommand=hidden,Bool[true]
SongOptionsOffCommand=
SongOptionsExtraCommand=
BPMDisplayX=Metrics.SelectMusic.BPMDisplayXY[1]
BPMDisplayY=Metrics.SelectMusic.BPMDisplayXY[2]
BPMDisplayOnCommand=%Tweens.SelectMusic.BPMDisplay.On
BPMDisplayOffCommand=%Tweens.SelectMusic.BPMDisplay.Off
# Artist display is only used to determine song count in a course
ArtistDisplayX=Metrics.SelectMusic.ArtistXY[1]
ArtistDisplayY=Metrics.SelectMusic.ArtistXY[2]
ArtistDisplayOnCommand=%Tweens.SelectMusic.Artist.On
ArtistDisplayTipOnCommand=
ArtistDisplayTipShowTime=	
ArtistDisplayOffCommand=%Tweens.SelectMusic.Artist.Off
ArtistDisplaySelectMenuOnMessageCommand=stoptweening;decelerate,0.3;diffusealpha,0
ArtistDisplaySelectMenuOffMessageCommand=stoptweening;decelerate,0.3;diffusealpha,1
MachineRankSelectMenuOnMessageCommand=stoptweening;decelerate,0.3;diffusealpha,1
MachineRankSelectMenuOffMessageCommand=stoptweening;decelerate,0.3;diffusealpha,0
# Reused to show artist/folder name:
MachineRankX=Metrics.SelectMusic.ArtistXY[1]
MachineRankY=Metrics.SelectMusic.ArtistXY[2]
MachineRankOnCommand=%function(s) Tweens.SelectMusic.Artist.On(s) s:diffusealpha(0) end
MachineRankOffCommand=%Tweens.SelectMusic.Artist.Off
TotalTimeX=Metrics.SelectMusic.TotalTimeXY[1]
TotalTimeY=Metrics.SelectMusic.TotalTimeXY[2]
TotalTimeOnCommand=%Tweens.SelectMusic.TotalTime.On
TotalTimeOffCommand=%Tweens.SelectMusic.TotalTime.Off
TotalTimeSongChangedMessageCommand=%Capture.SongTime
#TotalTimeSelectMenuOnMessageCommand=stoptweening;decelerate,0.3;diffusealpha,0
#TotalTimeSelectMenuOffMessageCommand=stoptweening;decelerate,0.3;diffusealpha,1
#NumSongsSelectMenuOnMessageCommand=stoptweening;decelerate,0.3;diffusealpha,1
#NumSongsSelectMenuOffMessageCommand=stoptweening;decelerate,0.3;diffusealpha,0
NumSongsX=Metrics.SelectMusic.TotalTimeXY[1]
NumSongsY=Metrics.SelectMusic.TotalTimeXY[2]
NumSongsOnCommand=visible,Bool[false]
#%function(s) Tweens.SelectMusic.TotalTime.On(s) s:diffusealpha(0) end
NumSongsOffCommand=
#%Tweens.SelectMusic.TotalTime.Off
NumSongsSongChangedMessageCommand=%Capture.NumSongs
#NumSongsSongChangedMessageCommand=%function(s) Capture.NumSongs(s) s:settext(s:GetText().." "..((tonumber(GetEnv("SongStages")) or 0)>1 and "stages" or "stage"))		 end

WheelUnderX=Metrics.SelectMusic.WheelMaskXY[1]
WheelUnderY=Metrics.SelectMusic.WheelMaskXY[2]
WheelUnderOnCommand=blend,noeffect;zwrite,1
WheelUnderOffCommand=
MusicWheelX=Metrics.SelectMusic.WheelXY[1]
MusicWheelY=Metrics.SelectMusic.WheelXY[2]
MusicWheelOnCommand=%function(s) Capture.MusicWheel.After(s) Tweens.SelectMusic.MusicWheel.On(s) end
MusicWheelUpdateCommand=%Capture.MusicWheel.Update
#crashes when backing out of a course to the songwheel: MusicWheelCurrentSongChangedMessageCommand=%Screens.SelectMusic.MoveWheel
MusicWheelSetAllMeterTextCommand=%Capture.MusicWheel.SetAllMeterText
MusicWheelOffCommand=%function(s) Capture.MusicWheel.Off(s) Tweens.SelectMusic.MusicWheel.Off(s) end
MusicWheelType=MusicWheel
#SM5:
MusicWheelChangeStepsMessageCommand=%function(s,p) Screens.SelectMusic.StepsChanged(pText[p.Player]) end
MusicWheelPreviousSongMessageCommand=%function(s) s:playcommand("SongChanged") end
MusicWheelNextSongMessageCommand=%function(s) s:playcommand("SongChanged") end
MusicWheelSongChangedCommand=%function(s) Screens.SelectMusic.SongChanged() ForeachPlayer(Screens.SelectMusic.StepsChanged) end
PaneDisplayP1X=Metrics.SelectMusic.PlayerPaneX[1]
PaneDisplayP1Y=Metrics.SelectMusic.PlayerPaneY
PaneDisplayP1OnCommand=%function(s) Capture.ActorFrame.ApplyPNToChildren(s,1) Capture.PaneObjects(s,1) Tweens.SelectMusic.PlayerPane.On(s,1) end
PaneDisplayP1EnterSortMenuMessageCommand=playcommand,LoseFocus
PaneDisplayP1LeaveSortMenuMessageCommand=playcommand,GainFocus
PaneDisplayP1OffCommand=%function(s) Tweens.SelectMusic.PlayerPane.Off(s,1) end
PaneDisplayP2X=Metrics.SelectMusic.PlayerPaneX[2]
PaneDisplayP2Y=Metrics.SelectMusic.PlayerPaneY
PaneDisplayP2OnCommand=%function(s) Capture.ActorFrame.ApplyPNToChildren(s,2) Capture.PaneObjects(s,2) Tweens.SelectMusic.PlayerPane.On(s,2) end
PaneDisplayP2EnterSortMenuMessageCommand=playcommand,LoseFocus
PaneDisplayP2LeaveSortMenuMessageCommand=playcommand,GainFocus
PaneDisplayP2OffCommand=%function(s) Tweens.SelectMusic.PlayerPane.Off(s,2) end

# Unused:
AutogenIconP1X=
AutogenIconP1Y=
AutogenIconP1OnCommand=visible,Bool[not not GetSysConfig().ShowAutogenIcon]
AutogenIconP1OffCommand=
AutogenIconP2X=
AutogenIconP2Y=
AutogenIconP2OnCommand=visible,Bool[not not GetSysConfig().ShowAutogenIcon]
AutogenIconP2OffCommand=
DifficultyIconP1X=
DifficultyIconP1Y=
DifficultyIconP1OnCommand=visible,Bool[false]
DifficultyIconP1OffCommand=
DifficultyIconP2X=
DifficultyIconP2Y=
DifficultyIconP2OnCommand=visible,Bool[false]
DifficultyIconP2OffCommand=
MeterFrameP1X=
MeterFrameP1Y=
MeterFrameP1OnCommand=visible,Bool[false]
MeterFrameP1OffCommand=
MeterFrameP2X=
MeterFrameP2Y=
MeterFrameP2OnCommand=visible,Bool[false]
MeterFrameP2OffCommand=
MeterP1X=
MeterP1Y=
MeterP1OnCommand=visible,Bool[false]
MeterP1OffCommand=
MeterP2X=
MeterP2Y=
MeterP2OnCommand=visible,Bool[false]
MeterP2OffCommand=
SortIconX=
SortIconY=
SortIconOnCommand=visible,Bool[not not GetSysConfig().ShowSortIcon]
SortIconOffCommand=
ScoreFrameP1X=
ScoreFrameP1Y=
ScoreFrameP1OnCommand=visible,Bool[false]
ScoreFrameP1SortChangeCommand=
ScoreFrameP1OffCommand=
ScoreFrameP2X=
ScoreFrameP2Y=
ScoreFrameP2OnCommand=visible,Bool[false]
ScoreFrameP2SortChangeCommand=
ScoreFrameP2OffCommand=
ScoreP1X=Player(1) and SCREEN_CENTER_X+288 or Player(2) and SCREEN_CENTER_X-288
ScoreP1Y=SCREEN_CENTER_Y+200
ScoreP1OnCommand=visible,Bool[false]
#not IsCourseMode() and GetNumPlayersEnabled()==1 and GetSysConfig().ShowDDRScore and true];shadowlength,0;zoom,.75
ScoreP1SortChangeCommand=
ScoreP1OffCommand=
ScoreP2X=Player(1) and SCREEN_CENTER_X+288 or Player(2) and SCREEN_CENTER_X-288
ScoreP2Y=SCREEN_CENTER_Y+200
ScoreP2OnCommand=visible,Bool[false]
#not IsCourseMode() and GetNumPlayersEnabled()==1 and GetSysConfig().ShowDDRScore and true];shadowlength,0;zoom,.75
ScoreP2SortChangeCommand=
ScoreP2OffCommand=
# char icons STILL get shown?! - Yes, due to a code oversight, both icons get loaded in FOREACH_PlayerNumber, then OnCommand gets fired in FOREACH_HumanPlayer
CharacterIconP1X=SCREEN_CENTER_X-276
CharacterIconP1Y=SCREEN_CENTER_Y-72
CharacterIconP1OnCommand=vertalign,bottom;horizalign,left;visible,Bool[not not GetSysConfig().ShowCharacterIcons]
CharacterIconP1OffCommand=
CharacterIconP2X=SCREEN_CENTER_X+276
CharacterIconP2Y=SCREEN_CENTER_Y-72
CharacterIconP2OnCommand=vertalign,bottom;horizalign,right;visible,Bool[not not GetSysConfig().ShowCharacterIcons]
CharacterIconP2OffCommand=
DifficultyFrameP1X=
DifficultyFrameP1Y=
DifficultyFrameP1OnCommand=visible,Bool[false]
DifficultyFrameP1OffCommand=
DifficultyFrameP2X=
DifficultyFrameP2Y=
DifficultyFrameP2OnCommand=visible,Bool[false]
DifficultyFrameP2OffCommand=
DifficultyDisplayX=
DifficultyDisplayY=
DifficultyDisplayOnCommand=visible,Bool[not not GetSysConfig().ShowDifficultyDisplay]) for pn=1,2 do local o="CharacterIconP"..pn if GetScreen():GetChild(o) and not Player(pn) then GetScreen():GetChild(o):visible(Bool[false]) end end self:finishtweening(
DifficultyDisplayOffCommand=
OptionsMessageX=
OptionsMessageY=
OptionsMessageOnCommand=visible,Bool[false]
OptionsMessageOffCommand=
CharacterIconP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
CharacterIconP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
WheelUnderCaptureCommand=%Capture.ActorFrame.CaptureInternal
MusicWheelCaptureCommand=%Capture.ActorFrame.CaptureInternal
OptionsListP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
OptionsListP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
BannerCaptureCommand=%Capture.ActorFrame.CaptureInternal
BannerFrameCaptureCommand=%Capture.ActorFrame.CaptureInternal
BPMDisplayCaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyDisplayCaptureCommand=%Capture.ActorFrame.CaptureInternal
CDTitleCaptureCommand=%Capture.ActorFrame.CaptureInternal
RadarCaptureCommand=%Capture.ActorFrame.CaptureInternal
GraphCaptureCommand=%Capture.ActorFrame.CaptureInternal
SongOptionsCaptureCommand=%Capture.ActorFrame.CaptureInternal
NumSongsCaptureCommand=%Capture.ActorFrame.CaptureInternal
TotalTimeCaptureCommand=%Capture.ActorFrame.CaptureInternal
ArtistDisplayCaptureCommand=%Capture.ActorFrame.CaptureInternal
MachineRankCaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyListCaptureCommand=%Capture.ActorFrame.CaptureInternal
CourseContentsCaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyFrameP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyFrameP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyIconP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyIconP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
AutogenIconP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
AutogenIconP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
OptionIconsP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
OptionIconsP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
MeterFrameP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
MeterFrameP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
PaneDisplayP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
PaneDisplayP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
MeterP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
MeterP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreFrameP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreFrameP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
SortIconCaptureCommand=%Capture.ActorFrame.CaptureInternal
BalloonCaptureCommand=%Capture.ActorFrame.CaptureInternal
CourseHasModsCaptureCommand=%Capture.ActorFrame.CaptureInternal
OptionsMessageCaptureCommand=%Capture.ActorFrame.CaptureInternal

OptionsListP1X=Metrics.SelectMusic.PaneDisplay.OptionsList.StartX[1]
OptionsListP1Y=Metrics.SelectMusic.PaneDisplay.OptionsList.StartY
OptionsListP2X=Metrics.SelectMusic.PaneDisplay.OptionsList.StartX[2]
OptionsListP2Y=Metrics.SelectMusic.PaneDisplay.OptionsList.StartY
OptionsListP1ResetCommand=%function(s) OptionsList.State.Reset(s,1) end
OptionsListP1TweenOnCommand=%OptionsList.State.Open
OptionsListP1TweenOffCommand=%OptionsList.State.Close
OptionsListP1OptionsListLeftP1MessageCommand=%OptionsList.Input.Left
OptionsListP1OptionsListRightP1MessageCommand=%OptionsList.Input.Right
OptionsListP1OptionsListQuickChangeLeftP1MessageCommand=%OptionsList.Input.QuickLeft
OptionsListP1OptionsListQuickChangeRightP1MessageCommand=%OptionsList.Input.QuickRight
OptionsListP1OptionsListPushP1MessageCommand=%OptionsList.State.AfterPush
OptionsListP1OptionsListPopP1MessageCommand=%OptionsList.State.AfterPop
OptionsListP1OptionsListStartP1MessageCommand=%OptionsList.Input.Start
OptionsListP2ResetCommand=%function(s) OptionsList.State.Reset(s,2) end
OptionsListP2TweenOnCommand=%OptionsList.State.Open
OptionsListP2TweenOffCommand=%OptionsList.State.Close
OptionsListP2OptionsListLeftP2MessageCommand=%OptionsList.Input.Left
OptionsListP2OptionsListRightP2MessageCommand=%OptionsList.Input.Right
OptionsListP2OptionsListQuickChangeLeftP2MessageCommand=%OptionsList.Input.QuickLeft
OptionsListP2OptionsListQuickChangeRightP2MessageCommand=%OptionsList.Input.QuickRight
OptionsListP2OptionsListPushP2MessageCommand=%OptionsList.State.AfterPush
OptionsListP2OptionsListPopP2MessageCommand=%OptionsList.State.AfterPop
OptionsListP2OptionsListStartP2MessageCommand=%OptionsList.Input.Start

[OptionsListP1]
Fallback=OptionsList
#LineTopMenu=@LoudReturn("list,OLTestTop","LineTopMenu")
LineTopMenu=lua,OptionsList.MenuDefinition.TopMenu(1)
OptionsListOptionsListTweenOnP1MessageCommand=%function(s) OptionsList.Actors.Row.Load(s,1) end

[OptionsListP2]
Fallback=OptionsList
#LineTopMenu=list,OLTestTop
LineTopMenu=lua,OptionsList.MenuDefinition.TopMenu(2)
OptionsListOptionsListTweenOnP2MessageCommand=%function(s) OptionsList.Actors.Row.Load(s,2) end

[OptionsList]

LineOLSub1=@LoudReturn("list,OLSub1","LineOLSub1")
LineOLSub2=@LoudReturn("list,OLSub2","LineOLSub1")
LineOLSub3=@LoudReturn("list,OLSub3","LineOLSub1")
LineOLSub4=@LoudReturn("list,OLSub4","LineOLSub1")

NumShownItems=@Metrics.SelectMusic.PaneDisplay.OptionsList.NumShownItems
ItemsSpacingY=@Metrics.SelectMusic.PaneDisplay.OptionsList.SpacingY
MaxItemsBeforeSplit=@Metrics.SelectMusic.PaneDisplay.OptionsList.SplitThreshold
ItemsSplitWidth=@Metrics.SelectMusic.PaneDisplay.OptionsList.SplitWidth
#TopMenu is the name of the menu which gets Push()ed when you open, TopMenus is the list of rows that gets loaded. Both must match.
TopMenu=TopMenu
TopMenus=TopMenu
DirectLines=
TextOnCommand=
UnderlineOnCommand=
UnderlineShowCommand=%OptionsList.Actors.Underline.Show
UnderlineHideCommand=%OptionsList.Actors.Underline.Hide
UnderlineSetTwoRowsCommand=%OptionsList.Actors.Underline.SetTwoRows
UnderlineSetOneRowCommand=%OptionsList.Actors.Underline.SetOneRow
CursorPositionOneRowCommand=%OptionsList.Actors.Cursor.PositionOneRow
CursorPositionTwoRowsCommand=%OptionsList.Actors.Cursor.PositionTwoRows
OptionsListTweenInForwardCommand=%OptionsList.Actors.Row.Tween.InForward
OptionsListTweenInBackwardCommand=%OptionsList.Actors.Row.Tween.InBackward
OptionsListTweenOutForwardCommand=%OptionsList.Actors.Row.Tween.OutForward
OptionsListTweenOutBackwardCommand=%OptionsList.Actors.Row.Tween.OutBackward
CursorCaptureCommand=%Capture.ActorFrame.CaptureInternal
UnderlineCaptureCommand=%Capture.ActorFrame.CaptureInternal
OptionsListCaptureCommand=%Capture.ActorFrame.CaptureInternal

[SelectMusicCourseSilent]
Fallback=SelectMusicCourse

[SelectMusicCourse]
#Alternate menu music.
Fallback=SelectMusic

[GameState]
#These get read on game boot. To override default song, just set a new song on SSM load.
UseNameBlacklist=@Bool[true]
DefaultSong=/Songs/In The Groove 2/Birdie/
DefaultSort=Group

[--]
[CodeMod Codes]
Dark=@CodeModList().dark.Code
Left=@CodeModList().left.Code
Right=@CodeModList().right.Code
Mines=@CodeModList().nomines.Code
HoldNotes=@CodeModList().noholds.Code
Mirror=@CodeModList().mirror.Code
Shuffle=@CodeModList().shuffle.Code
SuperShuffle=@CodeModList().supershuffle.Code
CancelAllPlayerOptions=
Fallback=CodeDetector

[CodeDetector]
#These only get refreshed on SSM load/exit.
#SelectMusic:
Easier1=@Codes().Easier[1]
Easier2=@Codes().Easier[2]
Harder1=@Codes().Harder[1]
Harder2=@Codes().Harder[2]
ModeMenu1=@Codes().SortMenu[1]
ModeMenu2=@Codes().SortMenu[2]
#OptionsList:
OptionsListOpen1=@Codes().OptionsListOpen[1]
OptionsListOpen2=@Codes().OptionsListOpen[2]
#Mods Menu:
CancelAllPlayerOptions=@Codes().CancelMods
#Evaluation:
SaveScreenshot=@Codes().Screenshot[1]
SaveScreenshot1=@Codes().Screenshot[1]
SaveScreenshot2=@Codes().Screenshot[2]
#All: Backinevent would also apply to Timer mode (TemporaryEventMode) which I don't want.
BackInEventMode=@Codes().BackInEventMode
#ScreenUserPacks:
LinkedMenuSwitch1=@Codes().LinkedMenuSwitch[1]
LinkedMenuSwitch2=@Codes().LinkedMenuSwitch[2]
#NextSort cycles through a hard-coded list (in MusicWheel.cpp); don't use it.
NextSort1=
NextSort2=
NextSort3=
NextSort4=
#Don't use these mods, CodeMod needs them
Mirror=
Left=
Right=
Shuffle=
SuperShuffle=
NextTransform=
NextScrollSpeed=
PreviousScrollSpeed=
NextAccel=
NextEffect=
NextAppearance=
NextTurn=
Reverse=
HoldNotes=
Mines=
Dark=
Hidden=
RandomVanish=
CancelAll=
#Title screen:
NextTheme=
NextTheme2=
NextAnnouncer=
NextAnnouncer2=
NextGame=
#@Codes().NextGame[1]
NextGame2=
#@Codes().NextGame[2]
#EZ2 screens:
NextBannerGroup=
NextBannerGroup2=

[--]
[WheelBase]
SwitchSeconds=@Metrics.MusicWheel.SwitchSpeed
#amount of shake when trying to move a locked wheel:
LockedInitialVelocity=5
#3.95:
NoCurving=@Bool[true]
ItemCurveX=0
Use3D=@Bool[false]
Wheel3DRadius=
CirclePercent=
ItemSpacingY=@Metrics.MusicWheel.SpacingY
#SM5 (ItemTransformFunction):
ItemTransformFunction=function(self,offset,itemIndex,numItems) self:y(Metrics.MusicWheel.SpacingY*offset) end
NumWheelItems=@Metrics.MusicWheel.NumItems
#staggered delay between each MusicWheelItem's StartOn/Off and FinishOn/Off
WheelItemOnDelayCenter=0
WheelItemOnDelayOffset=1/Metrics.MusicWheel.NumItems
WheelItemOffDelayCenter=0
WheelItemOffDelayOffset=1/Metrics.MusicWheel.NumItems
ScrollBarX=
# SM5 bitches if this is 0:
ScrollBarHeight=1

[MusicWheel]
Fallback=WheelBase
RouletteSwitchSeconds=0
#Land immediately on a song (instead of randomly wandering between the adjacent entries like DDR Extreme does)
RouletteSlowDownSwitches=-2
RandomPicksLockedSongs=@Bool[false]
MusicWheelItemStartOnCommand=%function(s) s:ztestmode("writeonfail") Capture.MusicWheel.ItemOn(s) Tweens.SelectMusic.MusicWheelItem.StartOn(s) end
#s:luaeffect("Update") end
#MusicWheelItemUpdateCommand=diffusealpha,1-math.abs(self:GetY()/(Metric("WheelBase","ItemSpacingY")*Metric("WheelBase","NumWheelItems")))/2
#MusicWheelItemUpdateCommand=diffusealpha,1-math.adsin(90*(self:GetY()/(Metric("WheelBase","ItemSpacingY")*Metric("WheelBase","NumWheelItems"))))
##if you want the currently selected item to be offset in 3.95:
#MusicWheelItemUpdateCommand=x,math.min(Metrics.MusicWheel.SpacingY,math.abs(self:GetY()))-Metrics.MusicWheel.SpacingY
#MusicWheelItemUpdateCommand=zoom,1-(math.min(Metrics.MusicWheel.SpacingY,math.abs(self:GetY()))-Metrics.MusicWheel.SpacingY)/Metrics.MusicWheel.SpacingY
#MusicWheelItemUpdateCommand=zoom,1-(math.min(Metrics.MusicWheel.SpacingY,math.abs(self:GetY()))-Metrics.MusicWheel.SpacingY)/Metrics.MusicWheel.SpacingY;y,self:GetY()+clamp(self:GetY(),-Metrics.MusicWheel.SpacingY,Metrics.MusicWheel.SpacingY)/2
MusicWheelItemCaptureCommand=%Capture.ActorFrame.CaptureInternal
MusicWheelItemQueuedFormatCommand=%Capture.MusicWheel.QueuedFormat
MusicWheelItemFinishOnCommand=%Tweens.SelectMusic.MusicWheelItem.FinishOn
MusicWheelItemFinishOnSortCommand=%Tweens.SelectMusic.MusicWheelItem.FinishOn
MusicWheelItemStartOffCommand=%Tweens.SelectMusic.MusicWheelItem.StartOff
MusicWheelItemFinishOffCommand=%Tweens.SelectMusic.MusicWheelItem.FinishOff
MusicWheelItemFinishOffSortCommand=%Tweens.SelectMusic.MusicWheelItem.FinishOff
MusicWheelItemOffCommand=
NumSectionColors=1
SectionColor1=1,1,1,1
ShowRoulette=@Bool[false]
#Bool[not IsNetwork() and Env().FullMode]
#ShowPortal = "Random" in game
ShowPortal=Bool[true]
#ShowRandom = "Chance" in game
#beta3 fix:
ShowRandom=0
#new in latest oITG:
SwapRandomAndRoulette=Bool[false]
MostPlayedSongsToShow=Metrics.MusicWheel.NumTopSongs
HighlightOnCommand=%function(s)Actor.xy(s,unpack(Metrics.MusicWheel.HighlightXY))Capture.MusicWheel.WheelOn(s)end
HighlightStartOnCommand=ztestmode,writeonfail;draworder,105;effectclock,beat
HighlightFinishOnCommand=
HighlightFinishOnSortCommand=stoptweening;diffuse,1,1,1,1
HighlightWheelSettledMessageCommand=%function(s) if not IsCourseMode() and CurSong() or IsCourseMode() and CurCourse() then s:stoptweening() s:luaeffect("Effect") end end
HighlightWheelMovingMessageCommand=playcommand,StopEffect
HighlightSongChosenMessageCommand=playcommand,StopEffect
HighlightStopEffectCommand=stopeffect;stoptweening;linear,Metrics.MusicWheel.SwitchSpeed) local c=(not IsCourseMode() and CurSong() or IsCourseMode() and CurCourse()) and .75 or 0 self:diffuse(c,c,c,1
HighlightEffectCommand=%function(s)local c=1-math.adsin(360*s:GetSecsIntoEffect())s:diffusecolor(c,c,c,1)end
HighlightStartOffCommand=sleep,0.5;linear,0.25;zoomy,0
HighlightFinishOffCommand=
HighlightFinishOffSortCommand=stoptweening
# Sort menu:
ModeMenuChoiceNames=@SortMenuNames(SortMenuEntries(IsCourseMode()),SortMenuExtraEntries(GetNumPlayersEnabled()))
Choice1=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice2=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice3=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice4=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice5=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice6=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice7=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice8=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice9=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice10=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice11=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice12=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice13=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice14=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice15=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice16=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice17=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice18=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice19=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice20=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice21=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice22=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice23=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice24=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice25=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice26=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice27=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice28=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
Choice29=@MenuEntries(Languages[CurLanguage()].ScreenSelectMusic.Sort)
#strings
Roulette=@Languages[CurLanguage()].ScreenSelectMusic.MusicWheel.Roulette
Portal=@Languages[CurLanguage()].ScreenSelectMusic.MusicWheel.Random
Random=@Languages[CurLanguage()].ScreenSelectMusic.MusicWheel.Chance
SongRealExtraColor=1,1,1,1
SortMenuColor=1,1,1,1

[WheelItemBase]
# BaseText (Player 2's difficulty meter, or "- EMPTY -")
TextOnCommand=shadowlength,0;horizalign,center
TextX=0
TextY=0

[MusicWheelItem]
Fallback=WheelItemBase
IconX=0
IconY=0
IconOnCommand=
SongNameX=0
SongNameY=0
SongNameOnCommand=
SongNameQueuedSetCommand=%Capture.MusicWheel.QueuedSetInfo
SectionX=0
SectionY=0
SectionOnCommand=diffuse,0,0,0,1
RouletteX=0
RouletteY=0
RouletteOnCommand=diffuse,0,0,0,1
CourseNameX=0
CourseNameY=0
CourseNameOnCommand=shadowlength,0;horizalign,center
CourseNamePollCommand=%function(s) Capture.MusicWheel.CourseNamePoll(s) end
SortX=0
SortY=0
SortOnCommand=shadowlength,0;horizalign,center
#clear lamps:
GradeP1X=Metrics.MusicWheelItem.GradeX[1]
GradeP1Y=0
GradeP2X=Metrics.MusicWheelItem.GradeX[2]
GradeP2Y=0
#notITG asks for this at boot. but what is being referenced here????
BannerOnCommand=

[WheelNotifyIcon]
ShowTraining=@Bool[false]

[SongManager]
# This colours both the folder name and its contents that colour.
NumSongGroupColors=1
SongGroupColor1=1,1,1,1
SongGroupColor2=1,.5,.75,1
SongGroupColor3=.25,.75,1,1
SongGroupColor4=0.25,1,1,1
SongGroupColor5=.5,1,.5,1
SongGroupColor6=1,1,.5,1
SongGroupColor7=1,.5,0,1
SongGroupColor8=1,.25,.25,1
SongGroupColor9=1,.5,.25,1
SongGroupColor10=.75,.75,.75,1
# never:
ExtraColorMeter=2147483647
# dummy colours, fill these in to shut stepmania up:
BeginnerColor=1,1,1,1
EasyColor=1,1,1,1
MediumColor=1,1,1,1
HardColor=1,1,1,1
ChallengeColor=1,1,1,1
EditColor=1,1,1,1
ExtraColor=1,1,1,1
NumCourseGroupColors=1
CourseGroupColor1=1,1,1,1

[Course]
# colours course entries in
SortLevel1Color=.75,.75,.5,1
SortLevel2Color=.5,1,.5,1
SortLevel3Color=.5,.75,.75,1
SortLevel4Color=.5,.5,1,1
SortLevel5Color=.75,.5,.75,1

[TextBanner]
# EditMenu and MusicWheelItem are both hardcoded to load this section.
TitleX=0
TitleY=0
TitleOnCommand=shadowlength,0;horizalign,center
SubtitleX=0
SubtitleY=0
SubtitleOnCommand=shadowlength,0;horizalign,center
ArtistX=0
ArtistY=0
ArtistOnCommand=visible,Bool[false]
ArtistPrependString=
TwoLinesTitleCommand=%function(s) TempTitle=s s:x(0) end
TwoLinesSubtitleCommand=%function(s) if GetEnv("EditMode") and not GetEnv("PracticeMode") then Screens.EditMenu.FormatTextBanner(TempTitle,s) else Capture.MusicWheel.SetInfo(s:getaux()) end TempTitle=nil end
TwoLinesArtistCommand=visible,Bool[false]
ThreeLinesTitleCommand=%function(s) TempTitle=s s:x(0) end
ThreeLinesSubtitleCommand=%function(s) if GetEnv("EditMode") and not GetEnv("PracticeMode") then Screens.EditMenu.FormatTextBanner(TempTitle,s) else Capture.MusicWheel.SetInfo(s:getaux()) end TempTitle=nil end
ThreeLinesArtistCommand=visible,Bool[false]

[TextBannerCourse]
Fallback=TextBanner
TwoLinesTitleCommand=
TwoLinesSubtitleCommand=
ThreeLinesTitleCommand=
ThreeLinesSubtitleCommand=

[--]
[CourseEntryDisplay]
# This actor is only used to grab song names + meters for CustomCourseContentsList. Hide it.
SeparateCourseMeters=@Bool[true]
BarX=
BarY=
BarOnCommand=visible,Bool[false]
NumberX=
NumberY=
NumberOnCommand=visible,Bool[false]
TextBannerName=TextBannerCourse
TextBannerType=TextBannerCourse
TextBannerX=
TextBannerY=
TextBannerOnCommand=visible,Bool[false]
DifficultyP1X=
DifficultyP1Y=
DifficultyP1OnCommand=visible,Bool[false]
DifficultyP2X=
DifficultyP2Y=
DifficultyP2OnCommand=visible,Bool[false]
ModifiersX=
ModifiersY=
ModifiersOnCommand=visible,Bool[false]
FootP1X=
FootP1Y=
FootP1OnCommand=visible,Bool[false]
FootP2X=
FootP2Y=
FootP2OnCommand=visible,Bool[false]

[DifficultyList]
# Currently, only used because it fires a command after all SSM stats get updated.
ItemsSpacingY=20.5
NumShownItems=6
CapitalizeDifficultyNames=@Bool[false]
# These bindings get applied to both Cursor and CursorFrame
CursorP1OnCommand=visible,Bool[false];queuecommand,Change
CursorP1OffCommand=
CursorP1TweenOnCommand=
CursorP1ChangeCommand=%function(s) if GetScreen():GetChild('DifficultyList') and GetScreen():GetChild('DifficultyList'):GetChild('CursorP1')==s then Capture.DifficultyList.MoveCursor(s,1) Screens.SelectMusic.StepsChanged(1) s:playcommand('ChangeTween') end end
CursorP1ChangeTweenCommand=
CursorP2OnCommand=visible,Bool[false];queuecommand,Change
CursorP2OffCommand=
CursorP2TweenOnCommand=
CursorP2ChangeCommand=%function(s) if GetScreen():GetChild('DifficultyList') and GetScreen():GetChild('DifficultyList'):GetChild('CursorP2')==s then Capture.DifficultyList.MoveCursor(s,2) Screens.SelectMusic.StepsChanged(2) s:playcommand('ChangeTween') end end
CursorP2ChangeTweenCommand=
RowOnCommand=visible,Bool[false]
RowOffCommand=
MoveCommand=
# Add bindings to facilitate overriding the groove radar's hardcoded tween animations
CursorP1ShowCommand=%function(s) Broadcast("LeaveSortMenu") end
CursorP2ShowCommand=%function(s) Broadcast("LeaveSortMenu") end
CursorP1HideCommand=%function(s) Broadcast("EnterSortMenu") end
CursorP2HideCommand=%function(s) Broadcast("EnterSortMenu") end

#CursorP1ShowCommand=%function(s) (GetScreen():GetChild("Radar") or s):playcommand("TweenIn") end
#CursorP2ShowCommand=%function(s) (GetScreen():GetChild("Radar") or s):playcommand("TweenIn") end
#CursorP1HideCommand=%function(s) (GetScreen():GetChild("Radar") or s):playcommand("TweenOut") end
#CursorP2HideCommand=%function(s) (GetScreen():GetChild("Radar") or s):playcommand("TweenOut") end


[DifficultyListRow]
Fallback=DifficultyMeter

[--]
[PaneDisplay]
ShiftP1X=0
ShiftP1Y=0
ShiftP2X=0
ShiftP2Y=0
EmptyMachineHighScoreName=@Metrics.SelectMusic.PaneDisplay.EmptyScoreName
#OverOn etc is run before PaneDisplayPnOn in [SSM].
OverOnCommand=%function(s) Actor.xy(s,unpack(Metrics.SelectMusic.PaneDisplay.OverXY)) end
UnderOnCommand=%function(s) Actor.xy(s,unpack(Metrics.SelectMusic.PaneDisplay.UnderXY)) end
SongNumStepsTextX=Metrics.SelectMusic.PaneDisplay.Texts.NumStepsXY[1]
SongNumStepsTextY=Metrics.SelectMusic.PaneDisplay.Texts.NumStepsXY[2]
SongNumStepsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.NumStepsXY[1]
SongNumStepsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.NumStepsXY[2]
SongJumpsTextX=Metrics.SelectMusic.PaneDisplay.Texts.JumpsXY[1]
SongJumpsTextY=Metrics.SelectMusic.PaneDisplay.Texts.JumpsXY[2]
SongJumpsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.JumpsXY[1]
SongJumpsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.JumpsXY[2]
SongHandsTextX=Metrics.SelectMusic.PaneDisplay.Texts.HandsXY[1]
SongHandsTextY=Metrics.SelectMusic.PaneDisplay.Texts.HandsXY[2]
SongHandsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.HandsXY[1]
SongHandsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.HandsXY[2]
SongMinesTextX=Metrics.SelectMusic.PaneDisplay.Texts.MinesXY[1]
SongMinesTextY=Metrics.SelectMusic.PaneDisplay.Texts.MinesXY[2]
SongMinesLabelX=Metrics.SelectMusic.PaneDisplay.Labels.MinesXY[1]
SongMinesLabelY=Metrics.SelectMusic.PaneDisplay.Labels.MinesXY[2]
SongHoldsTextX=Metrics.SelectMusic.PaneDisplay.Texts.HoldsXY[1]
SongHoldsTextY=Metrics.SelectMusic.PaneDisplay.Texts.HoldsXY[2]
SongHoldsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.HoldsXY[1]
SongHoldsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.HoldsXY[2]
SongRollsTextX=Metrics.SelectMusic.PaneDisplay.Texts.RollsXY[1]
SongRollsTextY=Metrics.SelectMusic.PaneDisplay.Texts.RollsXY[2]
SongRollsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.RollsXY[1]
SongRollsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.RollsXY[2]
MachineHighScoreTextX=Metrics.SelectMusic.PaneDisplay.Texts.Score.MachineXY[1]
MachineHighScoreTextY=Metrics.SelectMusic.PaneDisplay.Texts.Score.MachineXY[2]
MachineHighNameTextX=Metrics.SelectMusic.PaneDisplay.Labels.Score.MachineXY[1]
MachineHighNameTextY=Metrics.SelectMusic.PaneDisplay.Labels.Score.MachineXY[2]
ProfileHighScoreTextX=Metrics.SelectMusic.PaneDisplay.Texts.Score.PersonalXY[1]
ProfileHighScoreTextY=Metrics.SelectMusic.PaneDisplay.Texts.Score.PersonalXY[2]
ProfileHighScoreLabelX=Metrics.SelectMusic.PaneDisplay.Labels.Score.PersonalXY[1]
ProfileHighScoreLabelY=Metrics.SelectMusic.PaneDisplay.Labels.Score.PersonalXY[2]
CourseNumStepsTextX=Metrics.SelectMusic.PaneDisplay.Texts.NumStepsXY[1]
CourseNumStepsTextY=Metrics.SelectMusic.PaneDisplay.Texts.NumStepsXY[2]
CourseNumStepsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.NumStepsXY[1]
CourseNumStepsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.NumStepsXY[2]
CourseJumpsTextX=Metrics.SelectMusic.PaneDisplay.Texts.JumpsXY[1]
CourseJumpsTextY=Metrics.SelectMusic.PaneDisplay.Texts.JumpsXY[2]
CourseJumpsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.JumpsXY[1]
CourseJumpsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.JumpsXY[2]
CourseHandsTextX=Metrics.SelectMusic.PaneDisplay.Texts.HandsXY[1]
CourseHandsTextY=Metrics.SelectMusic.PaneDisplay.Texts.HandsXY[2]
CourseHandsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.HandsXY[1]
CourseHandsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.HandsXY[2]
CourseMinesTextX=Metrics.SelectMusic.PaneDisplay.Texts.MinesXY[1]
CourseMinesTextY=Metrics.SelectMusic.PaneDisplay.Texts.MinesXY[2]
CourseMinesLabelX=Metrics.SelectMusic.PaneDisplay.Labels.MinesXY[1]
CourseMinesLabelY=Metrics.SelectMusic.PaneDisplay.Labels.MinesXY[2]
CourseHoldsTextX=Metrics.SelectMusic.PaneDisplay.Texts.HoldsXY[1]
CourseHoldsTextY=Metrics.SelectMusic.PaneDisplay.Texts.HoldsXY[2]
CourseHoldsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.HoldsXY[1]
CourseHoldsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.HoldsXY[2]
CourseRollsTextX=Metrics.SelectMusic.PaneDisplay.Texts.RollsXY[1]
CourseRollsTextY=Metrics.SelectMusic.PaneDisplay.Texts.RollsXY[2]
CourseRollsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.RollsXY[1]
CourseRollsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.RollsXY[2]
CourseMachineHighScoreTextX=Metrics.SelectMusic.PaneDisplay.Texts.Score.MachineXY[1]
CourseMachineHighScoreTextY=Metrics.SelectMusic.PaneDisplay.Texts.Score.MachineXY[2]
CourseMachineHighNameTextX=Metrics.SelectMusic.PaneDisplay.Labels.Score.MachineXY[1]
CourseMachineHighNameTextY=Metrics.SelectMusic.PaneDisplay.Labels.Score.MachineXY[2]
CourseProfileHighScoreTextX=Metrics.SelectMusic.PaneDisplay.Texts.Score.PersonalXY[1]
CourseProfileHighScoreTextY=Metrics.SelectMusic.PaneDisplay.Texts.Score.PersonalXY[2]
CourseProfileHighScoreLabelX=Metrics.SelectMusic.PaneDisplay.Labels.Score.PersonalXY[1]
CourseProfileHighScoreLabelY=Metrics.SelectMusic.PaneDisplay.Labels.Score.PersonalXY[2]
SongNumStepsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
SongNumStepsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
SongNumStepsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
SongNumStepsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
SongNumStepsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
SongNumStepsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
SongNumStepsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
SongNumStepsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
SongNumStepsNumLevels=0
SongJumpsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
SongJumpsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
SongJumpsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
SongJumpsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
SongJumpsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
SongJumpsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
SongJumpsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
SongJumpsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
SongJumpsNumLevels=0
SongMinesTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
SongMinesTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
SongMinesTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
SongMinesTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
SongMinesLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
SongMinesLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
SongMinesLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
SongMinesLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
SongMinesNumLevels=0
SongHoldsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
SongHoldsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
SongHoldsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
SongHoldsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
SongHoldsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
SongHoldsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
SongHoldsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
SongHoldsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
SongHoldsNumLevels=0
SongRollsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
SongRollsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
SongRollsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
SongRollsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
SongRollsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
SongRollsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
SongRollsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
SongRollsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
SongRollsNumLevels=0
SongHandsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
SongHandsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
SongHandsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
SongHandsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
SongHandsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
SongHandsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
SongHandsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
SongHandsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
SongHandsNumLevels=0
ProfileHighScoreTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.On
ProfileHighScoreTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.Off
ProfileHighScoreTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.GainFocus
ProfileHighScoreTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.LoseFocus
ProfileHighScoreLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.On
ProfileHighScoreLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.Off
ProfileHighScoreLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.GainFocus
ProfileHighScoreLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.LoseFocus
ProfileHighScoreNumLevels=0
MachineHighScoreTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.On
MachineHighScoreTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.Off
MachineHighScoreTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.GainFocus
MachineHighScoreTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.LoseFocus
MachineHighScoreNumLevels=0
MachineHighNameTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.On
MachineHighNameTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.Off
MachineHighNameTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.GainFocus
MachineHighNameTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.LoseFocus
MachineHighNameNumLevels=0
CourseNumStepsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
CourseNumStepsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
CourseNumStepsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
CourseNumStepsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
CourseNumStepsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
CourseNumStepsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
CourseNumStepsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
CourseNumStepsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
CourseNumStepsNumLevels=0
CourseJumpsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
CourseJumpsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
CourseJumpsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
CourseJumpsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
CourseJumpsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
CourseJumpsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
CourseJumpsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
CourseJumpsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
CourseJumpsNumLevels=0
CourseMinesTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
CourseMinesTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
CourseMinesTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
CourseMinesTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
CourseMinesLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
CourseMinesLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
CourseMinesLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
CourseMinesLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
CourseMinesNumLevels=0
CourseHoldsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
CourseHoldsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
CourseHoldsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
CourseHoldsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
CourseHoldsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
CourseHoldsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
CourseHoldsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
CourseHoldsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
CourseHoldsNumLevels=0
CourseRollsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
CourseRollsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
CourseRollsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
CourseRollsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
CourseRollsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
CourseRollsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
CourseRollsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
CourseRollsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
CourseRollsNumLevels=0
CourseHandsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
CourseHandsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
CourseHandsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
CourseHandsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
CourseHandsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
CourseHandsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
CourseHandsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
CourseHandsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
CourseHandsNumLevels=0
CourseProfileHighScoreTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.On
CourseProfileHighScoreTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.Off
CourseProfileHighScoreTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.GainFocus
CourseProfileHighScoreTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.LoseFocus
CourseProfileHighScoreLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.On
CourseProfileHighScoreLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.Off
CourseProfileHighScoreLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.GainFocus
CourseProfileHighScoreLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.LoseFocus
CourseProfileHighScoreNumLevels=0
CourseMachineHighScoreTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.On
CourseMachineHighScoreTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.Off
CourseMachineHighScoreTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.GainFocus
CourseMachineHighScoreTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.LoseFocus
CourseMachineHighScoreNumLevels=0
CourseMachineHighNameTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.On
CourseMachineHighNameTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.Off
CourseMachineHighNameTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.GainFocus
CourseMachineHighNameTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.LoseFocus
CourseMachineHighNameNumLevels=0
# Unused objects: ("Best By" and "Best", vestiges from ITG1)
MachineHighScoreLabelX=
MachineHighScoreLabelY=
MachineHighScoreLabelOnCommand=visible,Bool[false]
MachineHighScoreLabelOffCommand=
MachineHighScoreLabelGainFocusCommand=
MachineHighScoreLabelLoseFocusCommand=
MachineHighNameLabelX=
MachineHighNameLabelY=
MachineHighNameLabelOnCommand=visible,Bool[false]
MachineHighNameLabelOffCommand=
MachineHighNameLabelGainFocusCommand=
MachineHighNameLabelLoseFocusCommand=
CourseMachineHighScoreLabelX=
CourseMachineHighScoreLabelY=
CourseMachineHighScoreLabelOnCommand=visible,Bool[false]
CourseMachineHighScoreLabelOffCommand=
CourseMachineHighScoreLabelGainFocusCommand=
CourseMachineHighScoreLabelLoseFocusCommand=
CourseMachineHighNameLabelX=
CourseMachineHighNameLabelY=
CourseMachineHighNameLabelOnCommand=visible,Bool[false]
CourseMachineHighNameLabelOffCommand=
CourseMachineHighNameLabelGainFocusCommand=
CourseMachineHighNameLabelLoseFocusCommand=
# The game wants the metrics for these objects, that don't even get loaded:
MachineNumPlaysTextX=
MachineNumPlaysTextY=
MachineNumPlaysTextOnCommand=
MachineNumPlaysTextOffCommand=
MachineNumPlaysTextGainFocusCommand=
MachineNumPlaysTextLoseFocusCommand=
MachineNumPlaysLabelX=
MachineNumPlaysLabelOnCommand=
MachineNumPlaysLabelY=
MachineNumPlaysLabelOffCommand=
MachineNumPlaysLabelGainFocusCommand=
MachineNumPlaysLabelLoseFocusCommand=
MachineRankTextX=
MachineRankTextY=
MachineRankTextOnCommand=
MachineRankTextOffCommand=
MachineRankTextGainFocusCommand=
MachineRankTextLoseFocusCommand=
MachineRankLabelX=
MachineRankLabelY=
MachineRankLabelOnCommand=
MachineRankLabelOffCommand=
MachineRankLabelGainFocusCommand=
MachineRankLabelLoseFocusCommand=
ProfileNumPlaysTextX=
ProfileNumPlaysTextY=
ProfileNumPlaysTextOnCommand=
ProfileNumPlaysTextOffCommand=
ProfileNumPlaysTextGainFocusCommand=
ProfileNumPlaysTextLoseFocusCommand=
ProfileNumPlaysLabelX=
ProfileNumPlaysLabelY=
ProfileNumPlaysLabelOnCommand=
ProfileNumPlaysLabelOffCommand=
ProfileNumPlaysLabelGainFocusCommand=
ProfileNumPlaysLabelLoseFocusCommand=
ProfileRankTextX=
ProfileRankTextY=
ProfileRankTextOnCommand=
ProfileRankTextOffCommand=
ProfileRankTextGainFocusCommand=
ProfileRankTextLoseFocusCommand=
ProfileRankLabelX=
ProfileRankLabelY=
ProfileRankLabelOnCommand=
ProfileRankLabelOffCommand=
ProfileRankLabelGainFocusCommand=
ProfileRankLabelLoseFocusCommand=
# SM5:
CountFormat=
LiftsTextX=
LiftsTextY=
LiftsLabelX=
LiftsLabelY=
FakesTextX=
FakesTextY=
FakesLabelX=
FakesLabelY=
NumStepsTextX=Metrics.SelectMusic.PaneDisplay.Texts.NumStepsXY[1]
NumStepsTextY=Metrics.SelectMusic.PaneDisplay.Texts.NumStepsXY[2]
NumStepsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.NumStepsXY[1]
NumStepsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.NumStepsXY[2]
JumpsTextX=Metrics.SelectMusic.PaneDisplay.Texts.JumpsXY[1]
JumpsTextY=Metrics.SelectMusic.PaneDisplay.Texts.JumpsXY[2]
JumpsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.JumpsXY[1]
JumpsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.JumpsXY[2]
HandsTextX=Metrics.SelectMusic.PaneDisplay.Texts.HandsXY[1]
HandsTextY=Metrics.SelectMusic.PaneDisplay.Texts.HandsXY[2]
HandsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.HandsXY[1]
HandsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.HandsXY[2]
MinesTextX=Metrics.SelectMusic.PaneDisplay.Texts.MinesXY[1]
MinesTextY=Metrics.SelectMusic.PaneDisplay.Texts.MinesXY[2]
MinesLabelX=Metrics.SelectMusic.PaneDisplay.Labels.MinesXY[1]
MinesLabelY=Metrics.SelectMusic.PaneDisplay.Labels.MinesXY[2]
HoldsTextX=Metrics.SelectMusic.PaneDisplay.Texts.HoldsXY[1]
HoldsTextY=Metrics.SelectMusic.PaneDisplay.Texts.HoldsXY[2]
HoldsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.HoldsXY[1]
HoldsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.HoldsXY[2]
RollsTextX=Metrics.SelectMusic.PaneDisplay.Texts.RollsXY[1]
RollsTextY=Metrics.SelectMusic.PaneDisplay.Texts.RollsXY[2]
RollsLabelX=Metrics.SelectMusic.PaneDisplay.Labels.RollsXY[1]
RollsLabelY=Metrics.SelectMusic.PaneDisplay.Labels.RollsXY[2]
MachineHighScoreTextX=Metrics.SelectMusic.PaneDisplay.Texts.Score.MachineXY[1]
MachineHighScoreTextY=Metrics.SelectMusic.PaneDisplay.Texts.Score.MachineXY[2]
MachineHighNameTextX=Metrics.SelectMusic.PaneDisplay.Labels.Score.MachineXY[1]
MachineHighNameTextY=Metrics.SelectMusic.PaneDisplay.Labels.Score.MachineXY[2]
ProfileHighScoreTextX=Metrics.SelectMusic.PaneDisplay.Texts.Score.PersonalXY[1]
ProfileHighScoreTextY=Metrics.SelectMusic.PaneDisplay.Texts.Score.PersonalXY[2]
ProfileHighScoreLabelX=Metrics.SelectMusic.PaneDisplay.Labels.Score.PersonalXY[1]
ProfileHighScoreLabelY=Metrics.SelectMusic.PaneDisplay.Labels.Score.PersonalXY[2]
NumStepsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
NumStepsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
NumStepsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
NumStepsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
NumStepsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
NumStepsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
NumStepsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
NumStepsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
NumStepsNumLevels=0
JumpsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
JumpsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
JumpsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
JumpsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
JumpsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
JumpsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
JumpsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
JumpsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
JumpsNumLevels=0
MinesTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
MinesTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
MinesTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
MinesTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
MinesLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
MinesLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
MinesLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
MinesLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
MinesNumLevels=0
HoldsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
HoldsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
HoldsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
HoldsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
HoldsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
HoldsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
HoldsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
HoldsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
HoldsNumLevels=0
RollsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
RollsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
RollsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
RollsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
RollsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
RollsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
RollsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
RollsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
RollsNumLevels=0
HandsTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.On
HandsTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.Off
HandsTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.GainFocus
HandsTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Text.LoseFocus
HandsLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.On
HandsLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.Off
HandsLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.GainFocus
HandsLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Stats.Label.LoseFocus
HandsNumLevels=0
ProfileHighScoreTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.On
ProfileHighScoreTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.Off
ProfileHighScoreTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.GainFocus
ProfileHighScoreTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Text.LoseFocus
ProfileHighScoreLabelOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.On
ProfileHighScoreLabelOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.Off
ProfileHighScoreLabelGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.GainFocus
ProfileHighScoreLabelLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Personal.Label.LoseFocus
ProfileHighScoreNumLevels=0
MachineHighScoreTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.On
MachineHighScoreTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.Off
MachineHighScoreTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.GainFocus
MachineHighScoreTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Text.LoseFocus
MachineHighScoreNumLevels=0
MachineHighNameTextOnCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.On
MachineHighNameTextOffCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.Off
MachineHighNameTextGainFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.GainFocus
MachineHighNameTextLoseFocusCommand=%Tweens.SelectMusic.PaneDisplay.Score.Machine.Label.LoseFocus
MachineHighNameNumLevels=0
MachineHighScoreLabelX=
MachineHighScoreLabelY=
MachineHighScoreLabelOnCommand=visible,Bool[false]
MachineHighScoreLabelOffCommand=
MachineHighScoreLabelGainFocusCommand=
MachineHighScoreLabelLoseFocusCommand=
MachineHighNameLabelX=
MachineHighNameLabelY=
MachineHighNameLabelOnCommand=visible,Bool[false]
MachineHighNameLabelOffCommand=
MachineHighNameLabelGainFocusCommand=
MachineHighNameLabelLoseFocusCommand=
MachineNumPlaysTextX=
MachineNumPlaysTextY=
MachineNumPlaysTextOnCommand=
MachineNumPlaysTextOffCommand=
MachineNumPlaysTextGainFocusCommand=
MachineNumPlaysTextLoseFocusCommand=
MachineNumPlaysLabelX=
MachineNumPlaysLabelOnCommand=
MachineNumPlaysLabelY=
MachineNumPlaysLabelOffCommand=
MachineNumPlaysLabelGainFocusCommand=
MachineNumPlaysLabelLoseFocusCommand=
MachineRankTextX=
MachineRankTextY=
MachineRankTextOnCommand=
MachineRankTextOffCommand=
MachineRankTextGainFocusCommand=
MachineRankTextLoseFocusCommand=
MachineRankLabelX=
MachineRankLabelY=
MachineRankLabelOnCommand=
MachineRankLabelOffCommand=
MachineRankLabelGainFocusCommand=
MachineRankLabelLoseFocusCommand=
ProfileNumPlaysTextX=
ProfileNumPlaysTextY=
ProfileNumPlaysTextOnCommand=
ProfileNumPlaysTextOffCommand=
ProfileNumPlaysTextGainFocusCommand=
ProfileNumPlaysTextLoseFocusCommand=
ProfileNumPlaysLabelX=
ProfileNumPlaysLabelY=
ProfileNumPlaysLabelOnCommand=
ProfileNumPlaysLabelOffCommand=
ProfileNumPlaysLabelGainFocusCommand=
ProfileNumPlaysLabelLoseFocusCommand=
ProfileRankTextX=
ProfileRankTextY=
ProfileRankTextOnCommand=
ProfileRankTextOffCommand=
ProfileRankTextGainFocusCommand=
ProfileRankTextLoseFocusCommand=
ProfileRankLabelX=
ProfileRankLabelY=
ProfileRankLabelOnCommand=
ProfileRankLabelOffCommand=
ProfileRankLabelGainFocusCommand=
ProfileRankLabelLoseFocusCommand=

[PaneDisplayP1]
Fallback=PaneDisplay
[PaneDisplayP2]
Fallback=PaneDisplay

[--]
[OptionIcon]
#Put safe values in for mods screen
TextOffsetX=0
TextOffsetY=0
#SM5 renames TextOffset to just Text:
TextX=0
TextY=0
# 0,1,2 = left,center,right
TextHAlign=1
# 0,1,2 = top,middle,bottom
TextVAlign=1
#never crop text:
TextWidth=2147483647
TextZoom=@Metrics.ModsMenu.IconTextZoom
Uppercase=@Bool[false]

[OptionIconRow]
SpacingX=
SpacingY=

[--]
[GrooveRadar]
#Cache using B3+ or NotITG if you want a working groove radar.
#Interestingly: You can set the label on tween, but the off tweens are hard coded.
#               The on and off tweens for the pentagon are hardcoded too
LabelOnCommand=stoptweening;diffusealpha,0
LabelOnDelay=0
LabelOnCommandPostDelay=linear,0.2;diffusealpha,1
Label1OffsetX=0
Label1OffsetY=-84
Label2OffsetX=-92
Label2OffsetY=-28
Label3OffsetX=92
Label3OffsetY=-28
Label4OffsetX=64
Label4OffsetY=68
Label5OffsetX=-64
Label5OffsetY=68

[GrooveGraph]
MountainWidth=32
MountainHeight=64
# Actually this is:
# sprite names:	Beginner Easy    Medium Hard   Challenge Edit     Invalid
# maps to:			Stream   Voltage Air    Freeze Chaos     NumSteps Jumps
# also- "Beginner" draws topmost

# Blue, pink, green
BeginnerColor=.25,.75,1,.25
EasyColor=1,.5,.75,0.5
MediumColor=0,0,0,0
HardColor=0,0,0,0
ChallengeColor=0,1,.5,.5

EditColor=0,0,0,0
InvalidColor=0,0,0,0
ShowStream=@Bool[true]
ShowVoltage=@Bool[true]
ShowAir=@Bool[true]
ShowFreeze=@Bool[true]
ShowChaos=@Bool[true]
StreamX=@32*-2
VoltageX=@32*-1
AirX=0
FreezeX=@32*1
ChaosX=@32*2
MountainsBaseY=0

[------------------------------------------------------------------]
[oldScreenWorkoutMenu]
Fallback=NewModsMenu
InitCommand=%function(s) LoadProfile() end
UpdateOnMessage=@(function()Screens.NewModsMenu.InitMenu(WorkoutMenu())end)()
PrevScreen=@Screens.NewModsMenu.Back(Branch.Title())
HelpGoToPrevScreenCommand=%function(s) Screens.NewModsMenu.GoToPrevScreen(Branch.Title()) end
HelpGoToNextScreenCommand=%function(s) Screens.NewModsMenu.GoToNextScreen(Branch.WorkoutMenuNext()) end

[WorkoutMenu]
Fallback=OptionsSharedMenu
#Fallback=SongOptionsMenu
InitCommand=%function(s) LoadProfile() end
LineNames=@ModsMenu.Init(WorkoutMenu())
NextScreen=@ModsMenu.Branch("WorkoutMenu",Branch.WorkoutMenuNext(),true)
PrevScreen=@ModsMenu.Branch("WorkoutMenu",Branch.WorkoutMenuNext(),true)

[WorkoutOptionsShared]
Fallback=OptionsShared
LineNames=@ModsMenu.Init(WorkoutMenu)
NextScreen=@ModsMenu.Branch("WorkoutMenu",Branch.WorkoutMenuNext(),true)
PrevScreen=@ModsMenu.Branch("WorkoutMenu",Branch.WorkoutMenuNext(),true)
PlayMusic=@Bool[false]

[WorkoutOptions]
Fallback=Options
LineNames=@ModsMenu.Init(WorkoutMenu)
NextScreen=@ModsMenu.Branch("WorkoutMenu",Branch.WorkoutMenuNext(),true)
PrevScreen=@ModsMenu.Branch("WorkoutMenu",Branch.WorkoutMenuNext(),true)
PlayMusic=@Bool[false]

[WorkoutBreak]
# Use ScreenSplash, or ScreenInstructions if you want to allow start to skip.
Class=ScreenInstructions
Fallback=CommonBlank
ScreenInitCommand=%function(s) Screens.Common.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) end
ScreenOnCommand=
#%Screens.Stage.On
HelpLuaCommand=
HelpText=
#%Screens.Stage.On
FirstUpdateCommand=
#Screens.Stage.FirstUpdate(self)
ScreenFirstUpdateCommand=
#%Screens.Stage.FirstUpdate
ShowStage=not IsCourseMode()
NextScreen=@Branch.WorkoutBreakNext()
PrevScreen=@Branch.GameplayBack()
AllowStartToSkip=@Bool[true]
PrepareScreen=@Bool[false]
#OverlayOnCommand=diffusealpha,0;linear,0.5;diffusealpha,1
#3.95:
MinimumLoadDelaySeconds=@GetPref("EndlessBreakLength")
#sm5:
TimerStealth=@Bool[true]
ForceTimer=@Bool[true]
TimerSeconds=@GetPref("EndlessBreakLength")

[------------------------------------------------------------------]
[SelectSuperMarathon]
Fallback=InputHandler
CodeNames=@InputHandler.Init(Screens.SuperMarathon.Inputs)
PrevScreen=@Branch.SelectMusicBack()
ChoiceStart=lua,Screens.SuperMarathon.List.Pick;screen,SuperMarathonStart
HelpText=@join("\n",Languages[CurLanguage()].ScreenOptions.HelpTips)

[oldSuperMarathonStart]
Fallback=NewModsMenu
UpdateOnMessage=@(function()Screens.NewModsMenu.InitMenu(NewModsPages())end)()
PrevScreen=@Screens.NewModsMenu.Back("SelectSuperMarathon")
HelpGoToPrevScreenCommand=%function(s) Screens.NewModsMenu.GoToPrevScreen("SelectSuperMarathon") end
HelpGoToNextScreenCommand=%function(s) Screens.NewModsMenu.GoToNextScreen(Branch.SuperMarathonStartGame()) end

[SuperMarathonStart]
Class=ScreenSplash
Fallback=CommonBlankNoBG
NextScreen=@Branch.SuperMarathonStartGame()
PrevScreen=SelectSuperMarathon
AllowStartToSkip=@Bool[false]
MinimumLoadDelaySeconds=0
PrepareScreen=@Bool[false]

[------------------------------------------------------------------]
#TRICKY: Net select music hardcodes "ScreenPlayerOptions" when hitting up
[PlayerOptionsBasic]
#Direct mods menu without submenus
Class=ScreenPlayerOptions
Fallback=PlayerOptions
LineNames=@ModsMenu.Init(ModsPagesBasic())
InitCommand=%function(s) Screens.Common.Init(s) FitScreenToAspect(s) SetPref("ShowSongOptions",0) end --NOTE: One page for now. --Env().FullMode and -1 or 0) end
# Note: [SongOptions] NextScreen= is read instead of this one, if ShowSongOptions is off in stepmania.ini
NextScreen=@ModsMenu.Branch("PlayerOptionsBasic",Branch.SelectMusicNext(),true)
PrevScreen=@ModsMenu.Branch("PlayerOptionsBasic",Branch.SelectMusic(),false)

[PlayerOptionsPage2]
# This has to be ScreenPlayerOptions so the DQ sprite shows.
Class=ScreenPlayerOptions
#Class=ScreenSongOptions
Fallback=PlayerOptionsBasic
LineNames=@ModsMenu.Init(ModsPagesBasicPage2())
InitCommand=%function(s) Screens.Common.Init(s) FitScreenToAspect(s) SetPref("ShowSongOptions",0) end

[PlayerOptionsMenu]
#Just used for the all-black pane on SongOptions.
Fallback=PlayerOptions

[SongOptionsMenu]
#Reuse song options as a top-level menu.
Class=ScreenOptionsMaster
Fallback=PlayerOptions
#Fallback=SongOptions
AllowRepeatingChangeValueInput=@Bool[false]
LineHighlightChangeCommand=%function(s) ModsMenu.MoveCursor(s) ModsMenu.RefreshModsText(s) end
ItemsLongRowSharedX=0
# Re-use for mods status text
IconsOnCommand=
NextScreen=@ModsMenu.Branch("SongOptionsMenu",Branch.SelectMusicNext(),true)
# XXX: Because there's a tab bar, and because this value gets checked before current menu gets pushed on the stack, hardcode the value:
ShowExitRow=@Bool[false]
#@Bool[not ModsMenu.ShowTabList(ModsMenu.GetTop())]

#ScreenNetSelectMusic is hardcoded to load ScreenPlayerOptions when hitting Up
[PlayerOptions]
Class=ScreenPlayerOptions
Fallback=Options
PlayMusic=@Bool[false]
StopMusicOnBack=@Bool[false]
TimerSeconds=MenuTimer.Seconds(Metrics.ModsMenu.MenuTimer)
InitCommand=%function(s) Screens.Common.Init(s) FitScreenToAspect(s) end
LineNames=@ModsMenu.Init((IsNetSMOnline() or IsNetConnected()) and ModsPagesBasic() or ModsPages())
PrevScreen=@ModsMenu.Branch("SongOptionsMenu",Branch.SelectMusic(),false)
NextScreen=@ModsMenu.Branch("SongOptionsMenu",Branch.SelectMusicModsSong(),true)
ScreenOnCommand=%Screens.ModsMenu.On
HelpLuaCommand=%Screens.ModsMenu.On
HelpAlarmMessageCommand=%Screens.ModsMenu.Alarm
FirstUpdateCommand=ModsMenu.AfterInit() Screens.Common.FirstUpdate(self) Screens.ModsMenu.FirstUpdate(self) ModsMenu.FirstUpdate(self)
ScreenFirstUpdateCommand=%function(s) ModsMenu.AfterInit() Screens.ModsMenu.FirstUpdate(s) ModsMenu.FirstUpdate(s) end
ShowBpmInSpeedTitle=@Bool[false]
StageX=Metrics.SelectMusic.StageXY[1]
StageY=Metrics.SelectMusic.StageXY[2]
StageOnCommand=%function(s) s:visible(Bool[not GetSysConfig().Timer]) Tweens.SelectMusic.Stage.On(s) s:settext(StageText()) end
StageOffCommand=%Tweens.SelectMusic.Stage.Off
CancelAllP1X=
CancelAllP1Y=
CancelAllP1OnCommand=%function(s) s:visible(Bool[false]) end
CancelAllP1ShowCommand=%function(s) LoadDefaultMods(1) s:queuecommand("ReloadMenu") end
CancelAllP1ReloadMenuCommand=%ModsMenu.AfterInit
CancelAllP2X=
CancelAllP2Y=
CancelAllP2OnCommand=%function(s) s:visible(Bool[false]) end
CancelAllP2ShowCommand=%function(s) LoadDefaultMods(2) s:queuecommand("ReloadMenu") end
CancelAllP2ReloadMenuCommand=%ModsMenu.AfterInit
ItemsLongRowSharedX=0
##oitg beta 3
HideMeter=@Bool[false]

[SongOptions]
Class=ScreenOptionsMaster
Fallback=PlayerOptions
LabelsX=-144
ItemsLongRowSharedX=GetScreen():getaux()==table.getn(ModsMenu.GetTop().Contents)+1 and 0 or 112
#ScreenPlayerOptions reads this Nextscreen if ShowSongOptions is off or user skipped Song options menu when prompted.
NextScreen=@ModsMenu.Branch("SongOptionsMenu",Branch.SelectMusicNext(),true)

[NewModsMenu]
Fallback=InputHandler
PlayMusic=@Bool[false]
CodeNames=@InputHandler.Init(InputHandler.Register(Screens.NewModsMenu.Input))
#SM5:
ScreenInitCommand=%function(s) if SM_VERSION>=5 then InputHandler.RegisterSM5(Screens.NewModsMenu.Input) end end
#Menu:
UpdateOnMessage=@(function()Screens.NewModsMenu.InitMenu(NewModsPages())end)()
#Branches:
PrevScreen=@Screens.NewModsMenu.Back(Branch.SelectMusic())
HelpNextScreenMessageCommand=%function(s) GetScreen():playcommand("Off") s:sleep(0.5) s:queuecommand("GoToNextScreen") end
HelpPrevScreenMessageCommand=%function(s) GetScreen():playcommand("Off") s:sleep(0.5) s:queuecommand("GoToPrevScreen") end
HelpGoToNextScreenCommand=%function(s) Screens.NewModsMenu.GoToNextScreen(Branch.StageNext()) end
HelpGoToPrevScreenCommand=%function(s) Screens.NewModsMenu.GoToPrevScreen(Branch.SelectMusic()) end
TimerSeconds=90

[--]
[PlayerOptionsBPM]
# Hack to grab the bpm from a Speed line, useful if BPMDisplay has cycling numbers enabled
Class=ScreenPlayerOptions
Fallback=PlayerOptionsBasic
ShowBpmInSpeedTitle=@Bool[true]
LineNames=1
Line1=list,Speed
CancelAllP1OnCommand=%function(s) Capture.BPMSpeedLine(s) Capture.ModsMenu.Off() SetScreen(Branch.PlayerOptionsBPMNext()) end
CancelAllP2OnCommand=%function(s) Capture.BPMSpeedLine(s) Capture.ModsMenu.Off() SetScreen(Branch.PlayerOptionsBPMNext()) end

[PlayerOptionsBPMEdit]
Fallback=PlayerOptionsBPM
CancelAllP1OnCommand=%function(s) Capture.BPMSpeedLine(s) end

[PlayerOptionsBPMModsMenu]
#Used so the rate mod line displays the correct bpm values in the mods menu.
Fallback=PlayerOptionsBPM
CancelAllP1OnCommand=%function(s) Capture.BPMSpeedLine(s) Capture.ModsMenu.Off() end
CancelAllP2OnCommand=%function(s) Capture.BPMSpeedLine(s) Capture.ModsMenu.Off() end

[------------------------------------------------------------------]
[Stage]
Class=ScreenSplash
Fallback=CommonBlank
ScreenInitCommand=%function(s) Screens.Common.Init(s) Screens.Stage.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) Screens.Stage.Init(s) end
ScreenOnCommand=%Screens.Stage.On
HelpLuaCommand=%Screens.Stage.On
FirstUpdateCommand=Screens.Common.FirstUpdate(self) Screens.Stage.FirstUpdate(self)
ScreenFirstUpdateCommand=%Screens.Stage.FirstUpdate
ShowStage=@Bool[true]
NextScreen=@Branch.StageNext()
PrevScreen=@Branch.StageBack()
AllowStartToSkip=@Bool[false]
PrepareScreen=@Bool[true]
OverlayOnCommand=diffusealpha,0;linear,0.5;diffusealpha,1
StageX=
StageY=
#3.95:
MinimumLoadDelaySeconds=GetEnv("WorkoutMode") and 0 or stageSeconds
#sm5:
TimerStealth=@Bool[true]
ForceTimer=@Bool[true]
TimerSeconds=GetEnv("WorkoutMode") and 0 or stageSeconds

[------------------------------------------------------------------]
[Gameplay]
Class=@SM_VERSION==5 and "ScreenGameplayNormal" or "ScreenGameplay"
Fallback=CommonBlankNoBG
PlayMusic=@Bool[false]
ShowScoreInRave=@Bool[true]
#TimerSeconds=15
#ForceTimer=@Bool[true]
#TimerSeconds=-1
#ForceTimer=@Bool[false]
FailAfter30Misses=not GAMESTATE:IsEventMode()
#not GetSysConfig().Timer
BackGivesUp=@Bool[false]
StartGivesUp=@Bool[true]
#TickEarlySeconds is read on boot.
TickEarlySeconds=@assistTickOffset
SecondsBetweenComments=10
InitialBackgroundBrightness=1
LyricsDefaultColor=1,1,1,1
GivingUpGoesToPrevScreen=GetSysConfig().Timer
GivingUpGoesToNextScreen=not GetSysConfig().Timer
GiveUpText=@Languages[CurLanguage()].ScreenGameplay.GiveUp
GiveUpAbortedText=@Languages[CurLanguage()].ScreenGameplay.GiveUpAborted
ScreenInitCommand=%function(s) Screens.Common.Init(s) Screens.Gameplay.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) Screens.Gameplay.Init(s) TopScreen=s end
HelpOnCommand=playcommand,Lua;queuecommand,FirstUpdate
ScreenOnCommand=%Screens.Gameplay.On
HelpLuaCommand=%Screens.Gameplay.On
HelpAlarmMessageCommand=%Screens.Gameplay.Alarm
#Pause binding for notITG
HelpP1SelectPressInputMessageCommand=%Screens.Gameplay.Pause.SelectPressed
HelpP2SelectPressInputMessageCommand=%Screens.Gameplay.Pause.SelectPressed
HelpP1StartPressInputMessageCommand=%Screens.Gameplay.Pause.StartPressed
HelpP2StartPressInputMessageCommand=%Screens.Gameplay.Pause.StartPressed

HelpFirstUpdateCommand=%Screens.Gameplay.FirstUpdate
#FirstUpdateCommand doesn't seem to run
ScreenFirstUpdateCommand=%Screens.Gameplay.FirstUpdate
AllowOperatorMenuButton=@Bool[false]
PrevScreen=@Branch.GameplayBack()
NextScreen=@Branch.GameplayNext()
ShowEvaluationOnFail=@Bool[true]
#doesn't always work:
UseForcedModifiersInBeginner=@Bool[UseForcedModifiersInBeginner()]
ForcedModifiersInBeginner=@ForcedModifiersInBeginner()
OniGameOverP1OnCommand=%function(s) Screens.Gameplay.AfterModsSave(s,1) end
OniGameOverP2OnCommand=%function(s) Screens.Gameplay.AfterModsSave(s,2) end
#Die only runs when a LIFE_BATTERY lifebar depletes.
OniGameOverP1DieCommand=%function(s) end
OniGameOverP2DieCommand=%function(s) end
OniGameOverP1X=
OniGameOverP1Y=
OniGameOverP2X=
OniGameOverP2Y=
SongBackgroundOnCommand=draworder,-199
SongForegroundOnCommand=
#I don't think fade out does anything
MusicFadeOutSeconds=0
WaitForChildrenBeforeTweeningOut=@Bool[true]
ShowLifeMeterForDisabledPlayers=@Bool[false]
CompareScores=@Bool[false]
StopCourseEarly=@Bool[GetEnv("Workout") and true or GAMESTATE:GetPlayMode()==PLAY_MODE_ENDLESS or Player(1) and GAMESTATE:IsGoalComplete(pNum[1]) or Player(2) and GAMESTATE:IsGoalComplete(pNum[2]) and true or false]
StaticBGX=SCREEN_CENTER_X
StaticBGY=SCREEN_CENTER_Y
StageX=Metrics.Gameplay.StageXY[1]
StageY=Metrics.Gameplay.StageXY[2]
StageOnCommand=%function(s) s:visible(Bool[not GetSysConfig().Timer]) Tweens.Gameplay.Stage.On(s) s:settext(StageText()) end
StageNextCourseSongLoadedMessageCommand=%function(s) s:settext(StageText()) end
StageOffCommand=%Tweens.Gameplay.Stage.Off
#fades from this to the proper brightness
InitialBackgroundBrightnessRegular=1
InitialBackgroundBrightnessNonstop=1
InitialBackgroundBrightnessOni=1
InitialBackgroundBrightnessEndless=1
InitialBackgroundBrightnessBattle=1
InitialBackgroundBrightnessRave=1
#Top bar:
SongPositionMeterWidth=Metrics.Gameplay.SongProgressWidth
SongPositionMeterX=Metrics.Gameplay.SongProgressXY[1]
SongPositionMeterY=Metrics.Gameplay.SongProgressXY[2]
SongPositionMeterOnCommand=%Tweens.Gameplay.SongProgress.On
SongPositionMeterOffCommand=%Tweens.Gameplay.SongProgress.Off
DifficultyP1X=Metrics.Gameplay.DifficultyMeterX[1]
DifficultyP1Y=Metrics.Gameplay.DifficultyMeterY
DifficultyP1OnCommand=%function(s) Tweens.Gameplay.DifficultyMeter.On(s,1,false) end
DifficultyP1OffCommand=%function(s) Tweens.Gameplay.DifficultyMeter.Off(s,1,false) end
DifficultyP1ReverseX=Metrics.Gameplay.DifficultyMeterXReverse[1]
DifficultyP1ReverseY=Metrics.Gameplay.DifficultyMeterYReverse
DifficultyP1ReverseOnCommand=%function(s) Tweens.Gameplay.DifficultyMeter.On(s,1,true) end
DifficultyP1ReverseOffCommand=%function(s) Tweens.Gameplay.DifficultyMeter.Off(s,1,true) end
DifficultyP2X=Metrics.Gameplay.DifficultyMeterX[2]
DifficultyP2Y=Metrics.Gameplay.DifficultyMeterY
DifficultyP2OnCommand=%function(s) Tweens.Gameplay.DifficultyMeter.On(s,2,false) end
DifficultyP2OffCommand=%function(s) Tweens.Gameplay.DifficultyMeter.Off(s,2,false) end
DifficultyP2ReverseX=Metrics.Gameplay.DifficultyMeterXReverse[2]
DifficultyP2ReverseY=Metrics.Gameplay.DifficultyMeterYReverse
DifficultyP2ReverseOnCommand=%function(s) Tweens.Gameplay.DifficultyMeter.On(s,2,true) end
DifficultyP2ReverseOffCommand=%function(s) Tweens.Gameplay.DifficultyMeter.Off(s,2,true) end
DifficultyMeterP1X=Metrics.Gameplay.DifficultyMeterX[1]
DifficultyMeterP1Y=Metrics.Gameplay.DifficultyMeterY
DifficultyMeterP1OnCommand=%function(s) Tweens.Gameplay.DifficultyMeter.On(s,1,false) end
DifficultyMeterP1OffCommand=%function(s) Tweens.Gameplay.DifficultyMeter.Off(s,1,false) end
DifficultyMeterP1ReverseX=Metrics.Gameplay.DifficultyMeterXReverse[1]
DifficultyMeterP1ReverseY=Metrics.Gameplay.DifficultyMeterYReverse
DifficultyMeterP1ReverseOnCommand=%function(s) Tweens.Gameplay.DifficultyMeter.On(s,1,true) end
DifficultyMeterP1ReverseOffCommand=%function(s) Tweens.Gameplay.DifficultyMeter.Off(s,1,true) end
DifficultyMeterP2X=Metrics.Gameplay.DifficultyMeterX[2]
DifficultyMeterP2Y=Metrics.Gameplay.DifficultyMeterY
DifficultyMeterP2OnCommand=%function(s) Tweens.Gameplay.DifficultyMeter.On(s,2,false) end
DifficultyMeterP2OffCommand=%function(s) Tweens.Gameplay.DifficultyMeter.Off(s,2,false) end
DifficultyMeterP2ReverseX=Metrics.Gameplay.DifficultyMeterXReverse[2]
DifficultyMeterP2ReverseY=Metrics.Gameplay.DifficultyMeterYReverse
DifficultyMeterP2ReverseOnCommand=%function(s) Tweens.Gameplay.DifficultyMeter.On(s,2,true) end
DifficultyMeterP2ReverseOffCommand=%function(s) Tweens.Gameplay.DifficultyMeter.Off(s,2,true) end
ScoreP1X=PlayerX(1)
ScoreP1Y=Metrics.Gameplay.ScoreY
ScoreP1OnCommand=%function(s) Capture.ActorFrame.ApplyPNToChildren(s,1) Tweens.Gameplay.Score.On(s,1) end
ScoreP1OffCommand=%function(s) Tweens.Gameplay.Score.Off(s,1) end
ScoreP2X=PlayerX(2)
ScoreP2Y=Metrics.Gameplay.ScoreY
ScoreP2OnCommand=%function(s) Capture.ActorFrame.ApplyPNToChildren(s,2) Tweens.Gameplay.Score.On(s,2) end
ScoreP2OffCommand=%function(s) Tweens.Gameplay.Score.Off(s,2) end
# Center stats:
BPMDisplayX=Metrics.Gameplay.BPMXY[1]
BPMDisplayY=Metrics.Gameplay.BPMXY[2]
BPMDisplayOnCommand=%function(s) if GAMESTATE:PlayerUsingBothSides() or GetPref('SoloSingle') then s:visible(Bool[false]) end Tweens.Gameplay.BPM.On(s) s:playcommand("GameplayOn") end
BPMDisplayOffCommand=%Tweens.Gameplay.BPM.Off
#Reuse Maxcombo for the time remaining counter
MaxComboOnCommand=shadowlength,0;diffusecolor,#5cc9c9;playcommand,TweenOn;playcommand,CheckCenter;playcommand,CheckFeatures;playcommand,SetSeconds;effectclock,music
MaxComboTweenOnCommand=%Tweens.Gameplay.SongTimer.On
MaxComboSetSecondsCommand=%function(s) local len=tonumber(GetEnv('SongSeconds') or Song.MusicLengthSeconds and CurSong():MusicLengthSeconds()) if len and len>0 then s:aux(len/Env().SongMods.Rate) LuaEffect(s,"Update") else s:visible(Bool[false]) end end
#aux is the song length. on oITG, 
MaxComboNextCourseSongMessageCommand=aux,self:getaux()-(Song.MusicLengthSeconds and GAMESTATE:Env().NextSong:MusicLengthSeconds() or 0)/Env().SongMods.Rate
MaxComboUpdateCommand=%function(s) s:settext(string.sub(SecondsToMSSMsMs(s:getaux()-s:GetSecsIntoEffect()/Env().SongMods.Rate),1,-4)) end
#MaxComboUpdateCommand=%function(s) s:settext(SecondsToMSS(s:getaux()-s:GetSecsIntoEffect())) end
MaxComboCheckFeaturesCommand=visible,Bool[not (IsCourseMode() and not Song.MusicLengthSeconds and true) or false]
MaxComboCheckCenter=%function(s) if GAMESTATE:PlayerUsingBothSides() or GAMESTATE:GetNumPlayersEnabled()==1 and GetPref('SoloSingle') then s:visible(Bool[false]) end end
MaxComboOffCommand=%Tweens.Gameplay.SongTimer.Off
MaxComboX=Metrics.Gameplay.SongTimerXY[1]
MaxComboY=Metrics.Gameplay.SongTimerXY[2]
SongOptionsX=Metrics.Gameplay.SongOptionsXY[1]
SongOptionsY=Metrics.Gameplay.SongOptionsXY[2]
SongOptionsOnCommand=%Tweens.Gameplay.SongOptions.On
SongOptionsOffCommand=%Tweens.Gameplay.SongOptions.Off
# lyrics (note: no OnCommand):
LyricsX=@Metrics.Gameplay.LyricText.NormalXY[1]
LyricsY=@Metrics.Gameplay.LyricText.NormalXY[2]
LyricsReverseX=@Metrics.Gameplay.LyricText.ReverseXY[1]
LyricsReverseY=@Metrics.Gameplay.LyricText.ReverseXY[2]
LyricsOneReverseX=@Metrics.Gameplay.LyricText.OneReverseXY[1]
LyricsOneReverseY=@Metrics.Gameplay.LyricText.OneReverseXY[2]
LifeFrameX=Metrics.Gameplay.LifeFrameXY[1]
LifeFrameY=Metrics.Gameplay.LifeFrameXY[2]
LifeFrameOnCommand=%function(s) Screens.Gameplay.Ready() Tweens.Gameplay.LifeFrame.On(s) end
LifeFrameSetCommand=%function(s) LuaEffect(s,"Update") end
LifeFrameUpdateCommand=%Screens.Gameplay.Update
LifeFrameOffCommand=%function(s) Tweens.Gameplay.LifeFrame.Off(s) Screens.Gameplay.Off() end
ScoreFrameX=Metrics.Gameplay.ScoreFrameXY[1]
ScoreFrameY=Metrics.Gameplay.ScoreFrameXY[2]
ScoreFrameOnCommand=%Tweens.Gameplay.ScoreFrame.On
ScoreFrameOffCommand=%Tweens.Gameplay.ScoreFrame.Off
# lifebars:
LifeP1X=Metrics.Gameplay.LifeX[1]
LifeP1Y=Metrics.Gameplay.LifeY
LifeP1OnCommand=%function(s) Capture.Lifebar.On(s,1) LuaEffect(s,"Update") Tweens.Gameplay.Life.On(s,1) end
LifeP1UpdateCommand=%function(s) Tweens.Gameplay.Life.Update(s,1) end
LifeP1DangerP1ShowMessageCommand=%function(s) Tweens.Gameplay.Life.Danger.Show(s,1) end
LifeP1DangerP1HideMessageCommand=%function(s) Tweens.Gameplay.Life.Danger.Hide(s,1) end
LifeP1DangerP1RecoverMessageCommand=%function(s) Tweens.Gameplay.Life.Danger.Recover(s,1) end
LifeP1DeathP1ShowMessageCommand=%function(s) Tweens.Gameplay.Life.ShowDeath(s,1) end
LifeP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
LifeP1OffCommand=%function(s) Capture.Lifebar.Off(s,1) Tweens.Gameplay.Life.Off(s,1) end
LifeP2X=Metrics.Gameplay.LifeX[2]
LifeP2Y=Metrics.Gameplay.LifeY
LifeP2OnCommand=%function(s) Capture.Lifebar.On(s,2) LuaEffect(s,"Update") Tweens.Gameplay.Life.On(s,2) end
LifeP2UpdateCommand=%function(s) Tweens.Gameplay.Life.Update(s,2) end
LifeP2DangerP2ShowMessageCommand=%function(s) Tweens.Gameplay.Life.Danger.Show(s,2) end
LifeP2DangerP2HideMessageCommand=%function(s) Tweens.Gameplay.Life.Danger.Hide(s,2) end
LifeP2DangerP2RecoverMessageCommand=%function(s) Tweens.Gameplay.Life.Danger.Recover(s,2) end
LifeP2DeathP2ShowMessageCommand=%function(s) Tweens.Gameplay.Life.ShowDeath(s,2) end
LifeP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
LifeP2OffCommand=%function(s) Capture.Lifebar.Off(s,2) Tweens.Gameplay.Life.Off(s,2) end
# playfield:
PlayerP1OnCommand=%function(s) Capture.Player.On(s,1) end
PlayerP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
PlayerP1OffCommand=%function(s) Capture.Player.Off(1) end
PlayerP2OnCommand=%function(s) Capture.Player.On(s,2) end
PlayerP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
PlayerP2OffCommand=%function(s) Capture.Player.Off(2) end
PlayerP1OnePlayerOneSideX=PlayerX(1)
PlayerP2OnePlayerOneSideX=PlayerX(2)
PlayerP1TwoPlayersTwoSidesX=PlayerX(1)
PlayerP2TwoPlayersTwoSidesX=PlayerX(2)
PlayerP1OnePlayerTwoSidesX=PlayerX(1)
PlayerP2OnePlayerTwoSidesX=PlayerX(2)
PlayerType=PlayerGameplay
# Net board:
ScoreboardC1P1X=@Metrics.Gameplay.Scoreboard.NamesX[1]
ScoreboardC1P1Y=@Metrics.Gameplay.Scoreboard.NamesY
ScoreboardC1P1OnCommand=%function(s) Tweens.Gameplay.Scoreboard.Names.On(s,1) end
ScoreboardC1P1OffCommand=%function(s) Tweens.Gameplay.Scoreboard.Names.Off(s,1) end
ScoreboardC2P1X=@Metrics.Gameplay.Scoreboard.ComboX[1]
ScoreboardC2P1Y=@Metrics.Gameplay.Scoreboard.ComboY
ScoreboardC2P1OnCommand=%function(s) Tweens.Gameplay.Scoreboard.Combo.On(s,1) end
ScoreboardC2P1OffCommand=%function(s) Tweens.Gameplay.Scoreboard.Combo.Off(s,1) end
ScoreboardC3P1X=@Metrics.Gameplay.Scoreboard.GradeX[1]
ScoreboardC3P1Y=@Metrics.Gameplay.Scoreboard.GradeY
ScoreboardC3P1OnCommand=%function(s) Tweens.Gameplay.Scoreboard.Grade.On(s,1) end
ScoreboardC3P1OffCommand=%function(s) Tweens.Gameplay.Scoreboard.Grade.Off(s,1) end
ScoreboardC1P2X=@Metrics.Gameplay.Scoreboard.NamesX[1]
ScoreboardC1P2Y=@Metrics.Gameplay.Scoreboard.NamesY
ScoreboardC1P2OnCommand=%function(s) Tweens.Gameplay.Scoreboard.Names.On(s,1) end
ScoreboardC1P2OffCommand=%function(s) Tweens.Gameplay.Scoreboard.Names.Off(s,1) end
ScoreboardC2P2X=@Metrics.Gameplay.Scoreboard.ComboX[1]
ScoreboardC2P2Y=@Metrics.Gameplay.Scoreboard.ComboY
ScoreboardC2P2OnCommand=%function(s) Tweens.Gameplay.Scoreboard.Combo.On(s,1) end
ScoreboardC2P2OffCommand=%function(s) Tweens.Gameplay.Scoreboard.Combo.Off(s,1) end
ScoreboardC3P2X=@Metrics.Gameplay.Scoreboard.GradeX[1]
ScoreboardC3P2Y=@Metrics.Gameplay.Scoreboard.GradeY
ScoreboardC3P2OnCommand=%function(s) Tweens.Gameplay.Scoreboard.Grade.On(s,1) end
ScoreboardC3P2OffCommand=%function(s) Tweens.Gameplay.Scoreboard.Grade.Off(s,1) end
StageFrameX=Metrics.Gameplay.StageFrameXY[1]
StageFrameY=Metrics.Gameplay.StageFrameXY[2]
StageFrameOnCommand=%Tweens.Gameplay.StageFrame.On
StageFrameOffCommand=%Tweens.Gameplay.StageFrame.Off
# CourseSongNumber is the sprite, SongNumberPn is the text
CourseSongNumberX=Metrics.Gameplay.CourseStageSpriteXY[1]
CourseSongNumberY=Metrics.Gameplay.CourseStageSpriteXY[2]
CourseSongNumberOnCommand=%function(s) Tweens.Gameplay.CourseStageSprite.On(s) end
CourseSongNumberOffCommand=%function(s) Tweens.Gameplay.CourseStageSprite.Off(s) end
CourseSongNumberChangeInCommand=%function(s) Tweens.Gameplay.CourseStageSprite.ChangeIn(s) end
CourseSongNumberChangeOutCommand=%function(s) Screens.Gameplay.SongFinished() Tweens.Gameplay.CourseStageSprite.ChangeOut(s) end
CourseSongNumberNextCourseSongMessageCommand=%function(s) Screens.Gameplay.BeforeNextSong() end
CourseSongNumberNextCourseSongLoadedMessageCommand=%function(s) Screens.Gameplay.NextSong() end
SongNumberP1X=Metrics.Gameplay.CourseStageTextX[1]
SongNumberP1Y=Metrics.Gameplay.CourseStageTextY
SongNumberP1OnCommand=%function(s) Tweens.Gameplay.CourseStageText.On(s,1) end
SongNumberP1OffCommand=%function(s) Tweens.Gameplay.CourseStageText.Off(s,1) end
SongNumberP1CurrentSongChangedMessageCommand=%function(s) s:settext("") end
SongNumberP2X=Metrics.Gameplay.CourseStageTextX[2]
SongNumberP2Y=Metrics.Gameplay.CourseStageTextY
SongNumberP2OnCommand=%function(s) Tweens.Gameplay.CourseStageText.On(s,2) end
SongNumberP2OffCommand=%function(s) Tweens.Gameplay.CourseStageText.Off(s,2) end
SongNumberP2CurrentSongChangedMessageCommand=%function(s) s:settext("") end
StepsDescriptionP1X=Metrics.Gameplay.StepsDescriptionX[1]
StepsDescriptionP1Y=Metrics.Gameplay.StepsDescriptionY
StepsDescriptionP1OnCommand=%function(s) Tweens.Gameplay.StepsDescription.On(s,1) end
StepsDescriptionP1OffCommand=%function(s) Tweens.Gameplay.StepsDescription.Off(s,1) end
StepsDescriptionP2X=Metrics.Gameplay.StepsDescriptionX[2]
StepsDescriptionP2Y=Metrics.Gameplay.StepsDescriptionY
StepsDescriptionP2OnCommand=%function(s) Tweens.Gameplay.StepsDescription.On(s,2) end
StepsDescriptionP2OffCommand=%function(s) Tweens.Gameplay.StepsDescription.Off(s,2) end
PlayerOptionsP1X=Metrics.Gameplay.ModsX[1]
PlayerOptionsP1Y=Metrics.Gameplay.ModsY
PlayerOptionsP1OnCommand=visible,Bool[false]
#%function(s) Tweens.Gameplay.Mods.On(s,1) Ghost.InitText(s,1) LuaEffect(s,"Update") end
#PlayerOptionsP1UpdateCommand=%function(s) Ghost.UpdateText(s,1) end
PlayerOptionsP1OffCommand=
#PlayerOptionsP1OffCommand=%function(s) Tweens.Gameplay.Mods.Off(s,1) end
PlayerOptionsP2X=Metrics.Gameplay.ModsX[2]
PlayerOptionsP2Y=Metrics.Gameplay.ModsY
PlayerOptionsP2OnCommand=visible,Bool[false]
#%function(s) Tweens.Gameplay.Mods.On(s,2) Ghost.InitText(s,2) LuaEffect(s,"Update") end
#PlayerOptionsP2UpdateCommand=%function(s) Ghost.UpdateText(s,2) end
PlayerOptionsP2OffCommand=
#PlayerOptionsP2OffCommand=%function(s) Tweens.Gameplay.Mods.Off(s,2) end
ActiveAttackListP1X=Metrics.Gameplay.ActiveAttackListX[1]
ActiveAttackListP1Y=Metrics.Gameplay.ActiveAttackListY
ActiveAttackListP1OnCommand=%function(s) Tweens.Gameplay.ActiveAttackList.On(s,1) end
ActiveAttackListP1OffCommand=%function(s) Tweens.Gameplay.ActiveAttackList.Off(s,1) end
ActiveAttackListP2X=Metrics.Gameplay.ActiveAttackListX[2]
ActiveAttackListP2Y=Metrics.Gameplay.ActiveAttackListY
ActiveAttackListP2OnCommand=%function(s) Tweens.Gameplay.ActiveAttackList.On(s,2) end
ActiveAttackListP2OffCommand=%function(s) Tweens.Gameplay.ActiveAttackList.Off(s,2) end
# "Press [] to quit" text
DebugX=SCREEN_CENTER_X
DebugY=SCREEN_CENTER_Y
SongBackgroundCaptureCommand=%Capture.ActorFrame.CaptureInternal
SongForegroundCaptureCommand=%Capture.ActorFrame.CaptureInternal
StaticBGCaptureCommand=%Capture.ActorFrame.CaptureInternal
PlayerP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
PlayerP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
OniGameOverP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
OniGameOverP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
LifeFrameCaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreFrameCaptureCommand=%Capture.ActorFrame.CaptureInternal
CombinedLifeCaptureCommand=%Capture.ActorFrame.CaptureInternal
LifeP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
LifeP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreboardC1P1CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreboardC2P1CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreboardC3P1CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreboardC1P2CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreboardC2P2CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreboardC3P2CaptureCommand=%Capture.ActorFrame.CaptureInternal
MaxComboCaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
SecondaryScoreP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
SecondaryScoreP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
CourseSongNumberCaptureCommand=%Capture.ActorFrame.CaptureInternal
SongNumberP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
SongNumberP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
StepsDescriptionP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
StepsDescriptionP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
StageFrameCaptureCommand=%Capture.ActorFrame.CaptureInternal
PlayerOptionsP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
PlayerOptionsP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
SongOptionsCaptureCommand=%Capture.ActorFrame.CaptureInternal
ActiveAttackListP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
ActiveAttackListP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
BPMDisplayCaptureCommand=%Capture.ActorFrame.CaptureInternal
DebugCaptureCommand=%Capture.ActorFrame.CaptureInternal
SurviveTimeCaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyMeterP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyMeterP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyP1ReverseCaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyP2ReverseCaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyMeterP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyMeterP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyMeterP1ReverseCaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyMeterP2ReverseCaptureCommand=%Capture.ActorFrame.CaptureInternal
LyricsCaptureCommand=%Capture.ActorFrame.CaptureInternal
LyricsReverseCaptureCommand=%Capture.ActorFrame.CaptureInternal
LyricsOneReverseCaptureCommand=%Capture.ActorFrame.CaptureInternal

# true means jumps are +1 (not +2):
ComboIsPerRow=@Bool[false]
# Combo logic is hardcoded in Player.cpp:1500-1522 - Player::HandleTapRowScore - goods and below break combo.
# Changing this doesn't actually make any difference.
# So I guess that's FA+ out the window then if I want jumps as 2.
MinScoreToContinueCombo=@TNS_GREAT
MinScoreToMaintainCombo=@TNS_GREAT

[--]
[Background]
#All evaluated on theme load:
LeftEdge=SCREEN_LEFT
TopEdge=SCREEN_TOP
RightEdge=SCREEN_RIGHT
BottomEdge=SCREEN_BOTTOM
BlinkDangerAll=@Bool[false]
DangerAllIsOpaque=@Bool[false]

# brightnesses: p1, p2, fade (all quads)
# positions are: p1, fade (slit in middle), p2
BrightnessFadeCommand=stoptweening;linear,0.5;clearzbuffer,Bool[true]
#BrightnessFadeCommand=%function(s) local pn=math.mod(GetScreen():getaux()+1,3) GetScreen():aux(pn) s:aux(pn) if pn==0 or not Player(pn) then s:hidden(Bool[true]) s:clearzbuffer(Bool[true]) else s:x(PlayerX(pn)) s:zoomto(64*(2+StepsTypesNumLanes[CurSteps(pn):GetStepsType()+1]),SCREEN_HEIGHT) s:fadeleft(0.075) s:faderight(0.075) end s:stoptweening() s:linear(0.5) end
ClampOutputPercent=0

#PlayerUsingBothSides() and 10 or 5

[Judgment]
# Odd/even gets run first.
MarvelousOddCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,0) end
PerfectOddCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,-1) end
GreatOddCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,-2) end
GoodOddCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,-3) end
BooOddCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,-4) end
MissOddCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,-5) end
MarvelousEvenCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,0) end
PerfectEvenCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,1) end
GreatEvenCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,2) end
GoodEvenCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,3) end
BooEvenCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,4) end
MissEvenCommand=%function(s) Tweens.Gameplay.Judgment.Tilt(s,5) end
MarvelousCommand=%function(s) JudgmentCommand(s,1) end
PerfectCommand=%function(s) JudgmentCommand(s,2) end
GreatCommand=%function(s) JudgmentCommand(s,3) end
GoodCommand=%function(s) JudgmentCommand(s,4) end
BooCommand=%function(s) JudgmentCommand(s,5) end
MissCommand=%function(s) JudgmentCommand(s,6) end

[HoldJudgment]
OKOddCommand=%function(s) Tweens.Gameplay.HoldJudgment.Tilt(s,0) end
NGOddCommand=%function(s) Tweens.Gameplay.HoldJudgment.Tilt(s,-1) end
OKEvenCommand=%function(s) Tweens.Gameplay.HoldJudgment.Tilt(s,0) end
NGEvenCommand=%function(s) Tweens.Gameplay.HoldJudgment.Tilt(s,1) end
OKCommand=%function(s) HoldCommand(s,7) end
NGCommand=%function(s) HoldCommand(s,8) end

[Combo]
ShowComboAt=1
ShowMissCombo=1
NumberMaxZoom=@comboZoom.Max
NumberMaxZoomAt=@comboZoom.MaxZoomCombo
NumberMinZoom=@comboZoom.Min
NumberX=0
# take number height into account, remember the number is vertalign,bottom
NumberY=16
LabelX=0
LabelY=@comboLabelOffsetY
LabelOnCommand=%JudgeComboInit.Label
NumberOnCommand=%JudgeComboInit.Number
PulseCommand=%ComboPulse
FullComboMarvelousesCommand=%function(s) MidpointComboColour(s,1) end
FullComboPerfectsCommand=%function(s) MidpointComboColour(s,2) end
FullComboGreatsCommand=%function(s) MidpointComboColour(s,3) end
FullComboBrokenCommand=%function(s) MidpointComboColour(s,4) end
#shut oITG up:
MissComboCommand=

[--]
[ScoreDisplayLifeTime]
FrameOnCommand=visible,Bool[false]
DeltaSecondsOnCommand=%function(s) Ghost.InitScore(s,s:getaux()) Tweens.Gameplay.LifeTime.Delta.On(s) end
TimeRemainingOnCommand=visible,Bool[false]
#%Tweens.Gameplay.LifeTime.TimerOn
DeltaSecondsGainLifeCommand=%Tweens.Gameplay.LifeTime.Delta.Ready
DeltaSecondsMarvelousCommand=%function(s) Ghost.LifeTimeStep(s:getaux(),1) Tweens.Gameplay.LifeTime.Delta.Judge(s,1) end
DeltaSecondsPerfectCommand=%function(s) Ghost.LifeTimeStep(s:getaux(),2) Tweens.Gameplay.LifeTime.Delta.Judge(s,2) end
DeltaSecondsGreatCommand=%function(s) Ghost.LifeTimeStep(s:getaux(),3) Tweens.Gameplay.LifeTime.Delta.Judge(s,3) end
DeltaSecondsGoodCommand=%function(s) Ghost.LifeTimeStep(s:getaux(),4) Tweens.Gameplay.LifeTime.Delta.Judge(s,4) end
DeltaSecondsBooCommand=%function(s) Ghost.LifeTimeStep(s:getaux(),5) Tweens.Gameplay.LifeTime.Delta.Judge(s,5) end
DeltaSecondsMissCommand=%function(s) Ghost.LifeTimeStep(s:getaux(),6) Tweens.Gameplay.LifeTime.Delta.Judge(s,6) end
DeltaSecondsOKCommand=%function(s) Ghost.LifeTimeStep(s:getaux(),7) Tweens.Gameplay.LifeTime.Delta.Judge(s,7) end
DeltaSecondsNGCommand=%function(s) Ghost.LifeTimeStep(s:getaux(),8) Tweens.Gameplay.LifeTime.Delta.Judge(s,8) end
DeltaSecondsHitMineCommand=%function(s) Ghost.LifeTimeStep(s:getaux(),9) Tweens.Gameplay.LifeTime.Delta.Judge(s,9) end
DeltaSecondsAvoidMineCommand=
DeltaSecondsNoneCommand=

[ScoreDisplayPercentage Percent]
Fallback=PercentageDisplay
#in ScreenGameplay. Percent gets recalculated every frame by the game

#Normally this is used for DP capture for ghostdata, but it's always showing percentage now since we aren't using ghostdata and thus don't need to.
DancePointsDigits=@(function() Env().UseDP=false return 1 end)()
#DancePointsDigits=@(function() local pn=Player(1) and 1 or Player(2) and 2 local usedp=not IsDemonstration() and pn and (stepsStats and stepsStats[pn] and stepsStats[pn].MaxDP or 0)>0 Env().UseDP=usedp SetPref("DancePointsForOni",usedp) return 1 end)()
PercentP1X=12
PercentP1OnCommand=shadowlength,0;diffuse,1,1,1,1;zoom,2;aux,1;playcommand,SetUpdate
PercentP1SetUpdateCommand=%function(s) local pn=s:getaux() Ghost.InitScore(s,pn) LuaEffect(s,"Update") end
PercentP1UpdateCommand=%PollHitMine
PercentP2X=12
PercentP2OnCommand=shadowlength,0;diffuse,1,1,1,1;zoom,2;aux,2;playcommand,SetUpdate
PercentP2SetUpdateCommand=%function(s) local pn=s:getaux() Ghost.InitScore(s,pn) LuaEffect(s,"Update") end
PercentP2UpdateCommand=%PollHitMine
DancePointsP1X=12
DancePointsP1OnCommand=shadowlength,0;diffuse,1,1,1,1;zoom,2;aux,1;playcommand,SetUpdate
DancePointsP1SetUpdateCommand=%function(s) local pn=s:getaux() Ghost.InitScore(s,pn) LuaEffect(s,"Update") end
DancePointsP1UpdateCommand=%PollHitMine
DancePointsP1OffCommand=%function(s) end
DancePointsP2X=12
DancePointsP2OnCommand=shadowlength,0;diffuse,1,1,1,1;zoom,2;aux,2;playcommand,SetUpdate
DancePointsP2SetUpdateCommand=%function(s) local pn=s:getaux() Ghost.InitScore(s,pn) LuaEffect(s,"Update") end
DancePointsP2UpdateCommand=%PollHitMine
DancePointsP2OffCommand=%function(s) end

[Gameplay DifficultyMeterP1]
Fallback=DifficultyMeter
MeterOnCommand=%Tweens.Gameplay.DifficultyMeterText.On
[Gameplay DifficultyMeterP2]
Fallback=Gameplay DifficultyMeterP1

[--]
[PlayerGameplay]
Fallback=PlayerCommon
JudgmentOnCommand=%JudgeComboInit.Judge
ComboOnCommand=%JudgeComboInit.Combo

#Edit screen is hardcoded to load from "Player" instead of a PlayerType= metric.
[Player]
Fallback=PlayerCommon
JudgmentOnCommand=%JudgeComboInit.Edit.Judge
ComboOnCommand=%JudgeComboInit.Edit.Combo

[PlayerCommon]
ReceptorArrowsYStandard=@receptorArrowsY.Normal
ReceptorArrowsYReverse=@receptorArrowsY.Reverse
JudgmentXOffsetOneSideP1=0
JudgmentXOffsetOneSideP2=0
JudgmentXOffsetBothSides=0
JudgmentY=@JudgeY.Normal
JudgmentYReverse=@JudgeY.Reverse
HoldJudgmentYStandard=@holdJudgeY.Normal
HoldJudgmentYReverse=@holdJudgeY.Reverse
ComboXOffsetOneSideP1=0
ComboXOffsetOneSideP2=0
ComboXOffsetBothSides=0
ComboY=@comboY.Normal
ComboYReverse=@comboY.Reverse
BrightGhostComboThreshold=100
TapJudgmentsUnderField=@Bool[false]
HoldJudgmentsUnderField=@Bool[true]
StartDrawingAtPixels=@notefieldDrawY.Top
StopDrawingAtPixels=@notefieldDrawY.Bottom
JudgmentCenteredAddY=@JudgeY.NormalCenteredOffset
JudgmentCenteredAddYReverse=@JudgeY.ReverseCenteredOffset
ComboCenteredAddY=@comboY.NormalCenteredOffset
ComboCenteredAddYReverse=@comboY.ReverseCenteredOffset
MaxProTimingError=
# AttackDisplay is only used in battle and rave (ie, not in this theme)
AttackDisplayXOffsetOneSideP1=
AttackDisplayXOffsetOneSideP2=
AttackDisplayXOffsetBothSides=
AttackDisplayY=
AttackDisplayYReverse=
ComboCaptureCommand=%Capture.ActorFrame.CaptureInternal
JudgmentCaptureCommand=%Capture.ActorFrame.CaptureInternal

[LifeMeterBar]
#this gets rotated -90 deg in the theme
MeterWidth=@lifebarHeight
MeterHeight=@lifebarWidth
DangerThreshold=@lifebarDangerThreshold
NumChambers=1
NumStrips=1
StreamNormalOnCommand=%Capture.Lifebar.Stream.Normal
StreamHotOnCommand=%Capture.Lifebar.Stream.Hot
StreamPassingOnCommand=
InitialValue=@lifebarInitialFill()

[LifeMeterTime]
Fallback=LifeMeterBar

[LifeMeterBattery Percent]
# Hide the battery bar percentage.
Fallback=ScoreDisplayPercentage Percent
PercentP1OnCommand=zoom,0
PercentP2OnCommand=zoom,0
DancePointsP1OnCommand=zoom,0
DancePointsP2OnCommand=zoom,0

[--]
[BeginnerHelper]
#(ripped from fallback) - All X,Y coordinates are relative to the screen center.
HelperX=0
HelperY=80
Player1_X=-125
Player2_X=125
PlayerAngle=40
DancePadAngle=36

[DancingCharacters]
#(ripped from fallback) - 2D Character X/Y positions in relation to the center of the screen
2DCharacterXP1=-220
2DCharacterYP1=0
2DCharacterXP2=220
2DCharacterYP2=0

[SaveSync]
Class=ScreenSaveSync
Fallback=Prompt
NextScreen=@Branch.AfterSaveSync()

[SaveSyncBack]
Fallback=SaveSync
NextScreen=@Branch.AfterSaveSyncBack()

[------------------------------------------------------------------]
[Evaluation]
Fallback=Common
WaitForChildrenBeforeTweeningOut=@Bool[false]
Class=ScreenEvaluation
ScreenInitCommand=%function(s) Screens.Common.Init(s) Capture.Evaluation.Init(s) Screens.Evaluation.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) Capture.Evaluation.Init(s) Screens.Evaluation.Init(s) end
ScreenOnCommand=%Screens.Evaluation.On
HelpLuaCommand=%Screens.Evaluation.On
FirstUpdateCommand=Screens.Common.FirstUpdate(self) Screens.Evaluation.FirstUpdate(self)
ScreenFirstUpdateCommand=%Screens.Evaluation.FirstUpdate
HelpAlarmMessageCommand=%Screens.Evaluation.Alarm
FailedScreen=@Branch.EvaluationNext()
NextScreen=@Branch.EvaluationNext()
EndScreen=@Branch.EvaluationNext()
CheerDelaySeconds=1
FailedSoundTime=0
PassedSoundTime=0
# Must "sequence sounds" be used to play a row of sounds at once after/before the pass/fail cheer?
NumSequenceSounds=0
#NumSequenceSounds=@(function() Env().Digits={} ForeachPlayer(function(pn) local score=tostring(CurScore[pn]) for i=1,string.len(score) do table.insert(Env().Digits,score[i]) end end) return table.getn(Env().Digits) end)()
#SoundSeqTime1=@(function() return 0.3 end)()
#SoundSeqName1=@(function() local curdigit=Env().Digits[table.getn(Env().Digits)] return tonumber(curdigit) and "../Other/Brandon/"..curdigit or "Common invalid" end)()
#local maxdp=(stepsStats and stepsStats[pn] and stepsStats[pn].MaxDP or 1) return FormatPercentScore(CurScore[pn]/maxdp)
PlayerOptionsSeparator=, 
MaxComboNumDigits=5
SpinGrades=@Bool[false]
TimerSeconds=MenuTimer.Seconds(Metrics.Evaluation.MenuTimer)
NoMarvelousShiftUp=0
HelpText=@join("\n",Languages[CurLanguage()].ScreenEvaluation[IsAnyPlayerUsingMemoryCard() and "HelpTipsUSB" or "HelpTips"])
StageX=Metrics.Evaluation.StageXY[1]
StageY=Metrics.Evaluation.StageXY[2]
StageOnCommand=%function(s) s:visible(Bool[not GetSysConfig().Timer]) Tweens.Evaluation.Stage.On(s) s:settext(StageText()) end
#TEST: experimental:
StageCurrentSongChangedMessageCommand=%function(s) s:settext(StageText()) end
StageCurrentCourseChangedMessageCommand=%function(s) s:settext(StageText()) end
StageOffCommand=%Tweens.Evaluation.Stage.Off
#Banner pane:
BannerWidth=Metrics.Evaluation.BannerSize[1]
BannerHeight=Metrics.Evaluation.BannerSize[2]
LargeBannerX=Metrics.Evaluation.BannerXY[1]
LargeBannerY=Metrics.Evaluation.BannerXY[2]
LargeBannerOnCommand=%function(s) s:draworder(2) Tweens.Evaluation.Banner.On(s) end
LargeBannerOffCommand=%Tweens.Evaluation.Banner.Off
LargeBannerFrameX=Metrics.Evaluation.BannerXY[1]
LargeBannerFrameY=Metrics.Evaluation.BannerXY[2]
LargeBannerFrameOnCommand=%Tweens.Evaluation.BannerFrame.On
LargeBannerFrameOffCommand=%Tweens.Evaluation.BannerFrame.Off
#Score pane:
PercentFrameP1X=Metrics.Evaluation.PercentFrameX[1]
PercentFrameP1Y=Metrics.Evaluation.PercentFrameY
PercentFrameP1OnCommand=%function(s) Tweens.Evaluation.PercentFrame.On(s,1) end
PercentFrameP1OffCommand=%function(s) Tweens.Evaluation.PercentFrame.Off(s,1) end
PercentFrameP2X=Metrics.Evaluation.PercentFrameX[2]
PercentFrameP2Y=Metrics.Evaluation.PercentFrameY
PercentFrameP2OnCommand=%function(s) Tweens.Evaluation.PercentFrame.On(s,2) end
PercentFrameP2OffCommand=%function(s) Tweens.Evaluation.PercentFrame.Off(s,2) end
PercentP1X=Metrics.Evaluation.PercentX[1]
PercentP1Y=Metrics.Evaluation.PercentY
PercentP1OnCommand=%function(s) Tweens.Evaluation.Percent.On(s,1) end
PercentP1OffCommand=%function(s) Tweens.Evaluation.Percent.Off(s,1) end
PercentP2X=Metrics.Evaluation.PercentX[2]
PercentP2Y=Metrics.Evaluation.PercentY
PercentP2OnCommand=%function(s) Tweens.Evaluation.Percent.On(s,2) end
PercentP2OffCommand=%function(s) Tweens.Evaluation.Percent.Off(s,2) end
DisqualifiedP1X=Metrics.Evaluation.DQX[1]
DisqualifiedP1Y=Metrics.Evaluation.DQY
DisqualifiedP1OnCommand=%function(s) Capture.Evaluation.Song.DQ(s,1) Tweens.Evaluation.DQ.On(s,1) end
DisqualifiedP1OffCommand=%function(s) Tweens.Evaluation.DQ.Off(s,1) end
DisqualifiedP2X=Metrics.Evaluation.DQX[2]
DisqualifiedP2Y=Metrics.Evaluation.DQY
DisqualifiedP2OnCommand=%function(s) Capture.Evaluation.Song.DQ(s,2) Tweens.Evaluation.DQ.On(s,2) end
DisqualifiedP2OffCommand=%function(s) Tweens.Evaluation.DQ.Off(s,2) end
MachineRecordP1X=Metrics.Evaluation.Record.MachineX[1]
MachineRecordP1Y=Metrics.Evaluation.Record.MachineY
MachineRecordP1OnCommand=%function(s) Tweens.Evaluation.Record.Machine.On(s,1) end
MachineRecordP1OffCommand=%function(s) Tweens.Evaluation.Record.Machine.Off(s,1) end
MachineRecordP2X=Metrics.Evaluation.Record.MachineX[2]
MachineRecordP2Y=Metrics.Evaluation.Record.MachineY
MachineRecordP2OnCommand=%function(s) Tweens.Evaluation.Record.Machine.On(s,2) end
MachineRecordP2OffCommand=%function(s) Tweens.Evaluation.Record.Machine.Off(s,2) end
PersonalRecordP1X=Metrics.Evaluation.Record.PersonalX[1]
PersonalRecordP1Y=Metrics.Evaluation.Record.PersonalY
PersonalRecordP1OnCommand=%function(s) Tweens.Evaluation.Record.Personal.On(s,1) end
PersonalRecordP1OffCommand=%function(s) Tweens.Evaluation.Record.Personal.Off(s,1) end
PersonalRecordP2X=Metrics.Evaluation.Record.PersonalX[2]
PersonalRecordP2Y=Metrics.Evaluation.Record.PersonalY
PersonalRecordP2OnCommand=%function(s) Tweens.Evaluation.Record.Personal.On(s,2) end
PersonalRecordP2OffCommand=%function(s) Tweens.Evaluation.Record.Personal.Off(s,2) end
#Player pane:
DifficultyIconP1X=Metrics.Evaluation.MeterX[1]
DifficultyIconP1Y=Metrics.Evaluation.MeterY
DifficultyIconP1OnCommand=%function(s) Tweens.Evaluation.Meter.On(s,1) end
DifficultyIconP1OffCommand=%function(s) Tweens.Evaluation.Meter.Off(s,1) end
DifficultyIconP2X=Metrics.Evaluation.MeterX[2]
DifficultyIconP2Y=Metrics.Evaluation.MeterY
DifficultyIconP2OnCommand=%function(s) Tweens.Evaluation.Meter.On(s,2) end
DifficultyIconP2OffCommand=%function(s) Tweens.Evaluation.Meter.Off(s,2) end
DifficultyMeterP1X=Metrics.Evaluation.MeterX[1]
DifficultyMeterP1Y=Metrics.Evaluation.MeterY
DifficultyMeterP1OnCommand=%function(s) Screens.Evaluation.AfterSave(1) Tweens.Evaluation.Meter.On(s,1) end
DifficultyMeterP1OffCommand=%function(s) Tweens.Evaluation.Meter.Off(s,1) end
DifficultyMeterP2X=Metrics.Evaluation.MeterX[2]
DifficultyMeterP2Y=Metrics.Evaluation.MeterY
DifficultyMeterP2OnCommand=%function(s) Screens.Evaluation.AfterSave(2) Tweens.Evaluation.Meter.On(s,2) end
DifficultyMeterP2OffCommand=%function(s) Tweens.Evaluation.Meter.Off(s,2) end
MarvelousNumberP1X=Metrics.Evaluation.JudgeNumbersX[1]
MarvelousNumberP1Y=EvaluationJudgeYPos(1)
MarvelousNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Marvelous(s,1) Tweens.Evaluation.Judge.On(s,1,1) end
MarvelousNumberP1OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,1,1) end
MarvelousNumberP2X=Metrics.Evaluation.JudgeNumbersX[2]
MarvelousNumberP2Y=EvaluationJudgeYPos(1)
MarvelousNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Marvelous(s,2) Tweens.Evaluation.Judge.On(s,2,1) end
MarvelousNumberP2OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,2,1) end
PerfectNumberP1X=Metrics.Evaluation.JudgeNumbersX[1]
PerfectNumberP1Y=EvaluationJudgeYPos(2)
PerfectNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Perfect(s,1) Tweens.Evaluation.Judge.On(s,1,2) end
PerfectNumberP1OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,1,2) end
PerfectNumberP2X=Metrics.Evaluation.JudgeNumbersX[2]
PerfectNumberP2Y=EvaluationJudgeYPos(2)
PerfectNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Perfect(s,2) Tweens.Evaluation.Judge.On(s,2,2) end
PerfectNumberP2OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,2,2) end
GreatNumberP1X=Metrics.Evaluation.JudgeNumbersX[1]
GreatNumberP1Y=EvaluationJudgeYPos(3)
GreatNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Great(s,1) Tweens.Evaluation.Judge.On(s,1,3) end
GreatNumberP1OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,1,3) end
GreatNumberP2X=Metrics.Evaluation.JudgeNumbersX[2]
GreatNumberP2Y=EvaluationJudgeYPos(3)
GreatNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Great(s,2) Tweens.Evaluation.Judge.On(s,2,3) end
GreatNumberP2OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,2,3) end
GoodNumberP1X=Metrics.Evaluation.JudgeNumbersX[1]
GoodNumberP1Y=EvaluationJudgeYPos(4)
GoodNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Good(s,1) Tweens.Evaluation.Judge.On(s,1,4) end
GoodNumberP1OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,1,4) end
GoodNumberP2X=Metrics.Evaluation.JudgeNumbersX[2]
GoodNumberP2Y=EvaluationJudgeYPos(4)
GoodNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Good(s,2) Tweens.Evaluation.Judge.On(s,2,4) end
GoodNumberP2OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,2,4) end
BooNumberP1X=Metrics.Evaluation.JudgeNumbersX[1]
BooNumberP1Y=EvaluationJudgeYPos(5)
BooNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Boo(s,1) Tweens.Evaluation.Judge.On(s,1,5) end
BooNumberP1OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,1,5) end
BooNumberP2X=Metrics.Evaluation.JudgeNumbersX[2]
BooNumberP2Y=EvaluationJudgeYPos(5)
BooNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Boo(s,2) Tweens.Evaluation.Judge.On(s,2,5) end
BooNumberP2OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,2,5) end
MissNumberP1X=Metrics.Evaluation.JudgeNumbersX[1]
MissNumberP1Y=EvaluationJudgeYPos(Metrics.Evaluation.NumJudgeRows)
MissNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Miss(s,1) Tweens.Evaluation.Judge.On(s,1,Metrics.Evaluation.NumJudgeRows) end
MissNumberP1OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,1,Metrics.Evaluation.NumJudgeRows) end
MissNumberP2X=Metrics.Evaluation.JudgeNumbersX[2]
MissNumberP2Y=EvaluationJudgeYPos(Metrics.Evaluation.NumJudgeRows)
MissNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Miss(s,2) Tweens.Evaluation.Judge.On(s,2,Metrics.Evaluation.NumJudgeRows) end
MissNumberP2OffCommand=%function(s) Tweens.Evaluation.Judge.Off(s,2,Metrics.Evaluation.NumJudgeRows) end
JumpsTextP1X=Metrics.Evaluation.StatsNumbersX[1]
JumpsTextP1Y=EvaluationStatsYPos(1)
JumpsTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Jumps(s,1) Tweens.Evaluation.Stats.On(s,1,1) end
JumpsTextP1OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,1,1) end
JumpsTextP2X=Metrics.Evaluation.StatsNumbersX[2]
JumpsTextP2Y=EvaluationStatsYPos(1)
JumpsTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Jumps(s,2) Tweens.Evaluation.Stats.On(s,2,1) end
JumpsTextP2OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,2,1) end
HandsTextP1X=Metrics.Evaluation.StatsNumbersX[1]
HandsTextP1Y=EvaluationStatsYPos(4)
HandsTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Hands(s,1) Tweens.Evaluation.Stats.On(s,1,2) end
HandsTextP1OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,1,2) end
HandsTextP2X=Metrics.Evaluation.StatsNumbersX[2]
HandsTextP2Y=EvaluationStatsYPos(4)
HandsTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Hands(s,2) Tweens.Evaluation.Stats.On(s,2,2) end
HandsTextP2OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,2,2) end
MinesTextP1X=Metrics.Evaluation.StatsNumbersX[1]
MinesTextP1Y=EvaluationStatsYPos(3)
MinesTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Mines(s,1) Tweens.Evaluation.Stats.On(s,1,3) end
MinesTextP1OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,1,3) end
MinesTextP2X=Metrics.Evaluation.StatsNumbersX[2]
MinesTextP2Y=EvaluationStatsYPos(3)
MinesTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Mines(s,2) Tweens.Evaluation.Stats.On(s,2,3) end
MinesTextP2OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,2,3) end
HoldsTextP1X=Metrics.Evaluation.StatsNumbersX[1]
HoldsTextP1Y=EvaluationStatsYPos(2)
HoldsTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Holds(s,1) Tweens.Evaluation.Stats.On(s,1,4) end
HoldsTextP1OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,1,4) end
HoldsTextP2X=Metrics.Evaluation.StatsNumbersX[2]
HoldsTextP2Y=EvaluationStatsYPos(2)
HoldsTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Holds(s,2) Tweens.Evaluation.Stats.On(s,2,4) end
HoldsTextP2OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,2,4) end
RollsTextP1X=Metrics.Evaluation.StatsNumbersX[1]
RollsTextP1Y=EvaluationStatsYPos(5)
RollsTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Rolls(s,1) Tweens.Evaluation.Stats.On(s,1,5) end
RollsTextP1OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,1,5) end
RollsTextP2X=Metrics.Evaluation.StatsNumbersX[2]
RollsTextP2Y=EvaluationStatsYPos(5)
RollsTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Rolls(s,2) Tweens.Evaluation.Stats.On(s,2,5) end
RollsTextP2OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,2,5) end
MaxComboNumberP1X=Metrics.Evaluation.StatsNumbersX[1]
MaxComboNumberP1Y=EvaluationStatsYPos(6)
MaxComboNumberP1OnCommand=%function(s) Capture.Evaluation.Song.MaxCombo(s,1) Tweens.Evaluation.Stats.On(s,1,6) end
MaxComboNumberP1OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,1,6) end
MaxComboNumberP2X=Metrics.Evaluation.StatsNumbersX[2]
MaxComboNumberP2Y=EvaluationStatsYPos(6)
MaxComboNumberP2OnCommand=%function(s) Capture.Evaluation.Song.MaxCombo(s,2) Tweens.Evaluation.Stats.On(s,2,6) end
MaxComboNumberP2OffCommand=%function(s) Tweens.Evaluation.Stats.Off(s,2,6) end
PlayerOptionsP1X=Metrics.Evaluation.ModsX[1]
PlayerOptionsP1Y=Metrics.Evaluation.ModsY
PlayerOptionsP1OnCommand=%function(s) Screens.Evaluation.SetDQ(1) Capture.Evaluation.Song.Mods(s,1) Tweens.Evaluation.Mods.On(s,1) end
PlayerOptionsP1OffCommand=%function(s) Tweens.Evaluation.Mods.Off(s,1) end
PlayerOptionsP2X=Metrics.Evaluation.ModsX[2]
PlayerOptionsP2Y=Metrics.Evaluation.ModsY
PlayerOptionsP2OnCommand=%function(s) Screens.Evaluation.SetDQ(1) Capture.Evaluation.Song.Mods(s,2) Tweens.Evaluation.Mods.On(s,2) end
PlayerOptionsP2OffCommand=%function(s) Tweens.Evaluation.Mods.Off(s,2) end
GraphFrameP1X=Metrics.Evaluation.LifeGraphX[1]
GraphFrameP1Y=Metrics.Evaluation.LifeGraphY
GraphFrameP1OnCommand=%function(s) Tweens.Evaluation.GraphFrame.On(s,1) end
GraphFrameP1OffCommand=%function(s) Tweens.Evaluation.GraphFrame.Off(s,1) end
GraphFrameP2X=Metrics.Evaluation.LifeGraphX[2]
GraphFrameP2Y=Metrics.Evaluation.LifeGraphY
GraphFrameP2OnCommand=%function(s) Tweens.Evaluation.LifeGraph.On(s,2) end
GraphFrameP2OffCommand=%function(s) Tweens.Evaluation.LifeGraph.Off(s,2) end
ColorizeLifeGraph=@Bool[false]
LifeGraphStartHeight=0
LifeGraphP1X=Metrics.Evaluation.LifeGraphX[1]
LifeGraphP1Y=Metrics.Evaluation.LifeGraphY
LifeGraphP1OnCommand=%function(s) Tweens.Evaluation.LifeGraph.On(s,1) end
LifeGraphP1OffCommand=%function(s) Tweens.Evaluation.LifeGraph.Off(s,1) end
LifeGraphP2X=Metrics.Evaluation.LifeGraphX[2]
LifeGraphP2Y=Metrics.Evaluation.LifeGraphY
LifeGraphP2OnCommand=%function(s) Tweens.Evaluation.LifeGraph.On(s,2) end
LifeGraphP2OffCommand=%function(s) Tweens.Evaluation.LifeGraph.Off(s,2) end
ComboGraphP1X=Metrics.Evaluation.LifeGraphX[1]
ComboGraphP1Y=Metrics.Evaluation.ComboGraphY
ComboGraphP1OnCommand=%function(s) Tweens.Evaluation.ComboGraph.On(s,1) end
ComboGraphP1AuxCommand=
ComboGraphP1OffCommand=%function(s) Tweens.Evaluation.ComboGraph.Off(s,1) end
ComboGraphP2X=Metrics.Evaluation.LifeGraphX[2]
ComboGraphP2Y=Metrics.Evaluation.ComboGraphY
ComboGraphP2OnCommand=%function(s) Tweens.Evaluation.ComboGraph.On(s,2) end
ComboGraphP2AuxCommand=
ComboGraphP2OffCommand=%function(s) Tweens.Evaluation.ComboGraph.Off(s,2) end
TimeNumberP1X=Metrics.Evaluation.TimeX[1]
TimeNumberP1Y=Metrics.Evaluation.TimeY
TimeNumberP1OnCommand=%function(s) Capture.Evaluation.Song.Time(s,1) Tweens.Evaluation.Time.On(s,1) end
TimeNumberP1OffCommand=%function(s) Tweens.Evaluation.Time.Off(s,1) end
TimeNumberP2X=Metrics.Evaluation.TimeX[2]
TimeNumberP2Y=Metrics.Evaluation.TimeY
TimeNumberP2OnCommand=%function(s) Capture.Evaluation.Song.Time(s,2) Tweens.Evaluation.Time.On(s,2) end
TimeNumberP2OffCommand=%function(s) Tweens.Evaluation.Time.Off(s,2) end
PerDifficultyAwardP1X=Metrics.Evaluation.Award.TimingX[1]
PerDifficultyAwardP1Y=Metrics.Evaluation.Award.TimingY
PerDifficultyAwardP1OnCommand=%function(s) Tweens.Evaluation.Award.Timing.On(s,1) end
PerDifficultyAwardP1OffCommand=%function(s) Tweens.Evaluation.Award.Timing.Off(s,1) end
PerDifficultyAwardP2X=Metrics.Evaluation.Award.TimingX[2]
PerDifficultyAwardP2Y=Metrics.Evaluation.Award.TimingY
PerDifficultyAwardP2OnCommand=%function(s) Tweens.Evaluation.Award.Timing.On(s,2) end
PerDifficultyAwardP2OffCommand=%function(s) Tweens.Evaluation.Award.Timing.Off(s,2) end
PeakComboAwardP1X=Metrics.Evaluation.Award.ComboX[1]
PeakComboAwardP1Y=Metrics.Evaluation.Award.ComboY
PeakComboAwardP1OnCommand=%function(s) Tweens.Evaluation.Award.Combo.On(s,1) end
PeakComboAwardP1OffCommand=%function(s) Tweens.Evaluation.Award.Combo.Off(s,1) end
PeakComboAwardP2X=Metrics.Evaluation.Award.ComboX[2]
PeakComboAwardP2Y=Metrics.Evaluation.Award.ComboY
PeakComboAwardP2OnCommand=%function(s) Tweens.Evaluation.Award.Combo.On(s,2) end
PeakComboAwardP2OffCommand=%function(s) Tweens.Evaluation.Award.Combo.Off(s,2) end
MarvelousLabelX=
MarvelousLabelY=
MarvelousLabelOnCommand=visible,Bool[false]
MarvelousLabelOffCommand=
PerfectLabelX=
PerfectLabelY=
PerfectLabelOnCommand=visible,Bool[false]
PerfectLabelOffCommand=
GreatLabelX=
GreatLabelY=
GreatLabelOnCommand=visible,Bool[false]
GreatLabelOffCommand=
GoodLabelX=
GoodLabelY=
GoodLabelOnCommand=visible,Bool[false]
GoodLabelOffCommand=
BooLabelX=
BooLabelY=
BooLabelOnCommand=visible,Bool[false]
BooLabelOffCommand=
MissLabelX=
MissLabelY=
MissLabelOnCommand=visible,Bool[false]
MissLabelOffCommand=
JumpsLabelX=
JumpsLabelY=
JumpsLabelOnCommand=visible,Bool[false]
JumpsLabelOffCommand=
HoldsLabelX=
HoldsLabelY=
HoldsLabelOnCommand=visible,Bool[false]
HoldsLabelOffCommand=
MinesLabelX=
MinesLabelY=
MinesLabelOnCommand=visible,Bool[false]
MinesLabelOffCommand=
HandsLabelX=
HandsLabelY=
HandsLabelOnCommand=visible,Bool[false]
HandsLabelOffCommand=
RollsLabelX=
RollsLabelY=
RollsLabelOnCommand=visible,Bool[false]
RollsLabelOffCommand=
MaxComboLabelX=
MaxComboLabelY=
MaxComboLabelOnCommand=visible,Bool[false]
MaxComboLabelOffCommand=
TimeLabelX=
TimeLabelY=
TimeLabelOnCommand=%function(s) Screens.Evaluation.AfterCommitScores() s:visible(Bool[false]) end
TimeLabelOffCommand=
BarPossible1P1X=Metrics.Evaluation.BonusBarX[1]
BarPossible1P1Y=Metrics.Evaluation.BonusBarY[1]
BarPossible1P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,1,1)end
BarPossible1P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,1,1)end
BarActual1P1X=Metrics.Evaluation.BonusBarX[1]
BarActual1P1Y=Metrics.Evaluation.BonusBarY[1]
BarActual1P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,1,1)end
BarActual1P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,1,1)end
BarPossible2P1X=Metrics.Evaluation.BonusBarX[1]
BarPossible2P1Y=Metrics.Evaluation.BonusBarY[2]
BarPossible2P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,1,2)end
BarPossible2P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,1,2)end
BarActual2P1X=Metrics.Evaluation.BonusBarX[1]
BarActual2P1Y=Metrics.Evaluation.BonusBarY[2]
BarActual2P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,1,2)end
BarActual2P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,1,2)end
BarPossible3P1X=Metrics.Evaluation.BonusBarX[1]
BarPossible3P1Y=Metrics.Evaluation.BonusBarY[3]
BarPossible3P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,1,3)end
BarPossible3P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,1,3)end
BarActual3P1X=Metrics.Evaluation.BonusBarX[1]
BarActual3P1Y=Metrics.Evaluation.BonusBarY[3]
BarActual3P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,1,3)end
BarActual3P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,1,3)end
BarPossible4P1X=Metrics.Evaluation.BonusBarX[1]
BarPossible4P1Y=Metrics.Evaluation.BonusBarY[4]
BarPossible4P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,1,4)end
BarPossible4P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,1,4)end
BarActual4P1X=Metrics.Evaluation.BonusBarX[1]
BarActual4P1Y=Metrics.Evaluation.BonusBarY[4]
BarActual4P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,1,4)end
BarActual4P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,1,4)end
BarPossible5P1X=Metrics.Evaluation.BonusBarX[1]
BarPossible5P1Y=Metrics.Evaluation.BonusBarY[5]
BarPossible5P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,1,5)end
BarPossible5P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,1,5)end
BarActual5P1X=Metrics.Evaluation.BonusBarX[1]
BarActual5P1Y=Metrics.Evaluation.BonusBarY[5]
BarActual5P1OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,1,5)end
BarActual5P1OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,1,5)end
BarPossible1P2X=Metrics.Evaluation.BonusBarX[2]
BarPossible1P2Y=Metrics.Evaluation.BonusBarY[1]
BarPossible1P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,2,1)end
BarPossible1P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,2,1)end
BarActual1P2X=Metrics.Evaluation.BonusBarX[2]
BarActual1P2Y=Metrics.Evaluation.BonusBarY[1]
BarActual1P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,2,1)end
BarActual1P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,2,1)end
BarPossible2P2X=Metrics.Evaluation.BonusBarX[2]
BarPossible2P2Y=Metrics.Evaluation.BonusBarY[2]
BarPossible2P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,2,2)end
BarPossible2P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,2,2)end
BarActual2P2X=Metrics.Evaluation.BonusBarX[2]
BarActual2P2Y=Metrics.Evaluation.BonusBarY[2]
BarActual2P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,2,2)end
BarActual2P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,2,2)end
BarPossible3P2X=Metrics.Evaluation.BonusBarX[2]
BarPossible3P2Y=Metrics.Evaluation.BonusBarY[3]
BarPossible3P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,2,3)end
BarPossible3P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,2,3)end
BarActual3P2X=Metrics.Evaluation.BonusBarX[2]
BarActual3P2Y=Metrics.Evaluation.BonusBarY[3]
BarActual3P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,2,3)end
BarActual3P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,2,3)end
BarPossible4P2X=Metrics.Evaluation.BonusBarX[2]
BarPossible4P2Y=Metrics.Evaluation.BonusBarY[4]
BarPossible4P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,2,4)end
BarPossible4P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,2,4)end
BarActual4P2X=Metrics.Evaluation.BonusBarX[2]
BarActual4P2Y=Metrics.Evaluation.BonusBarY[4]
BarActual4P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,2,4)end
BarActual4P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,2,4)end
BarPossible5P2X=Metrics.Evaluation.BonusBarX[2]
BarPossible5P2Y=Metrics.Evaluation.BonusBarY[5]
BarPossible5P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.On(s,2,5)end
BarPossible5P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Possible.Off(s,2,5)end
BarActual5P2X=Metrics.Evaluation.BonusBarX[2]
BarActual5P2Y=Metrics.Evaluation.BonusBarY[5]
BarActual5P2OnCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.On(s,2,5)end
BarActual5P2OffCommand=%function(s)Tweens.Evaluation.BonusBar.Actual.Off(s,2,5)end
BarActualMaxCommand=%Tweens.Evaluation.BonusBar.Actual.MaxFlash

ComboGraphP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
ComboGraphP2CaptureCommand=%Capture.ActorFrame.CaptureInternal

[EvaluationStage]
Fallback=Evaluation
Type=stage
ShowBannerArea=@Bool[true]
ShowGraphArea=@Bool[true]
ShowComboArea=@Bool[true]
ShowPointsArea=@Bool[true]
ShowMarvelous=@Bool[true]
ShowPerfect=@Bool[true]
ShowGreat=@Bool[true]
ShowGood=@Bool[true]
ShowBoo=@Bool[false]
ShowMiss=@Bool[true]
ShowMaxCombo=@Bool[false]
ShowJumps=@Bool[true]
ShowHolds=@Bool[true]
ShowMines=@Bool[true]
ShowHands=@Bool[true]
ShowRolls=@Bool[true]
ShowTimeArea=@Bool[true]
ShowGradeArea=@Bool[false]
ShowBonusArea=@Bool[false]
ShowSurvivedArea=@Bool[false]
ShowWinArea=@Bool[false]
ShowOK=@Bool[false]
ShowTotalError=@Bool[false]
ShowScoreArea=@Bool[false]
ShowTotalScoreArea=@Bool[false]
ShowPerDifficultyAward=@Bool[false]
ShowPeakComboAward=@Bool[false]

[EvaluationCourse]
Fallback=EvaluationStage
Type=course
ShowSurvivedArea=@Bool[false]
# SurvivedNumber = "player P cleared N songs in this course"
SurvivedFrameP1X=
SurvivedFrameP1Y=
SurvivedFrameP1OnCommand=
SurvivedNumberP1X=
SurvivedNumberP1Y=
SurvivedNumberP1OnCommand=
SurvivedFrameP2X=
SurvivedFrameP2Y=
SurvivedFrameP2OnCommand=
SurvivedNumberP2X=
SurvivedNumberP2Y=
SurvivedNumberP2OnCommand=

[--]
[EvaluationWorkout]
Fallback=EvaluationStage
Type=summary
[EvaluationWorkout1]
Fallback=EvaluationWorkout
[EvaluationWorkout2]
Fallback=EvaluationWorkout
[EvaluationWorkout3]
Fallback=EvaluationWorkout
[EvaluationWorkout4]
Fallback=EvaluationWorkout
[EvaluationWorkoutQuad]
Fallback=EvaluationWorkout
[EvaluationWorkoutFailed]
Fallback=EvaluationWorkout

[--]
[EvaluationSuperMarathon1]
Fallback=EvaluationSummary
SmallBanner1OnCommand=%function(ss) local s=GetScreen():GetChild("SmallBanner1") if s then s:Load(GetFolderBannerPath(Env().Cache.FolderNames[Env().SuperMarathon.CurFolder])) s:scaletoclipped(unpack(Metrics.Evaluation.BannerSize)) s:draworder(2) Tweens.Evaluation.Banner.On(s) end end

[EvaluationSuperMarathon2]
Fallback=EvaluationSuperMarathon1
[EvaluationSuperMarathon3]
Fallback=EvaluationSuperMarathon1
[EvaluationSuperMarathon4]
Fallback=EvaluationSuperMarathon1
[EvaluationSuperMarathonFailed]
Fallback=EvaluationSuperMarathon1
[EvaluationSuperMarathonQuad]
#as if that's likely unless you're HappyFeet
Fallback=EvaluationSuperMarathon1
[--]
[EvaluationStage1]
Fallback=EvaluationStage
[EvaluationStage2]
Fallback=EvaluationStage
[EvaluationStage3]
Fallback=EvaluationStage
[EvaluationStage4]
Fallback=EvaluationStage
[EvaluationStageQuad]
Fallback=EvaluationStage
[EvaluationStageFailed]
Fallback=EvaluationStage
[--]
[EvaluationCourse1]
Fallback=EvaluationCourse
[EvaluationCourse2]
Fallback=EvaluationCourse
[EvaluationCourse3]
Fallback=EvaluationCourse
[EvaluationCourse4]
Fallback=EvaluationCourse

[EvaluationCourseQuad]
Fallback=EvaluationCourse
[EvaluationCourseFailed]
Fallback=EvaluationCourse

[--]
[EvaluationSummary]
Fallback=EvaluationStage
Type=summary
# Same as normal evaluation, except a series of mini banners and cumulative stats are displayed. Playeroptions, DQ and Difficulty meter aren't loaded.
SmallBanner1X=Metrics.Evaluation.BannerXY[1]
SmallBanner1Y=Metrics.Evaluation.BannerXY[2]
SmallBanner1OnCommand=%function(ss) local s=GetScreen():GetChild("SmallBanner1") if s then --[[s:Load(path to banner)]] s:scaletoclipped(unpack(Metrics.Evaluation.BannerSize)) s:draworder(2) Tweens.Evaluation.Banner.On(s) end end
SmallBanner1OffCommand=%function(s) GetScreen():aux(math.mod(GetScreen():getaux()+1,2)) if GetScreen():getaux()==1 then Tweens.Evaluation.Banner.Off(s) else Tweens.Evaluation.BannerFrame.Off(s) end end
# unused:
SmallBanner2X=
SmallBanner2Y=
SmallBanner2OnCommand=visible,Bool[false]
SmallBanner2OffCommand=
SmallBanner3X=
SmallBanner3Y=
SmallBanner3OnCommand=visible,Bool[false]
SmallBanner3OffCommand=
SmallBanner4X=
SmallBanner4Y=
SmallBanner4OnCommand=visible,Bool[false]
SmallBanner4OffCommand=
SmallBanner5X=
SmallBanner5Y=
SmallBanner5OnCommand=visible,Bool[false]
SmallBanner5OffCommand=
FirstUpdateCommand=Screens.Common.FirstUpdate(self) Screens.Evaluation.FirstUpdate(self,true)

[EvaluationBlank]
# Use this template for a screenshottable screen. MenuStart loads NextScreen, MenuSelect takes screenshot once. Derived from SWME.
# edit: Doesn't work if you haven't played a song yet.
Fallback=Evaluation
Type=summary
ShowStage=@Bool[false]
ShowBannerArea=@Bool[false]
ShowGraphArea=@Bool[false]
ShowComboArea=@Bool[false]
ShowGradeArea=@Bool[false]
ShowPointsArea=@Bool[false]
ShowBonusArea=@Bool[false]
ShowSurvivedArea=@Bool[false]
ShowWinArea=@Bool[false]
ShowMarvelous=@Bool[false]
ShowPerfect=@Bool[false]
ShowGreat=@Bool[false]
ShowGood=@Bool[false]
ShowBoo=@Bool[false]
ShowMiss=@Bool[false]
ShowOK=@Bool[false]
ShowMaxCombo=@Bool[false]
ShowTotalError=@Bool[false]
ShowJumps=@Bool[false]
ShowHolds=@Bool[false]
ShowMines=@Bool[false]
ShowHands=@Bool[false]
ShowRolls=@Bool[false]
ShowScoreArea=@Bool[false]
ShowTotalScoreArea=@Bool[false]
ShowTimeArea=@Bool[false]
ShowPerDifficultyAward=@Bool[false]
ShowPeakComboAward=@Bool[false]
PersonalRecordP1OnCommand=visible,Bool[false]
PersonalRecordP2OnCommand=visible,Bool[false]
MachineRecordP1OnCommand=visible,Bool[false]
MachineRecordP2OnCommand=visible,Bool[false]
HelpText=

[EvaluationSongBlank]
[EvaluationCourseBlank]
[EvaluationBlankBase]
Fallback=Evaluation
Class=ScreenEvaluation
ScreenInitCommand=%function(s) Screens.Common.Init(s) Capture.Evaluation.Init(s) Screens.Evaluation.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) Capture.Evaluation.Init(s) Screens.Evaluation.Init(s) end
FirstUpdateCommand=Screens.Common.FirstUpdate(self) Screens.Evaluation.FirstUpdate(self)
PercentFrameP1OnCommand=visible,Bool[false]
PercentFrameP2OnCommand=visible,Bool[false]
PercentP1OnCommand=visible,Bool[false]
PercentP2OnCommand=visible,Bool[false]
MachineRecordP1OnCommand=visible,Bool[false]
MachineRecordP2OnCommand=visible,Bool[false]
PersonalRecordP1OnCommand=visible,Bool[false]
PersonalRecordP2OnCommand=visible,Bool[false]
DifficultyIconP1OnCommand=visible,Bool[false]
DifficultyIconP2OnCommand=visible,Bool[false]
GraphFrameP1OnCommand=visible,Bool[false]
GraphFrameP2OnCommand=visible,Bool[false]
LifeGraphP1OnCommand=visible,Bool[false]
LifeGraphP2OnCommand=visible,Bool[false]
ComboGraphP1OnCommand=visible,Bool[false]
ComboGraphP2OnCommand=visible,Bool[false]
DisqualifiedP1OnCommand=%function(s) Capture.Evaluation.Song.DQ(s,1) s:visible(Bool[false]) end
DisqualifiedP2OnCommand=%function(s) Capture.Evaluation.Song.DQ(s,2) s:visible(Bool[false]) end
DifficultyMeterP1OnCommand=%function(s) Screens.Evaluation.AfterSave(1) s:visible(Bool[false]) end
DifficultyMeterP2OnCommand=%function(s) Screens.Evaluation.AfterSave(2) s:visible(Bool[false]) end
MarvelousNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Marvelous(s,1) s:visible(Bool[false]) end
MarvelousNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Marvelous(s,2) s:visible(Bool[false]) end
PerfectNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Perfect(s,1) s:visible(Bool[false]) end
PerfectNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Perfect(s,2) s:visible(Bool[false]) end
GreatNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Great(s,1) s:visible(Bool[false]) end
GreatNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Great(s,2) s:visible(Bool[false]) end
GoodNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Good(s,1) s:visible(Bool[false]) end
GoodNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Good(s,2) s:visible(Bool[false]) end
BooNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Boo(s,1) s:visible(Bool[false]) end
BooNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Boo(s,2) s:visible(Bool[false]) end
MissNumberP1OnCommand=%function(s) Capture.Evaluation.Judge.Miss(s,1) s:visible(Bool[false]) end
MissNumberP2OnCommand=%function(s) Capture.Evaluation.Judge.Miss(s,2) s:visible(Bool[false]) end
JumpsTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Jumps(s,1) s:visible(Bool[false]) end
JumpsTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Jumps(s,2) s:visible(Bool[false]) end
HandsTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Hands(s,1) s:visible(Bool[false]) end
HandsTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Hands(s,2) s:visible(Bool[false]) end
MinesTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Mines(s,1) s:visible(Bool[false]) end
MinesTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Mines(s,2) s:visible(Bool[false]) end
HoldsTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Holds(s,1) s:visible(Bool[false]) end
HoldsTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Holds(s,2) s:visible(Bool[false]) end
RollsTextP1OnCommand=%function(s) Capture.Evaluation.Stats.Rolls(s,1) s:visible(Bool[false]) end
RollsTextP2OnCommand=%function(s) Capture.Evaluation.Stats.Rolls(s,2) s:visible(Bool[false]) end
MaxComboNumberP1OnCommand=%function(s) Capture.Evaluation.Song.MaxCombo(s,1) s:visible(Bool[false]) end
MaxComboNumberP2OnCommand=%function(s) Capture.Evaluation.Song.MaxCombo(s,2) s:visible(Bool[false]) end
PlayerOptionsP1OnCommand=%function(s) Screens.Evaluation.SetDQ(1) Capture.Evaluation.Song.Mods(s,1) s:visible(Bool[false]) end
PlayerOptionsP2OnCommand=%function(s) Screens.Evaluation.SetDQ(1) Capture.Evaluation.Song.Mods(s,2) s:visible(Bool[false]) end
TimeNumberP1OnCommand=%function(s) Capture.Evaluation.Song.Time(s,1) s:visible(Bool[false]) end
TimeNumberP2OnCommand=%function(s) Capture.Evaluation.Song.Time(s,2) s:visible(Bool[false]) end
TimeLabelOnCommand=%function(s) Screens.Evaluation.AfterCommitScores() s:visible(Bool[false]) end

[--]

[Evaluation Percent]
Fallback=PercentageDisplay
DancePointsDigits=@(function() SetPref("DancePointsForOni",false) Env().UseDP=false return 1 end)()
PercentP1OnCommand=%function(s) s:shadowlength(0) s:zoom(15/20) Capture.Evaluation.Song.Percent(s,1) end
PercentP2OnCommand=%function(s) s:shadowlength(0) s:zoom(15/20) Capture.Evaluation.Song.Percent(s,2) end
[Evaluation DifficultyMeterP1]
Fallback=DifficultyMeter
MeterOnCommand=shadowlength,0
MeterTextChangedCommand=%function(s) Capture.Evaluation.Song.Meter(s,1) end
[Evaluation DifficultyMeterP2]
Fallback=Evaluation DifficultyMeterP1
MeterTextChangedCommand=%function(s) Capture.Evaluation.Song.Meter(s,2) end

[ComboGraph]
#All evaluated on theme load:
NumbersY=@Metrics.Evaluation.ComboGraphNumbersY
[ComboGraphP1]
Fallback=ComboGraph
ComboMaxNumberOnCommand=%Tweens.Evaluation.ComboGraph.MaxNumber.On
ComboMaxNumberOffCommand=%Tweens.Evaluation.ComboGraph.MaxNumber.Off
ComboBarOffCommand=%Tweens.Evaluation.ComboGraph.PartOff
[ComboGraphP2]
Fallback=ComboGraphP1

[------------------------------------------------------------------]
[NameProfile]
Fallback=NameEntryEmpty
NextScreen=@Branch.AfterNameProfile()

[NameEntryEmpty]
#NotITG defines this screen to give you a name entry box without needing a high score. originally used for an early UKSRT iirc?
Class=ScreenNameEntryTraditionalEmpty
Fallback=NameEntry
FirstUpdateCommand=Screens.NameEntry.FirstUpdate(self)
#Then get the name by doing s:GetText() on SelectionPnOff.
SelectionP1OffCommand=%function(s) Tweens.NameEntry.Selection.Off(s,1) end
SelectionP2OffCommand=%function(s) Tweens.NameEntry.Selection.Off(s,2) end

[NameEntry]
ScreenInitCommand=%function(s) Screens.Common.Init(s) Screens.NameEntry.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) Screens.NameEntry.Init(s) end
Class=ScreenNameEntryTraditional
Fallback=Common
ShowStage=@Bool[false]
FOV=(function() Capture.NameEntry.Init() return 0 end)()
NextScreen=@Branch.NameEntryNext()
TimerSeconds=MenuTimer.Seconds(Metrics.NameEntry.MenuTimer)
ScreenOnCommand=
HelpText=@join("\n",Languages[CurLanguage()].ScreenNameEntryTraditional.HelpTips)
HelpLuaCommand=
HelpOffCommand=%Screens.NameEntry.Off
FirstUpdateCommand=Screens.Common.FirstUpdate(self) Screens.NameEntry.FirstUpdate(self)
ScreenFirstUpdateCommand=%Screens.NameEntry.FirstUpdate
HelpAlarmMessageCommand=%Screens.NameEntry.Alarm
NumAlphabetDisplayed=@Metrics.NameEntry.NumLettersShown
OKInitCommand=%function(s) Capture.NameEntry.LettersSpecial(s) Tweens.NameEntry.LettersSpecial.On(s) end
AlphabetInitCommand=%function(s) Capture.NameEntry.Letters(s) Tweens.NameEntry.Letters.On(s) end
AlphabetGapX=@Metrics.NameEntry.LetterSpacing
MaxRankingNameLength=@Metrics.NameEntry.NameLength
FeatInterval=Metrics.NameEntry.ScrollInterval
KeyboardLetters=@Metrics.NameEntry.Letters
# Keyboards
OutOfRankingP1X=Metrics.NameEntry.OutOfRankingX[1]
OutOfRankingP1Y=Metrics.NameEntry.OutOfRankingY
OutOfRankingP1OnCommand=%function(s) Capture.NameEntry.OutOfRanking(s,1) Tweens.NameEntry.OutOfRanking.On(s,1) end
OutOfRankingP1OffCommand=%function(s) Tweens.NameEntry.OutOfRanking.Off(s,1) end
EntryFrameP1X=Metrics.NameEntry.EntryFrameX[1]
EntryFrameP1Y=Metrics.NameEntry.EntryFrameY
EntryFrameP1OnCommand=%function(s) Capture.NameEntry.EntryFrame(s,1) Tweens.NameEntry.EntryFrame.On(s,1) end
EntryFrameP1OffCommand=%function(s) Tweens.NameEntry.EntryFrame.Off(s,1) end
KeyboardP1X=Metrics.NameEntry.KeyboardX[1]
KeyboardP1Y=Metrics.NameEntry.KeyboardY
KeyboardP1OnCommand=%function(s) Capture.NameEntry.Keyboard(s,1) Tweens.NameEntry.Keyboard.On(s,1) end
KeyboardP1OffCommand=%function(s) Tweens.NameEntry.Keyboard.Off(s,1) end
LetterP1OffCommand=linear,.15;diffusealpha,0
LetterP2OffCommand=linear,.15;diffusealpha,0
CursorP1OffCommand=linear,.15;diffusealpha,0
CursorP2OffCommand=linear,.15;diffusealpha,0
SelectionP1X=Metrics.NameEntry.SelectionX[1]
SelectionP1Y=Metrics.NameEntry.SelectionY
SelectionP1OnCommand=%function(s) Capture.NameEntry.Selection(s,1) Tweens.NameEntry.Selection.On(s,1) end
SelectionP1OffCommand=%function(s) Tweens.NameEntry.Selection.Off(s,1) end
OutOfRankingP2X=Metrics.NameEntry.OutOfRankingX[2]
OutOfRankingP2Y=Metrics.NameEntry.OutOfRankingY
OutOfRankingP2OnCommand=%function(s) Capture.NameEntry.OutOfRanking(s,2) Tweens.NameEntry.OutOfRanking.On(s,2) end
OutOfRankingP2OffCommand=%function(s) Tweens.NameEntry.OutOfRanking.Off(s,2) end
EntryFrameP2X=Metrics.NameEntry.EntryFrameX[2]
EntryFrameP2Y=Metrics.NameEntry.EntryFrameY
EntryFrameP2OnCommand=%function(s) Capture.NameEntry.EntryFrame(s,2) Tweens.NameEntry.EntryFrame.On(s,2) end
EntryFrameP2OffCommand=%function(s) Tweens.NameEntry.EntryFrame.Off(s,2) end
KeyboardP2X=Metrics.NameEntry.KeyboardX[2]
KeyboardP2Y=Metrics.NameEntry.KeyboardY
KeyboardP2OnCommand=%function(s) Capture.NameEntry.Keyboard(s,2) Tweens.NameEntry.Keyboard.On(s,2) end
KeyboardP2OffCommand=%function(s) Tweens.NameEntry.Keyboard.Off(s,2) end
SelectionP2X=Metrics.NameEntry.SelectionX[2]
SelectionP2Y=Metrics.NameEntry.SelectionY
SelectionP2OnCommand=%function(s) Capture.NameEntry.Selection(s,2) Tweens.NameEntry.Selection.On(s,2) end
SelectionP2OffCommand=%function(s) Tweens.NameEntry.Selection.Off(s,2) end
# Score entries
WheelP1X=Metrics.NameEntry.WheelX[1]
WheelP1Y=Metrics.NameEntry.WheelY
WheelP1OnCommand=%function(s) Capture.NameEntry.Wheel(s,1) Tweens.NameEntry.Wheel.On(s,1) end
WheelP1OffCommand=%function(s) Tweens.NameEntry.Wheel.Off(s,1) end
BannerP1X=Metrics.NameEntry.BannerX[1]
BannerP1Y=Metrics.NameEntry.BannerY
BannerP1OnCommand=%function(s) Capture.NameEntry.Banner(s,1) Tweens.NameEntry.Banner.On(s,1) end
BannerP1OffCommand=%function(s) Tweens.NameEntry.Banner.Off(s,1) end
GradeP1X=
GradeP1Y=
GradeP1OnCommand=%function(s) Capture.NameEntry.Grade(s,1) s:visible(Bool[false]) end
GradeP1OffCommand=
DifficultyIconP1X=Metrics.NameEntry.DifficultyIconX[1]
DifficultyIconP1Y=Metrics.NameEntry.DifficultyIconY
DifficultyIconP1OnCommand=%function(s) Capture.NameEntry.DifficultyIcon(s,1) Tweens.NameEntry.DifficultyIcon.On(s,1) end
DifficultyIconP1OffCommand=%function(s) Tweens.NameEntry.DifficultyIcon.Off(s,1) end
DifficultyMeterP1X=Metrics.NameEntry.DifficultyMeterX[1]
DifficultyMeterP1Y=Metrics.NameEntry.DifficultyMeterY
DifficultyMeterP1OnCommand=%function(s) Capture.NameEntry.DifficultyMeter(s,1) Tweens.NameEntry.DifficultyMeter.On(s,1) end
DifficultyMeterP1OffCommand=%function(s) Tweens.NameEntry.DifficultyMeter.Off(s,1) end
ScoreP1X=Metrics.NameEntry.ScoreX[1]
ScoreP1Y=Metrics.NameEntry.ScoreY
ScoreP1OnCommand=%function(s) Capture.NameEntry.Score(s,1) Tweens.NameEntry.Score.On(s,1) end
ScoreP1OffCommand=%function(s) Tweens.NameEntry.Score.Off(s,1) end
BannerFrameP1X=Metrics.NameEntry.BannerFrameX[1]
BannerFrameP1Y=Metrics.NameEntry.BannerFrameY
BannerFrameP1OnCommand=%function(s) Capture.NameEntry.BannerFrame(s,1) Tweens.NameEntry.BannerFrame.On(s,1) end
BannerFrameP1OffCommand=%function(s) Tweens.NameEntry.BannerFrame.Off(s,1) end
OutOfRankingP2X=Metrics.NameEntry.OutOfRankingX[2]
OutOfRankingP2Y=Metrics.NameEntry.OutOfRankingY
OutOfRankingP2OnCommand=%function(s) Capture.NameEntry.OutOfRanking(s,2) Tweens.NameEntry.OutOfRanking.On(s,2) end
OutOfRankingP2OffCommand=%function(s) Tweens.NameEntry.OutOfRanking.Off(s,2) end
EntryFrameP2X=Metrics.NameEntry.EntryFrameX[2]
EntryFrameP2Y=Metrics.NameEntry.EntryFrameY
EntryFrameP2OnCommand=%function(s) Capture.NameEntry.EntryFrame(s,2) Tweens.NameEntry.EntryFrame.On(s,2) end
EntryFrameP2OffCommand=%function(s) Tweens.NameEntry.EntryFrame.Off(s,2) end
KeyboardP2X=Metrics.NameEntry.KeyboardX[2]
KeyboardP2Y=Metrics.NameEntry.KeyboardY
KeyboardP2OnCommand=%function(s) Capture.NameEntry.Keyboard(s,2) Tweens.NameEntry.Keyboard.On(s,2) end
KeyboardP2OffCommand=%function(s) Tweens.NameEntry.Keyboard.Off(s,2) end
SelectionP2X=Metrics.NameEntry.SelectionX[2]
SelectionP2Y=Metrics.NameEntry.SelectionY
SelectionP2OnCommand=%function(s) Capture.NameEntry.Selection(s,2) Tweens.NameEntry.Selection.On(s,2) end
SelectionP2OffCommand=%function(s) Tweens.NameEntry.Selection.Off(s,2) end
WheelP2X=Metrics.NameEntry.WheelX[2]
WheelP2Y=Metrics.NameEntry.WheelY
WheelP2OnCommand=%function(s) Capture.NameEntry.Wheel(s,2) Tweens.NameEntry.Wheel.On(s,2) end
WheelP2OffCommand=%function(s) Tweens.NameEntry.Wheel.Off(s,2) end
BannerP2X=Metrics.NameEntry.BannerX[2]
BannerP2Y=Metrics.NameEntry.BannerY
BannerP2OnCommand=%function(s) Capture.NameEntry.Banner(s,2) Tweens.NameEntry.Banner.On(s,2) end
BannerP2OffCommand=%function(s) Tweens.NameEntry.Banner.Off(s,2) end
GradeP2X=
GradeP2Y=
GradeP2OnCommand=%function(s) Capture.NameEntry.Grade(s,2) s:visible(Bool[false]) end
GradeP2OffCommand=
DifficultyIconP2X=Metrics.NameEntry.DifficultyIconX[2]
DifficultyIconP2Y=Metrics.NameEntry.DifficultyIconY
DifficultyIconP2OnCommand=%function(s) Capture.NameEntry.DifficultyIcon(s,2) Tweens.NameEntry.DifficultyIcon.On(s,2) end
DifficultyIconP2OffCommand=%function(s) Tweens.NameEntry.DifficultyIcon.Off(s,2) end
DifficultyMeterP2X=Metrics.NameEntry.DifficultyMeterX[2]
DifficultyMeterP2Y=Metrics.NameEntry.DifficultyMeterY
DifficultyMeterP2OnCommand=%function(s) Capture.NameEntry.DifficultyMeter(s,2) Tweens.NameEntry.DifficultyMeter.On(s,2) end
DifficultyMeterP2OffCommand=%function(s) Tweens.NameEntry.DifficultyMeter.Off(s,2) end
ScoreP2X=Metrics.NameEntry.ScoreX[2]
ScoreP2Y=Metrics.NameEntry.ScoreY
ScoreP2OnCommand=%function(s) Capture.NameEntry.Score(s,2) Tweens.NameEntry.Score.On(s,2) end
ScoreP2OffCommand=%function(s) Tweens.NameEntry.Score.Off(s,2) end
BannerFrameP2X=Metrics.NameEntry.BannerFrameX[2]
BannerFrameP2Y=Metrics.NameEntry.BannerFrameY
BannerFrameP2OnCommand=%function(s) Capture.NameEntry.BannerFrame(s,2) Tweens.NameEntry.BannerFrame.On(s,2) end
BannerFrameP2OffCommand=%function(s) Tweens.NameEntry.BannerFrame.Off(s,2) end
# Scroll hooks
WheelP1HideCommand=
WheelP1UnhideCommand=
GradeP1HideCommand=
GradeP1UnhideCommand=
DifficultyIconP1HideCommand=
DifficultyIconP1UnhideCommand=
DifficultyMeterP1HideCommand=
DifficultyMeterP1UnhideCommand=
BannerP1HideCommand=
BannerP1UnhideCommand=
ScoreP1HideCommand=
ScoreP1UnhideCommand=%function(s) Tweens.NameEntry.ScrollFeats(1) --[[Broadcast("NextFeatP1")]] end
WheelP2HideCommand=
WheelP2UnhideCommand=
GradeP2HideCommand=
GradeP2UnhideCommand=
DifficultyIconP2HideCommand=
DifficultyIconP2UnhideCommand=
DifficultyMeterP2HideCommand=
DifficultyMeterP2UnhideCommand=
BannerP2HideCommand=
BannerP2UnhideCommand=
ScoreP2HideCommand=
ScoreP2UnhideCommand=%function(s) Tweens.NameEntry.ScrollFeats(2) --[[Broadcast("NextFeatP2")]] end
# Hooks
OutOfRankingP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
EntryFrameP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
KeyboardP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
LetterP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
CursorP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
SelectionP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
WheelP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
BannerP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
GradeP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyIconP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyMeterP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
CategoryP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
BannerFrameP1CaptureCommand=%Capture.ActorFrame.CaptureInternal
OutOfRankingP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
EntryFrameP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
KeyboardP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
LetterP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
CursorP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
SelectionP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
WheelP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
BannerP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
GradeP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyIconP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
DifficultyMeterP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
CategoryP2CaptureCommand=%Capture.ActorFrame.CaptureInternal
BannerFrameP2CaptureCommand=%Capture.ActorFrame.CaptureInternal

[NameEntry Percent]
Fallback=PercentageDisplay
PercentP1OnCommand=%function(s) Tweens.NameEntry.Percent.On(s,1) end
PercentP2OnCommand=%function(s) Tweens.NameEntry.Percent.On(s,2) end
[NameEntry DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntry DifficultyMeterP2]
Fallback=DifficultyMeter

[HighScoreWheelItem]
RankX=Metrics.NameEntry.WheelItem.RankX
NameX=Metrics.NameEntry.WheelItem.NameX
ScoreX=Metrics.NameEntry.WheelItem.ScoreX
DateX=Metrics.NameEntry.WheelItem.DateX
RankY=0
NameY=0
ScoreY=0
DateY=0
RankOnCommand=%function(s) Capture.NameEntry.WheelItem.Rank(s) Tweens.NameEntry.WheelItem.Rank(s) end
NameOnCommand=%function(s) Capture.NameEntry.WheelItem.Name(s) Tweens.NameEntry.WheelItem.Name(s) end
ScoreOnCommand=%function(s) Capture.NameEntry.WheelItem.Score(s) Tweens.NameEntry.WheelItem.Score(s) end
DateOnCommand=%function(s) Capture.NameEntry.WheelItem.Date(s) Tweens.NameEntry.WheelItem.Date(s) end
RankCaptureCommand=%Capture.ActorFrame.CaptureInternal
NameCaptureCommand=%Capture.ActorFrame.CaptureInternal
ScoreCaptureCommand=%Capture.ActorFrame.CaptureInternal
DateCaptureCommand=%Capture.ActorFrame.CaptureInternal

[--]
# alternate music
[NameEntryFailed]
Fallback=NameEntry
[NameEntryFailed DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntryFailed DifficultyMeterP2]
Fallback=DifficultyMeter
[NameEntryQuad]
Fallback=NameEntry
[NameEntryQuad DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntryQuad DifficultyMeterP2]
Fallback=DifficultyMeter
[NameEntry1]
Fallback=NameEntry
[NameEntry1 DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntry1 DifficultyMeterP2]
Fallback=DifficultyMeter
[NameEntry2]
Fallback=NameEntry
[NameEntry2 DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntry2 DifficultyMeterP2]
Fallback=DifficultyMeter
[NameEntry3]
Fallback=NameEntry
[NameEntry3 DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntry3 DifficultyMeterP2]
Fallback=DifficultyMeter
[NameEntry4]
Fallback=NameEntry
[NameEntry4 DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntry4 DifficultyMeterP2]
Fallback=DifficultyMeter
[NameEntryEasy1]
Fallback=NameEntry
[NameEntryEasy1 DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntryEasy1 DifficultyMeterP2]
Fallback=DifficultyMeter
[NameEntryEasy2]
Fallback=NameEntry
[NameEntryEasy2 DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntryEasy2 DifficultyMeterP2]
Fallback=DifficultyMeter
[NameEntryEasy3]
Fallback=NameEntry
[NameEntryEasy3 DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntryEasy3 DifficultyMeterP2]
Fallback=DifficultyMeter
[NameEntryEasy4]
Fallback=NameEntry
[NameEntryEasy4 DifficultyMeterP1]
Fallback=DifficultyMeter
[NameEntryEasy4 DifficultyMeterP2]
Fallback=DifficultyMeter

[------------------------------------------------------------------]
[ProfileSave]
#TODO
Class=@SM_VERSION>3.95 and "ScreenProfileSave" or "ScreenEnding"
Fallback=Ending
InitCommand=%function(s) Rival.SaveProfiles() SaveProfile() end
ScreenInitCommand=%function(s) Rival.SaveProfiles() SaveProfile() end
NextScreen=@Branch.AfterSaveProfiles()

[Ending]
#This screen isn't used anymore, except for saving profiles to USBs.
Class=ScreenEnding
Fallback=Attract
ShowStage=@Bool[false]
NextScreen=@IsCourseMode() and "RankingCourses" or "RankingSongs"
ScreenInitCommand=%function(s) Screens.Common.Init(s) Screens.Ending.Init(s) end
InitCommand=%function(s) Screens.Common.Init(s) Screens.Ending.Init(s) end
ScreenOnCommand=%Screens.Ending.On
HelpLuaCommand=%Screens.Ending.On
FirstUpdateCommand=Screens.Common.FirstUpdate(self) Screens.Ending.FirstUpdate(self)
ScreenFirstUpdateCommand=%Screens.Ending.FirstUpdate
HelpOffCommand=%Screens.Ending.Off
TimerSeconds=MenuTimer.Seconds(Metrics.Ending.MenuTimer)
# "Don't forget your memory card" (not used due to it being a sprite, and from hardcoded hidden behaviour)
RemoveCardP1X=Metrics.Ending.RemoveUSBX[1]
RemoveCardP1Y=Metrics.Ending.RemoveUSBY
RemoveCardP1OnCommand=visible,Bool[false]
RemoveCardP2X=Metrics.Ending.RemoveUSBX[2]
RemoveCardP2Y=Metrics.Ending.RemoveUSBY
RemoveCardP2OnCommand=visible,Bool[false]
#	CALORIES_TODAY,
#	CURRENT_COMBO,
#	PERCENT_COMPLETE,
#	PERCENT_COMPLETE_EASY,
#	PERCENT_COMPLETE_MEDIUM,
#	PERCENT_COMPLETE_HARD,
#	PERCENT_COMPLETE_CHALLENGE,
StatsTitleP1Line1X=
StatsTitleP1Line1Y=
StatsTitleP1Line1OnCommand=visible,Bool[false]) Trace("Current Calories Today P1 = "..self:GetText()
StatsTitleP1Line2X=
StatsTitleP1Line2Y=
StatsTitleP1Line2OnCommand=visible,Bool[false]) Trace("Current Combo P1 = "..self:GetText()
StatsTitleP1Line3X=
StatsTitleP1Line3Y=
StatsTitleP1Line3OnCommand=visible,Bool[false]
StatsTitleP1Line4X=
StatsTitleP1Line4Y=
StatsTitleP1Line4OnCommand=visible,Bool[false]
StatsTitleP1Line5X=
StatsTitleP1Line5Y=
StatsTitleP1Line5OnCommand=visible,Bool[false]
StatsTitleP1Line6X=
StatsTitleP1Line6Y=
StatsTitleP1Line6OnCommand=visible,Bool[false]
StatsTitleP1Line7X=
StatsTitleP1Line7Y=
StatsTitleP1Line7OnCommand=visible,Bool[false]
StatsTitleP2Line1X=
StatsTitleP2Line1Y=
StatsTitleP2Line1OnCommand=visible,Bool[false]) Trace("Current Calories Today P2 = "..self:GetText()
StatsTitleP2Line2X=
StatsTitleP2Line2Y=
StatsTitleP2Line2OnCommand=visible,Bool[false]) Trace("Current Combo P2 = "..self:GetText()
StatsTitleP2Line3X=
StatsTitleP2Line3Y=
StatsTitleP2Line3OnCommand=visible,Bool[false]
StatsTitleP2Line4X=
StatsTitleP2Line4Y=
StatsTitleP2Line4OnCommand=visible,Bool[false]
StatsTitleP2Line5X=
StatsTitleP2Line5Y=
StatsTitleP2Line5OnCommand=visible,Bool[false]
StatsTitleP2Line6X=
StatsTitleP2Line6Y=
StatsTitleP2Line6OnCommand=visible,Bool[false]
StatsTitleP2Line7X=
StatsTitleP2Line7Y=
StatsTitleP2Line7OnCommand=visible,Bool[false]
StatsValueP1Line1X=
StatsValueP1Line1Y=
StatsValueP1Line1OnCommand=visible,Bool[false]
StatsValueP1Line2X=
StatsValueP1Line2Y=
StatsValueP1Line2OnCommand=visible,Bool[false]
StatsValueP1Line3X=
StatsValueP1Line3Y=
StatsValueP1Line3OnCommand=visible,Bool[false]
StatsValueP1Line4X=
StatsValueP1Line4Y=
StatsValueP1Line4OnCommand=visible,Bool[false]
StatsValueP1Line5X=
StatsValueP1Line5Y=
StatsValueP1Line5OnCommand=visible,Bool[false]
StatsValueP1Line6X=
StatsValueP1Line6Y=
StatsValueP1Line6OnCommand=visible,Bool[false]
StatsValueP1Line7X=
StatsValueP1Line7Y=
StatsValueP1Line7OnCommand=visible,Bool[false]
StatsValueP2Line1X=
StatsValueP2Line1Y=
StatsValueP2Line1OnCommand=visible,Bool[false]
StatsValueP2Line2X=
StatsValueP2Line2Y=
StatsValueP2Line2OnCommand=visible,Bool[false]
StatsValueP2Line3X=
StatsValueP2Line3Y=
StatsValueP2Line3OnCommand=visible,Bool[false]
StatsValueP2Line4X=
StatsValueP2Line4Y=
StatsValueP2Line4OnCommand=visible,Bool[false]
StatsValueP2Line5X=
StatsValueP2Line5Y=
StatsValueP2Line5OnCommand=visible,Bool[false]
StatsValueP2Line6X=
StatsValueP2Line6Y=
StatsValueP2Line6OnCommand=visible,Bool[false]
StatsValueP2Line7X=
StatsValueP2Line7Y=
StatsValueP2Line7OnCommand=visible,Bool[false]
