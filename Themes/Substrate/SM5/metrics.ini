# NOTE: Clean slate. The 3.95 version of this theme ended up very very messy from accumulating lots of workarounds and hacks, SM5 isn't perfect but it's much cleaner with its broader Lua api.

[Global]
FallbackTheme=_fallback

[Common]
ScreenHeight=480
ScreenWidth=THEME:GetMetric("Common","ScreenHeight")*1.5
InitialScreen="Boot"

OperatorMenuScreen="ServiceMenu"
FirstAttractScreen=Branch.FirstAttract()
DefaultModifiers="1.5x, Hallway, FailImmediateContinue"

# never:
MaxCourseEntriesBeforeShowVarious=2147483647

ScreenGameplay TickEarlySeconds

# let _fallback decide?
#DefaultNoteSkinName="default"

#DifficultiesToShow
CourseDifficultiesToShow="Medium,Hard"

StepsTypesToHide="dance-solo,dance-threepanel,dance-couple"

# Setting this true means all steps types appear.
# The theme looks for this to apply late join and skip player entry.
# TODO: Keep AutoSetStyle=true for now. PlayerEntry screen isn't done yet.
AutoSetStyle=false

PercentScoreDecimalPlaces=2

# song imagedir to cache? not sure about this one
#ImageCache=

OverlayScreens="SystemOverlay,SyncOverlay,StatsOverlay,DebugOverlay,InstallOverlay"

[Boot]
AllowOperatorMenuButton=false
Class="ScreenSplash"
Fallback="CommonBlankNoBG"
PrevScreen="Boot"
AllowStartToSkip=false
MinimumLoadDelaySeconds=0
PrepareScreen=false
TimerSeconds=0.1
ForceTimer=true
TimerStealth=true
NextScreen=GAMESTATE:Dopefish() and "NameEntry" or "Boot2"

# Could use this to cache stepcharts?
[Boot2]
Fallback="Boot"
ScreenInitCommand=%Screens.Boot
NextScreen=Branch.Start()

[------Screen classes------]

[Screen]
AllowOperatorMenuButton=true

[a]

# Eval on load:
AllowOperatorMenuButton=true
HandleBackButton=true
RepeatRate=
RepeatDelay=
LightsMode=

# Eval on use:
NextScreen=
PrevScreen=
PrepareScreens=
PersistScreens=
GroupedScreens=

[CommonSimple]
# Like SWME but with Start/Back input handling (go to Prev/NextScreen)
# Curiously, ScreenInstructions is likewise but additionally handles inputs
Class="ScreenWithMenuElementsSimple"
Fallback="Common"

[Common]
#keep this commented to help me catch missing screen classes
#Class="ScreenWithMenuElements"
Fallback="Screen"

# Evaluate on open:
PlayMusic=true
MusicAlignBeat=true
DelayMusicSeconds=
CancelTransitionsOut=true
TimerSeconds=-1
TimerMetricsGroup="MenuTimer"

# Evaluate on use:
TimerStealth=true
#ShowStageDisplay=
MemoryCardIcons=true
ForceTimer=false
StopMusicOnBack=false
WaitForChildrenBeforeTweeningOut=false

TimerX=SCREEN_RIGHT-16
TimerY=SCREEN_TOP+12

MemoryCardDisplayP1X=SCREEN_LEFT+16
MemoryCardDisplayP1Y=SCREEN_BOTTOM-12
MemoryCardDisplayP1OnCommand=%function(s) local i=0 s:RunCommandsOnChildren(function(c) c:setstate(i) c:animate(false) s:blend("add") i=i+1 end) end
MemoryCardDisplayP2X=SCREEN_RIGHT-16
MemoryCardDisplayP2Y=SCREEN_BOTTOM-12
MemoryCardDisplayP2OnCommand=%function(s) local i=6 s:RunCommandsOnChildren(function(c) c:setstate(i) c:animate(false) s:blend("add") i=i+1 end) end

[Menu]
Fallback="Common"
TimerStealth=not GetPref("MenuTimer")

[CommonService]
AllowOperatorMenuButton=false
Fallback="CommonBlankNoBG"
PrevScreen="ServiceMenu"
NextScreen="ServiceMenu"

[CommonBlankNoBG]
Fallback="CommonBlank"

[CommonBlank]
Fallback="Common"

[Null]
# No fades.
# Suitable for loading transition screens such as ScreenProfileLoad/Save
Fallback="CommonBlank"

# TODO
[OptionsSharedMenu]
Fallback="Options"
[OptionsShared]
Fallback="OptionsSharedMenu"
[Options]
Fallback="Common"

[SelectMaster]
Class="ScreenSelectMaster"
Fallback="Select"

# eval on load:
ShowIcon=false
ShowScroller=false
ShowCursor=false
SharedSelection=false
UseIconMetrics=false

# don't want page 2
NumChoicesOnPage1=2147483647

PerChoiceIconElement=false
PreSwitchPageSeconds=0
PostSwitchPageSeconds=0

OptionOrderUp=
OptionOrderDown=
OptionOrderLeft=
OptionOrderRight=
OptionOrderAuto=

DoSwitchAnyways=false
WrapCursor=false
WrapScroller=false
LoopScroller=false

PerChoiceScrollElement=false
AllowRepeatingInput=false
ScrollerSecondsPerItem=0
ScrollerNumItemsToDraw=1
ScrollerTransform=function(self,offset,itemIndex,numItems) end
ScrollerSubdivisions=1
DefaultChoice=
DoublePressToSelect=false

ExplanationPage1X=
ExplanationPage1Y=
ExplanationPage1OnCommand=visible,false
ExplanationPage1OffCommand=
ExplanationPage2X=
ExplanationPage2Y=
ExplanationPage2OnCommand=visible,false
ExplanationPage2OffCommand=
MorePage1X=
MorePage1Y=
MorePage1OnCommand=visible,false
MorePage1OffCommand=
MorePage2X=
MorePage2Y=
MorePage2OnCommand=visible,false
MorePage2OffCommand=

#optional-
IconChoicePosFunction

CursorP1OffsetXFromIcon=
CursorP1OffsetYFromIcon=
CursorP2OffsetXFromIcon=
CursorP2OffsetYFromIcon=

[Select]
Fallback="Common"

ChoiceNames=
Choice(choice)=
IdleTimeoutScreen
UpdateOnMessage=
IdleCommentSeconds=10
IdleTimeoutSeconds=-1
AllowDisabledPlayerInput=false
	
[------Shared Actors------]
[DifficultyMeter]
[Banner]
ScrollRandom=false
ScrollRoulette=false
ScrollMode=false
ScrollSortOrder=false
ScrollSpeedDivisor=1

[FadingBanner]
BannerOnCommand=aux,5/GetPref("MusicWheelSwitchSpeed");ScaleToClipped,352,144;finishtweening;fadebottom,.25;diffusealpha,1

# When scrolling through the songwheel, these counterintuitively-named commands get run:
#  Banner to fade out: FadeOff (cached to cached) or FadeFromCached (cached to high res)
#  Banner beneath to be revealed: ResetFade
# Notes:
#  FadeOff doesn't fire if every song in a folder uses the same group banner
#  FadeFromCached won't fire if either banners and/or banner caching is/are disabled

# this runs first:
BannerFadeOffCommand=%function(s) \
	s:decelerate(s:getaux()) s:cropbottom(1) \
	local w=GetScreen():GetMusicWheel() \
	w:finishtweening() w:aux(0) \
	local c=(not IsCourseMode() and GetCurSong() or IsCourseMode() and GetCurCourse()) and .75 or 0 \
	w:GetChild("Highlight"):diffusecolor(c,c,c,1) \
end

# then when the wheel settles, this runs:
BannerFadeFromCachedCommand=%function(s) \
	s:decelerate(s:getaux()) s:cropbottom(1) \
	local w=GetScreen():GetMusicWheel() \
	if not w:IsSettled() then \
		s:hurrytweening(.2) \
	else \
		if not IsCourseMode() and GetCurSong() or IsCourseMode() and GetCurCourse() then \
			w:GetChild("Highlight"):stoptweening() \
			w:aux(1) \
		end \
	end \
end

BannerResetFadeCommand=visible,true;finishtweening;cropbottom,-.25

BannerRouletteCommand=
BannerRandomCommand=

[MenuTimer]
WarningStart=15
WarningBeepStart=9
MaxStallSeconds=0.0
# Format functions get run per frame.
HurryUpTransition=15
#main:
Text1OnCommand=horizalign,"right"
Text1FormatFunction=math.ceil
#fraction:
Text2OnCommand=visible,false
Text2FormatFunction=function(n) return n-math.floor(n) end
#SM5:
Warning16Command=%MenuTimerWarn
Warning15Command=%MenuTimerWarn
Warning14Command=%MenuTimerWarn
Warning13Command=%MenuTimerWarn
Warning12Command=%MenuTimerWarn
Warning11Command=%MenuTimerWarn
Warning10Command=%MenuTimerWarn
Warning9Command=%MenuTimerWarn
Warning8Command=%MenuTimerWarn
Warning7Command=%MenuTimerWarn
Warning6Command=%MenuTimerWarn
Warning5Command=%MenuTimerWarn
Warning4Command=%MenuTimerWarn
Warning3Command=%MenuTimerWarn
Warning2Command=%MenuTimerWarn
Warning1Command=%MenuTimerWarn
Warning0Command=stopeffect

[BPMDisplay]
Cycle=not IsCourseMode()
ShowQMarksInRandomCycle=false
NoBpmText=" "
Separator="-"
SetNormalCommand=
FormatString="%03.0f"
QuestionMarksText="xxx"

SetNoBpmCommand=
SetChangeCommand=
SetRandomCommand=
SetExtraCommand=
RandomCycleSpeed=0.2
CourseCycleSpeed=0.2


[PercentageDisplay]
#TODO: metric it out?
PercentDecimalPlaces=2
PercentTotalSize=5
PercentUseRemainder=false
PercentP1X=0
PercentP1Y=0
PercentP1OnCommand=
PercentP1OffCommand=
PercentP2X=0
PercentP2Y=0
PercentP2OnCommand=
PercentP2OffCommand=
PercentRemainderP1X=0
PercentRemainderP1Y=0
PercentRemainderP1OnCommand=
PercentRemainderP1OffCommand=
PercentRemainderP2X=0
PercentRemainderP2Y=0
PercentRemainderP2OnCommand=
PercentRemainderP2OffCommand=
DancePointsDigits=1
DancePointsP1X=0
DancePointsP1Y=0
DancePointsP1OnCommand=
DancePointsP1OffCommand=
DancePointsP2X=0
DancePointsP2Y=0
DancePointsP2OnCommand=
DancePointsP2OffCommand=
# Keep this disabled to force Add percent display (normal ITG.) Subtractive/Average percent displays don't work properly.
ApplyScoreDisplayOptions=false

[ArtistDisplay]
Fallback="HelpDisplay"

[BitmapText]
# Roulette and NetEvaluation's player list.

[HelpDisplay]
TipShowTime=3
TipOnCommand=shadowlength,0;zoom,15/20

[LyricDisplay]
# TODO- Yuck. Move the lyric tweens into a script file.

LyricBackChangedCommand=settext,LyricText;finishtweening;diffusecolor,GetDimmedColor(LyricColor,0.5);cropleft,0;\
y,32;diffusealpha,0;decelerate,0.3;addy,-16;diffusealpha,1;\
sleep,0.75*LyricDuration;cropleft,1;sleep,0.25*LyricDuration;\
decelerate,0.3;addy,-16;diffusealpha,0

LyricFrontChangedCommand=settext,LyricText;finishtweening;diffusecolor,LyricColor;cropright,1;\
y,32;diffusealpha,0;decelerate,0.3;addy,-16;diffusealpha,1;\
sleep,0.75*LyricDuration;cropright,0;sleep,0.25*LyricDuration;\
decelerate,0.3;addy,-16;diffusealpha,0

InLength=0.3
OutLength=0.3

[ScreenDebugOverlay]
Fallback="Screen"
[DebugOverlay]
Class="ScreenDebugOverlay"
Fallback="ScreenDebugOverlay"

HeaderTextOnCommand=
ButtonTextToggledCommand=%function(s) s:finishtweening() local z=s:GetZoom() s:zoom(1.2*z) s:decelerate(.25) s:zoom(z) end

[a]
#Eval on boot: (note the screen name is hardcoded as ScreenDebugOverlay
BackgroundColor=
LineOnColor=
LineOffColor=
LineStartY=
LineSpacing=
LineButtonX=
LineFunctionX=
PageStartX=
PageSpacingX=

#Eval on use (screen open):
HeaderTextX=
HeaderTextY=
HeaderTextOnCommand=
PageTextOnCommand= //note Y value is still hardcoded (acked in sm5 source)
# per debug line:
ButtonTextOnCommand=
FunctionTextOnCommand=

# page change (run on UpdateText() routine for each page)
PageTextGainFocusCommand=
PageTextLoseFocusCommand=

# upon input (after the command is run):
ButtonTextToggledCommand=

[ScreenSyncOverlay]
Fallback="Screen"
[SyncOverlay]
Fallback="ScreenSyncOverlay"

[ScreenStatsOverlay]
[StatsOverlay]
Fallback="ScreenStatsOverlay"

# Stats and skips-box.

# FPS display; top right.
StatsX=SCREEN_RIGHT-16
StatsY=SCREEN_TOP+16
StatsOnCommand=horizalign,"right";vertalign,"top"

# This still has most of the same old hardcoded behaviour
# inherited from 3.95,
# except now you can specify positioning (below).
# Do I -have- to bust out AF capture once more..?
ShowSkips=true
# itg values:
SkipX=412
SkipY=100
SkipWidth=160
ScreenOnCommand=RunCommandsOnChildren,function(s) \
	if IsBitmapText(s) and s:GetName()~="Stats" then \
		s:zoom(.5) s:horizalign("left") s:addx(-80) \
	end \
end

[ScreenSystemLayer]
Fallback="SystemOverlay"
#"Screen"

[SystemOverlay]
Class="ScreenSystemLayer"
Fallback="Screen"
#SystemLayer"
# In SM5, this is just two AutoActor overlays; sprOverlay, errLayer.

#JoinOnly means return blank string if !PlayersCanJoin()
CreditsJoinOnly=false

[ScreenInstallOverlay]
[InstallOverlay]
Fallback="ScreenInstallOverlay"

[Prompt]
Fallback="Null"

[ScreenPrompt]
# NOTE: SM5 hardcodes "ScreenPrompt" and falling back doesn't work for some reason, although it used to work in 3.95
Class="ScreenPrompt"
Fallback="Prompt"
BackgroundOnCommand=diffusealpha,0;linear,0.3;diffusealpha,1
QuestionX=SCREEN_CENTER_X
QuestionY=SCREEN_CENTER_Y-32
QuestionOnCommand=wrapwidthpixels,576;maxheight,234
QuestionOffCommand=
CursorOnCommand=
CursorOffCommand=
#Type PROMPT_OK
Answer1Of1Text="OK"
Answer1Of1X=SCREEN_CENTER_X
Answer1Of1Y=SCREEN_CENTER_Y+112
Answer1Of1OnCommand=zoom,1.5
Answer1Of1OffCommand=
#Type PROMPT_YES_NO
Answer1Of2Text="Yes"
Answer1Of2X=SCREEN_CENTER_X-96
Answer1Of2Y=SCREEN_CENTER_Y+112
Answer1Of2OnCommand=zoom,1.5
Answer1Of2OffCommand=
Answer2Of2Text="No"
Answer2Of2X=SCREEN_CENTER_X+96
Answer2Of2Y=SCREEN_CENTER_Y+112
Answer2Of2OnCommand=zoom,1.5
Answer2Of2OffCommand=
#Type PROMPT_YES_NO_CANCEL
#the editor asks "Do you want to save changes before exiting?"
Answer1Of3Text=@GetEnv("EditMode") and "Save" or "Yes"
Answer1Of3X=SCREEN_CENTER_X-192
Answer1Of3Y=SCREEN_CENTER_Y+112
Answer1Of3OnCommand=zoom,1.5
Answer1Of3OffCommand=
Answer2Of3Text=@GetEnv("EditMode") and "Discard" or "No"
Answer2Of3X=SCREEN_CENTER_X
Answer2Of3Y=SCREEN_CENTER_Y+112
Answer2Of3OnCommand=zoom,1.5
Answer2Of3OffCommand=
Answer3Of3Text="Cancel"
Answer3Of3X=SCREEN_CENTER_X+192
Answer3Of3Y=SCREEN_CENTER_Y+112
Answer3Of3OnCommand=zoom,1.5
Answer3Of3OffCommand=

[EditCoursesSongMenu]
[EditMenu]
# I'm guessing this inherits all the bullshit from 3.95

# eval on open:
EditMenuType=(section to load selector (named EditMenu) from)

ExplanationX=
ExplanationY=
NumStepsLoadedFromProfileX=
NumStepsLoadedFromProfileY=
NumStepsLoadedFromProfileOnCommand=
NoSongsMessageX=
NoSongsMessageY=
NoSongsMessageOnCommand=

# on refresh explanation (when you move up/down - use this to move the selector.. just like in 3.95):
ExplanationOnCommand=

[EditMenuRow]
[EditMenuAction]
[EditDifficultyMeter]
[EditPractice]
[EditInit]
[Edit]
Fallback="CommonBlank"
# Is this the 3.95 screen but with a couple of additional metric bindings?

# eval on boot: (hardcoded "ScreenEdit")
EditModifiers="M600, overhead, note"
LoopOnChartEnd=false

# eval on open: (hardcoded "ScreenEdit")
EditMode=

# eval on use:
PlayRecordHelpText=
EditHelpText=

# eval on use: - hardcoded "ScreenEdit"
SetModScreen=
OptionsScreen=

# eval on use (open)
EditHelpX=
EditHelpY=
EditHelpOnCommand=
InfoX=
InfoY=
InfoOnCommand=
PlayRecordHelpX=
PlayRecordHelpY=
PlayRecordHelpOnCommand=

# eval on use:
Overlay(edit state)Command=
Underlay(edit state)Command=

# messages: "Judgment"

# lua: GetScreen():GetEditState()

# edit states: STATE_EDITING STATE_PLAYING STATE_RECORDING STATE_RECORDING_PAUSED

[EditSaveSync]

[MiniMenu]

[ScreenMiniMenuMainMenu] // With populated menu entries
[ScreenMiniMenuAlterMenu]
[ScreenMiniMenuAreaMenu]
[ScreenMiniMenuStepsInformation]
[ScreenMiniMenuStepsData]
[ScreenMiniMenuSongInformation]
[ScreenMiniMenuTimingDataInformation]
[ScreenMiniMenuTimingDataChangeInformation]
[ScreenMiniMenuBackgroundChange]
[ScreenMiniMenuInsertTapAttack]
[ScreenMiniMenuInsertCourseAttack] //also for step attacks
[ScreenMiniMenuCourseDisplay]

[ // dynamically fill these in:
[ScreenMiniMenuEditHelp]
[ScreenMiniMenuAttackAtTimeMenu]
[ScreenMiniMenuIndividualAttack]
[ScreenMiniMenuKeysoundTrack]

[ServiceMenu]
# Simple options screen to get by for now.
Fallback="Common"
Class="ScreenWithMenuElementsSimple"
NextScreen=Branch.GameBack()
PrevScreen=Branch.GameBack()
TimerSeconds=-1
PlayMusic=true
MusicAlignBeat=true
ScreenOnCommand=%function(s) ForeachPlayer(function(pn) SCREENMAN:set_input_redirected(pn,true) end) end
ScreenOffCommand=%function(s) ForeachPlayer(function(pn) SCREENMAN:set_input_redirected(pn,false) end) end

[Bookkeeping]
Fallback="CommonService"
# Eval on use:
ShowSongPlays=true
ShowLastDays=true
ShowLastWeeks=true
ShowDayOfWeek=true
ShowHourOfDay=true

[ScreenMapControllers]
Fallback="CommonBlankNoBG"
[Remap]
Fallback="ScreenMapControllers"
Class="ScreenMapControllers"
PrevScreen=Branch.Title()
NextScreen=Branch.Title()

[ScreenTestInput]
Fallback="CommonBlankNoBG"
[TestInput]
Class="ScreenTestInput"
Fallback="ScreenTestInput"
PrevScreen=Branch.Title()

PlayMusic=true

[Exit]
Class="ScreenExit"
Fallback="Common"

[------Common------]
[PlayerStageStats]
# Clear lamps
NumGradeTiersUsed=3
GradeTier02IsAllW2s=true
GradePercentTier01=1
GradePercentTier02=-10000000
GradePercentTier03=-10000000

[HighScore]
EmptyName="----"

[------Attract Screens------]
[ScreenAttract]
# note: this one (eval on use) is hardcoded to read from "ScreenAttract"
BackGoesToStartScreen=false

[Attract]
Fallback="CommonBlank"
Class="ScreenAttract"
TimerStealth=true
CancelTransitionsOut=false

# Eval on load:
ResetGameState=true
AttractVolume=GetPref("SoundVolumeAttract")

# Eval on use:
StartScreen=Branch.AttractCancel()

# In case a screen doesn't define any next screen in the sequence.
PrevScreen=Branch.FirstAttract()
NextScreen=Branch.FirstAttract()

[--]
[Jukebox]
Class="ScreenJukebox"
Fallback="Gameplay"
ShowCourseModifiersProbability=1
AllowAdvancedModifiers=false
AllowStyleTypes="OnePlayerTwoSides,TwoPlayersTwoSides"

[Demonstration]
Class="ScreenDemonstration"
Fallback="Jukebox"
SecondsToShow=30
DifficultiesToShow="easy,medium"
NextScreen="Logo"
ShowCourseModifiersProbability=0
StartScreen=Branch.AttractCancel()

[HowToPlay]
Fallback="Demonstration"
NextScreen="RankingSongs"
DifficultiesToShow="beginner"
AllowStyleTypes="OnePlayerOneSide"
SecondsToShow=41

[--]
[Logo]
# no ScreenLogo class; use the Attract class instead.
Fallback="Attract"
# ITG theme has had problems with the demo screens. You can skip it there so do the same here too.
NextScreen=GetPref("ShowInstructions") and "HowToPlay" or "RankingSongs"
PrevScreen=GetPref("ShowInstructions") and "HowToPlay" or "RankingSongs"
TimerSeconds=15
ForceTimer=true

[--]
[RankingSongs]
Fallback="Ranking"
HighScoresType="HighScoresType_AllSteps"
NextScreen=CanPlayMarathons() and SONGMAN:GetNumCourses()>0 and "RankingCourses" or THEME:GetMetric("RankingCourses","NextScreen")

[RankingCourses]
Fallback="Ranking"
HighScoresType="HighScoresType_NonstopCourses"
NextScreen=CanPlayMarathons() and SONGMAN:GetNumCourses()>0 and "RankingSurvival" or THEME:GetMetric("RankingSurvival","NextScreen")

[RankingOni]
Fallback="Ranking"
HighScoresType="HighScoresType_OniCourses"

[RankingSurvival]
Fallback="Ranking"
HighScoresType="HighScoresType_SurvivalCourses"
NextScreen=GetPref("ShowInstructions") and "Demonstration" or THEME:GetMetric("Demonstration","NextScreen")

[Ranking]
# NOTE: Single only.
Class="ScreenHighScores"
Fallback="Attract"
ManualScrolling=false
NumColumns=4
MaxItemsToShow=15
ColumnDifficulty1="Difficulty_Easy"
ColumnDifficulty2="Difficulty_Medium"
ColumnDifficulty3="Difficulty_Hard"
ColumnDifficulty4="Difficulty_Challenge"
ColumnStepsType1=GAMEMAN:GetFirstStepsTypeForGame(GAMESTATE:GetCurrentGame())
ColumnStepsType2=GAMEMAN:GetFirstStepsTypeForGame(GAMESTATE:GetCurrentGame())
ColumnStepsType3=GAMEMAN:GetFirstStepsTypeForGame(GAMESTATE:GetCurrentGame())
ColumnStepsType4=GAMEMAN:GetFirstStepsTypeForGame(GAMESTATE:GetCurrentGame())
ScrollerOnCommand=x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y
ScrollerItemsToDraw=6
ScrollerSecondsPerItem=32/60
ScrollerItemTransformFunction=function(s,pos,itemi,numitems) s:y(pos*64) end

[------Title------]
[TitleJoin]

# Just a simple "press start to join and then move to the next screen.
Fallback="SelectMaster"
PrevScreen=Branch.TitleBack()
NextScreen=Branch.TitleNext()
Class="ScreenTitleMenu"
StopMusicOnBack=true
ShowScroller=false
ChoiceNames="s"
Choices="applydefaultoptions;screen,"..Branch.TitleNext()

CoinModeChangeScreen=Branch.Title()
# IdleTimeout* doesn't apply to pay mode. Pay mode holds this screen until Start is pressed.
IdleTimeoutSeconds=GAMESTATE:GetCoinMode()==COIN_MODE_FREE and 30 or -1
IdleTimeoutScreen=Branch.FirstAttract()

#SharedPreviewAndCursor=true
AllowDisabledPlayerInput=true
WrapCursor=false
WrapScroller=false

OverrideLockInputSeconds=false
LockInputSeconds=Metrics.Title.LockInputTime

#PerChoiceScrollElement must be false or the game crashes due to missing file (crash message is misleading)
PerChoiceScrollElement=false
SharedSelection=true

[TitleMenu]
Class="ScreenWithMenuElements"
Fallback="TitleJoin"
ScreenInitCommand=%function(s) GAMESTATE:Reset() end
TimerSeconds=-1

[-----------------------------------------------------------
[PlayerEntry]
# Drive this screen with lua, instead of relying on ScreenSelectMaster's really awkward logic.
Fallback="Common"
Class="ScreenWithMenuElementsSimple"
PrevScreen=Branch.PlayerEntryBack()
NextScreen=Branch.PlayerEntryNext()

TimerSeconds=20
TimerStealth=not GetPref("MenuTimer")

# NOTE: Lua doesn't receive Menutimer expiry events. Instead, use ElementsSimple and allow the screen to handle it only:
# (Same for any lua-driven screen actually)
ScreenOnCommand=%function(s) ForeachPlayer(function(pn) SCREENMAN:set_input_redirected(pn,true) end) end
ScreenOffCommand=%function(s) ForeachPlayer(function(pn) SCREENMAN:set_input_redirected(pn,false) end) end

[Caution]
# Load the profile in this screen too.
Class="ScreenProfileLoad"
Fallback="Null"
# HaveProfileToLoad() checks if a profile is present, and Continue() actually loads the profile-data then transitions to next screen.
ScreenOnCommand=Continue
NextScreen=Branch.CautionNext()
LoadEdits=false

[------Game Screens------]

[--Select Music--]
[SelectMusic]
Fallback="Menu"
Class="ScreenSelectMusic"
PrevScreen=Branch.SelectMusicBack()
NextScreen=Branch.SelectMusicNext()
TimerSeconds=120

# "DisplayLanguageChanged" message gets fired when F9 is pressed (change translit<->native titles)

# Played immediately before musicwheel BeginScreen:
ScreenModsCommand=
IdleCommentSeconds=20
SampleMusicDelayInit=0.5
SampleMusicDelay=0.5
SampleMusicLoops=true
SampleMusicPreviewMode="SampleMusicPreviewMode_Normal"
SampleMusicFallbackFadeInSeconds=2
SampleMusicFadeOutSeconds=1
DoRouletteOnMenuTimer=false
RouletteTimerSeconds=30

AlignMusicBeat=true
Codes="CodeMod Codes"
MusicWheelType="WheelSelectMusic"

SelectMenuAvailable=true
#sort menu:
ModeMenuAvailable=true
UseOptionsList=false
# When releasing select, add a screen on top, instead of opening the clumsy-to-use options list UI.
# Shame we can't implement it ourself and have a sane mods menu overlay per player.
# BUG: This still opens the menu despite doing a selectmenu action.
#      The source handles this first before handling selectmenu (should be vice versa)
#      Keep this off.
UsePlayerSelectMenu=false
SelectMenuScreenName=

OptionsListTimeout=

# Use ITG behaviour for Select. (Sel+Left/Right - change difficulty, Sel+Start - change sort (enter sort menu, or cycle through sorts))
SelectMenuChangesDifficulty=true

TwoPartSelection=false
TwoPartConfirmsOnly=false
TwoPartTimerSeconds=
WrapChangeSteps=false
NullScoreString="----"
PlaySoundOnEnteringOptionsMenu=true

# customise which inputs change song
PreviousSongButton="MenuLeft"
NextSongButton="MenuRight"

# with ChangeStepsWithGameButtons, bypassing CodeDetector.
# note that this means you can't UU or DD on pad to change difficulty.
ChangeStepsWithGameButtons=false
PreviousDifficultyButton=""
NextDifficultyButton=""

# with ChangeGroupsWithGameButtons
ChangeGroupsWithGameButtons=false
PreviousGroupButton=""
NextGroupButton=""

MusicWheelX=SCREEN_CENTER_X
MusicWheelY=SCREEN_CENTER_Y+84
MusicWheelOnCommand=%function(s) \
	s:ztestmode("writeonfail") \
	local h=s:GetChild("Highlight") \
	s:SetUpdateFunction(function(s) \
		local doflash=s:getaux()==1 \
		if doflash then \
			local c=1-math.adsin(360*h:GetSecsIntoEffect()) \
			h:diffusecolor(c,c,c,1) \
		end \
	end) \
end

MusicWheelOffCommand=%function(s) \
	s:aux(0)\
	local h=s:GetChild("Highlight") \
end

MusicWheelSelectMenuOpenedMessageCommand=%function(s,p) SOUND:PlayOnce(THEME:GetPathS(GetScreen():GetName(),"select down")) end

BannerX=SCREEN_CENTER_X
BannerY=SCREEN_CENTER_Y-144

CDTitleOnCommand=visible,false
#cd titles why not
CDTitleX=SCREEN_CENTER_X+144
CDTitleY=SCREEN_CENTER_Y-88
#CDTitleOnCommand=draworder,2;rotationx,5.625;pitch,5.625;effectclock,"beat";effectmagnitude,0,180,0
CDTitleFrontCommand=cullmode,"back";spin
CDTitleBackCommand=cullmode,"front";spin;diffuse,0,0,0,.75;glow,.5,.5,.5,.75
CDTitleOffCommand=

# So in sm5 they removed everything unnecessary except Score and ScoreFrame. okkkkkkk
ScoreP1X=
ScoreP1Y=
ScoreP1OnCommand=visible,false
ScoreP1OffCommand=
ScoreP2X=
ScoreP2Y=
ScoreP2OnCommand=visible,false
ScoreP2OffCommand=
ScoreFrameP1X=
ScoreFrameP1Y=
ScoreFrameP1OnCommand=visible,false
ScoreFrameP1OffCommand=
ScoreFrameP2X=
ScoreFrameP2Y=
ScoreFrameP2OnCommand=visible,false
ScoreFrameP2OffCommand=

# upon BeginScreen:
OptionsMenuAvailable=true
ShowOptionsMessageSeconds=3

[SelectMusicCourse]
#Alternate menu music.
Fallback="SelectMusic"

[CodeMod Codes]
Fallback="CodeDetector"
[CodeDetector]

# TODO- 
PrevSteps1="MenuUp"
PrevSteps2="Up,Up"
NextSteps1="MenuDown"
NextSteps2="Down,Down"
NextSort1="Up,Down,Up,Down"
NextSort2=""
NextSort3=""
NextSort4=""
ModeMenu1="MenuLeft+MenuRight"
ModeMenu2=""
Mirror=""
Left=""
Right=""
Shuffle=""
SuperShuffle=""
NextTransform=""
NextScrollSpeed=""
PreviousScrollSpeed=""
NextAccel=""
NextEffect=""
NextAppearance=""
NextTurn=""
Reverse=""
HoldNotes=""
Mines=""
Dark=""
CancelAll=""
NextGroup=""
PrevGroup=""
CloseCurrentFolder=""
Hidden=""
RandomVanish=""
SaveScreenshot1=""
SaveScreenshot2=""
# on the player options menu.
CancelAllPlayerOptions=GetCodeForGame("CancelAllPlayerOptions")
Backwards=""
NextTheme=""
NextTheme2=""
NextAnnouncer=""
NextAnnouncer2=""
BackInEventMode=""

[MusicWheelBase]
Fallback="WheelBase"

# TODO replace with our own.
SortOrders={ "SortOrder_Group", "SortOrder_Title", "SortOrder_BPM", "SortOrder_Artist", "SortOrder_Popularity", "SortOrder_Recent" }

ModeMenuChoiceNames="Preferred,Group,Title,Bpm,Popularity,TopGrades,Artist,EasyMeter,MediumMeter,HardMeter,ChallengeMeter,DoubleEasyMeter,DoubleMediumMeter,DoubleHardMeter,DoubleChallengeMeter,Genre,Length,Recent"
# ModeMenuChoiceNames="Preferred,Group,Title,Bpm,Popularity,TopGrades,Artist,EasyMeter,MediumMeter,HardMeter,ChallengeMeter,DoubleEasyMeter,DoubleMediumMeter,DoubleHardMeter,DoubleChallengeMeter,Genre,Length,Recent,NormalMode,BattleMode"
ChoicePreferred="sort,Preferred"
ChoiceGroup="sort,Group"
ChoiceTitle="sort,Title"
ChoiceBpm="sort,BPM"
ChoicePopularity="sort,Popularity"
ChoiceTopGrades="sort,TopGrades"
ChoiceArtist="sort,Artist"
ChoiceGenre="sort,Genre"
ChoiceEasyMeter="sort,EasyMeter"
ChoiceMediumMeter="sort,MediumMeter"
ChoiceHardMeter="sort,HardMeter"
ChoiceChallengeMeter="sort,ChallengeMeter"
ChoiceDoubleEasyMeter="sort,DoubleEasyMeter"
ChoiceDoubleMediumMeter="sort,DoubleMediumMeter"
ChoiceDoubleHardMeter="sort,DoubleHardMeter"
ChoiceDoubleChallengeMeter="sort,DoubleChallengeMeter"
ChoiceLength="sort,Length"
ChoiceRecent="sort,Recent"
ChoiceNormalMode="playmode,regular"
ChoiceBattleMode="playmode,battle"

[MusicWheel]
HighlightOnCommand=effectclock,"beat"
HighlightOffCommand=finishtweening;linear,THEME:GetMetric("WheelBase","SwitchSeconds");diffusecolor,.75,.75,.75,1

[WheelSelectMusic]
# Don't name it "MusicWheel" due to clashes in _fallback.
Fallback="MusicWheelBase"

# roulette as fast as possible (1 item per frame)
RouletteSwitchSeconds=0
# land immediately on a song
RouletteSlowDownSwitches=-2

NumSectionColors=1
SectionColor1={1,1,1,1}
SongRealExtraColor={1,1,1,1}
SortMenuColor={1,1,1,1}

ShowRoulette=false
ShowPortal=true
ShowRandom=false
RandomPicksLockedSongs=false

MostPlayedSongsToShow=50
RecentSongsToShow=50

UseEasyMarkerFlag=false
UseSectionsWithPreferredGroup=false
OnlyShowActiveSection=false
HideActiveSectionTitle=false

# for lua's benefit?
RemindWheelPositions=true

RouletteColor={0,0,0,1}
RandomColor={0,0,0,1}
PortalColor={0,0,0,1}
EmptyColor={0,0,0,1}
NonstopColor={0,0,0,1}

# Add nonstop (1st stage only, or any stage in event)
#CustomWheelItemNames="" --Later TODO: Nonstop on the wheel. Match ITG for now.
CustomWheelItemNames=CanPlayMarathons() and "Nonstop" or ""
CustomWheelItemNonstop="playmode,Nonstop;screen,"..Branch.SelectMusicCourse()

[WheelBase]
SwitchSeconds=0.1
LockedInitialVelocity=5
#crashes if set to 0:
ScrollBarHeight=1
ScrollBarOnCommand=visible,false
ItemTransformFunction=function(self,offset,itemIndex,numItems) self:y(24*offset) end
NumWheelItems=13
# can always change this later
WheelItemLockedColor=.5,.5,.5,.5
# TODO sort transition animation
MusicWheelSortOnCommand=%function(s) s:RunCommandsOnChildren(function(s) Trace(s:GetName()) end) end
MusicWheelSortOffCommand=
MusicWheelItemSortOnCommand=%function(s) end
MusicWheelItemSortOffCommand=
HighlightOnCommand=
HighlightOffCommand=
HighlightSortOnCommand=
HighlightSortOffCommand=

[MusicWheelItem]
Fallback="WheelItemBase"
SongNameX=0
SongNameY=0
SongNameOnCommand=%WheelItemEntryTextOn
CourseX=0
CourseY=0
CourseOnCommand=%WheelItemEntryTextOn
SectionExpandedX=0
SectionExpandedY=0
SectionExpandedOnCommand=%WheelItemFolderTextOn
SectionCollapsedX=0
SectionCollapsedY=0
SectionCollapsedOnCommand=%WheelItemFolderTextOn
SectionCountX=0
SectionCountY=0
SectionCountOnCommand=diffusealpha,0
RouletteX=0
RouletteY=0
RouletteOnCommand=%WheelItemSpecialTextOn
RandomX=0
RandomY=0
RandomOnCommand=%WheelItemSpecialTextOn
PortalX=0
PortalY=0
PortalOnCommand=%WheelItemSpecialTextOn
SortX=0
SortY=0
SortOnCommand=%WheelItemEntryTextOn
ModeX=0
ModeY=0
ModeOnCommand=%WheelItemEntryTextOn
CustomX=0
CustomY=0
CustomOnCommand=%WheelItemSpecialTextOn

# Don't use these built ins. Use our own Lua-driven one.
GradesShowMachine=false

WheelNotifyIconX=0
WheelNotifyIconY=0
WheelNotifyIconOnCommand=visible,false

GradeP1X=0
GradeP1Y=0
GradeP2X=0
GradeP2Y=0

[WheelItemBase]
#Init command gets run on each item

[WheelNotifyIcon]
# TODO: Use our own one instead.
ShowTraining=false
BlinkPlayersBest=false
NumIconsToShow=0

[SongManager]
# always white:
NumSongGroupColors=1
SongGroupColor1={1,1,1,1}
NumCourseGroupColors=1
CourseGroupColor1={1,1,1,1}
NumProfileSongGroupColors=1
ProfileSongGroupColor1={1,1,1,1}

# never:
ExtraColorMeter=2147483647
ExtraColor=
UseUnlockColor=false
UnlockColor=
UsePreferredSortColor=false
MoveUnlocksToBottomOfPreferredSort=false

# this theme doesn't use OMES, but in case we ever reach it:
ExtraStage2DifficultyMax=2147483647

[Course] course type colours

[TextBanner]
TitleOnCommand=
SubtitleOnCommand=
ArtistOnCommand=visible,false

AfterSetCommand=%function(s) \
	local st=s:GetChild("Subtitle") \
	local stt=st:GetText() \
	if stt~="" then st:settext(" "..stt) end \
	st:diffusealpha(.75) \
	AlignTexts("center",s:GetChild("Title"),st) \
end

# N/A
ArtistPrependString=""

[GrooveRadar]
EdgeWidth=2
CenterAlpha=0.5
LabelOnCommand=stoptweening;diffusealpha,0
LabelOnDelay=0
LabelOnCommandPostDelay=linear,0.2;diffusealpha,1
Label1X=0
Label1Y=-84
Label2X=-92
Label2Y=-28
Label3X=92
Label3Y=-28
Label4X=64
Label4Y=68
Label5X=-64
Label5Y=68
RadarValueMapP1OnCommand=
RadarValueMapP2OnCommand=

[GameState]
AllowLateJoin=false

UseNameBlacklist=true
DefaultSort="Group"
DefaultSong="/Songs/In The Groove 2/Birdie/"

AreStagePlayerModsForced=false
AreStageSongModsForced=false

[--Mods Menu--]

[ModsMenu]
# NOTE: Roll our own mods menu in lua to avoid ScreenOptions mess
Fallback="Menu"
Class="ScreenWithMenuElementsSimple"
NextScreen=Branch.ModsMenuNext()
PrevScreen=Branch.ModsMenuBack()
TimerSeconds=90

PlayMusic=false
MusicAlignBeat=true

RepeatRate=20
RepeatDelay=1/4

ScreenOnCommand=%function(s) ForeachPlayer(function(pn) SCREENMAN:set_input_redirected(pn,true) end) end
ScreenOffCommand=%function(s) ForeachPlayer(function(pn) SCREENMAN:set_input_redirected(pn,false) end) end

[--Gameplay--]
[Stage]
Fallback="Common"
Class="ScreenSplash"
NextScreen=Branch.StageNext()
PrevScreen=Branch.StageBack()
AllowStartToSkip=false
PrepareScreen=Branch.StageNext()

MinimumLoadDelaySeconds=0
TimerSeconds=2
ForceTimer=true
TimerStealth=true

[ScreenGameplay]
# Metrics hardcoded to read from "ScreenGameplay"
InitialBackgroundBrightness=1
SecondsBetweenComments=5
ScoreKeeperClass="ScoreKeeperNormal"
ForceImmediateFailForBattery=false
Fallback="CommonBlank"
[Gameplay]
# to use strings
Fallback="ScreenGameplay"
PrevScreen=Branch.GameplayBack()
NextScreen=Branch.GameplayNext()

Class="ScreenGameplayNormal"
#messages: "Judgment"
#eval on load
PlayerType="PlayerGameplay"
PlayerInitCommand=y,SCREEN_CENTER_Y

GiveUpSeconds=2
MusicFadeOutSeconds=0.5

# NOTE: Remove wayoff
ScreenInitCommand=%function(s) SetPref("TimingWindowSecondsW5",GetPref("TimingWindowSecondsW4")) end

OutTransitionLength=1
CourseTransitionLength=1

BeginFailedDelay=0
MinSecondsToStep=3
MinSecondsToMusic=0
MinSecondsToStepNextSong=2

// configurable:
UnpauseWithStart=
SurvivalModOverride=
[Gameplay]

FailOnMissCombo=30
AllowCenter1Player=true
StartGivesUp=true
BackGivesUp=false
SelectSkipsSong=false
GivingUpGoesToPrevScreen=false

DebugOnCommand=
# "hold start to quit" text
DebugX=SCREEN_CENTER_X
DebugY=SCREEN_CENTER_Y
DebugStartOnCommand=finishtweening;decelerate,0.15;diffusealpha,1
DebugBackOnCommand=finishtweening;decelerate,0.15;diffusealpha,1
DebugTweenOffCommand=stoptweening;accelerate,0.15;diffusealpha,0
# abort fadeout tween is hardcoded

# TODO: Find what PlayerX is and match it so the score is positioned above the targets centre.
LifeP1X=SCREEN_LEFT+16+math.ceil((SCREEN_WIDTH-640)*0.09)
LifeP1Y=SCREEN_CENTER_Y
LifeP2X=SCREEN_RIGHT-16-math.ceil((SCREEN_WIDTH-640)*0.09)
LifeP2Y=SCREEN_CENTER_Y
-- Coloured stream, 
LifeP1OnCommand=%function(s) s:rotationz(-90) Sweep.In(s,1) s:SetUpdateRate(12) s:hurrytweening(12) \
	local i=1 \
	s:GetChild("Stream"):RunCommandsOnChildren(function(c) \
		if i==1 and not IsDemonstration() then ApplyUIColor(c,PLAYER_1) else c:diffusecolor(1,1,1,1) end i=i+1 \
	end) \
end
LifeP1OffCommand=%function(s) s:SetUpdateRate(1) Sweep.Out(s,1) end
LifeP2OnCommand=%function(s) s:rotationz(-90) Sweep.In(s,2) s:SetUpdateRate(12) s:hurrytweening(12) \
	local i=1 \
	s:GetChild("Stream"):RunCommandsOnChildren(function(c) \
		if i==1 and not IsDemonstration() then ApplyUIColor(c,PLAYER_2) else c:diffusecolor(1,1,1,1) end i=i+1 \
	end) \
end
LifeP2OffCommand=%function(s) Sweep.Out(s,2) s:SetUpdateRate(1) end
ScoreP1X=PlayerX(1)
ScoreP1Y=SCREEN_TOP+20
ScoreP2X=PlayerX(2)
ScoreP2Y=SCREEN_TOP+20
ScoreP1OnCommand=%function(s) Sweep.InCenter(s,-1) end
ScoreP1OffCommand=%function(s) Sweep.OutCenter(s,-1) end
ScoreP2OnCommand=%function(s) Sweep.InCenter(s,-1) end
ScoreP2OffCommand=%function(s) Sweep.OutCenter(s,-1) end


#difficulty icon/meter - use the progress bar's one since we know where to align that
StepsDisplayP1OnCommand=visible,false
StepsDisplayP2OnCommand=visible,false

# eval on use?
ShowLifeMeterForDisabledPlayers=false
ShowScoreInRave=true
SongPositionMeterWidth=
# setting this true means only the first song plays:
StopCourseEarly=false

SongBackground
SongForeground

#notefield margins
MarginFunction

PlayerOnCommand=

Life(player info?) X/Y


# net scoreboard
ScoreboardC1P1X			# cols 1-3, players 1-2


#score display
Score(player info?)X/Y

SecondaryScore (same as Score)


#course song number
SongNumberFormat=
SongNumber(playerinfo) X/Y

StepsDescription(pi) X/Y
PlayerOptions(pi) X/Y


SongOptions X/Y

ActiveAttackList(pi) X/Y

LyricDisplay

[StepsDisplayGameplay]
# ScreenGameplay hardcodes this section name 
# It doesn't become apparent until course stage 2 why this section is needed (ie, to get rid of unwanted objects)
ShowTicks=false
ShowMeter=false
ShowDescription=false
ShowCredit=false
ShowAutogen=false
ShowStepsType=false

[Gameplay StepsDisplay]
# difficulty icon/meter
MeterOnCommand=shadowlength,0;zoom,1.5
MeterSetCommand=diffusealpha,1
MeterSetMessageCommand=%function(s,p) if p.Steps or p.Course then \
	s:diffusecolor(unpack(DifficultyColors[(p.Steps or p.Course):GetDifficulty()])) \
end end
ZeroMeterString="x"
MeterFormatString="%d"
MeterX=0
MeterY=0
FrameX=0
FrameY=0
FrameOnCommand=
NumTicks=
MaxTicks=
ShowTicks=false
ShowMeter=true
ShowDescription=false
ShowCredit=false
ShowAutogen=false
ShowStepsType=false

[Background]
LeftEdge=SCREEN_LEFT
TopEdge=SCREEN_TOP
RightEdge=SCREEN_RIGHT
BottomEdge=SCREEN_BOTTOM

# brightnesses: p1, p2, fade (all quads)
# positions are: p1, fade (slit in middle), p2
BrightnessOverlayFadeCommand=stoptweening;linear,0.5;clearzbuffer,Bool[true]
ClampOutputPercent=0

ShowDancingCharacters=true
#UseStaticBackground
#RandomBGStartBeat
#RandomBGChangeMeasures
#RandomBGChangesWhenBPMChangesAtMeasureStart
#RandomBGEndsAtLastBeat


[HoldJudgment]
HoldJudgmentHeldCommand=diffusealpha,1;zoom,1.2;decelerate,1/15;zoom,1;sleep,.3;accelerate,.25;diffusealpha,0;zoom,.25
HoldJudgmentLetGoCommand=diffusealpha,1;zoom,1.2;decelerate,1/15;zoom,1;sleep,.3;accelerate,.25;diffusealpha,0;zoom,.25

[NoteField]
# TODO: All evaluated on theme load. Hope there's a separate one for the editor

ShowBoard=false
ShowBeatBars=false
#FadeBeforeTargetsPercent
BarMeasureAlpha=1
Bar4thAlpha=1
Bar8thAlpha=1
Bar16thAlpha=1
#FadeFailTime

# guessing this is stuff for the editor:
#AreaHighlightColor

#BPMColor
#StopColor
#WarpColor
#TimeSignatureColor
#TickcountColor
#ComboColor
#LabelColor
#SpeedColor
#ScrollColor
#FakeColor

#BPMIsLeftSide
#StopIsLeftSide
#DelayIsLeftSide
#WarpIsLeftSide
#TimeSignatureIsLeftSide
#TickcountIsLeftSide
#ComboIsLeftSide
#LabelIsLeftSide
#SpeedIsLeftSide
#ScrollIsLeftSide
#FakeIsLeftSide

#BPMOffsetX
#StopOffsetX
#DelayOffsetX
#WarpOffsetX
#TimeSignatureOffsetX
#TickcountOffsetX
#ComboOffsetX
#LabelOffsetX
#SpeedOffsetX
#ScrollOffsetX
#FakeOffsetX

[ScoreDisplayPercentage Percent]

# this is a lua function:
Format=FormatPercentScore

PercentUseRemainder=false
# only if UseRemainder is on:
PercentFormat=
RemainderFormat=

PercentP1OnCommand=zoom,2
PercentP2OnCommand=zoom,2

[PlayerGameplay]

Fallback="Player"

ReceptorArrowsYStandard=96-SCREEN_CENTER_Y
ReceptorArrowsYReverse=SCREEN_CENTER_Y-48
HoldJudgmentYStandard=THEME:GetMetric("Player","ReceptorArrowsYStandard")+48
HoldJudgmentYReverse=THEME:GetMetric("Player","ReceptorArrowsYReverse")-48

BrightGhostComboThreshold=100

# from _fallback:
DrawDistanceBeforeTargetsPixels=SCREEN_HEIGHT
DrawDistanceAfterTargetsPixels=-128

ComboUnderField=true
TapJudgmentsUnderField=false
HoldTapJudgmentsUnderField=true

# initial positioning functions:
JudgmentTransformCommand=%function(s,p) \
	s:y(not p.bReverse \
		and THEME:GetMetric("Player","ReceptorArrowsYStandard")+100 \
		or THEME:GetMetric("Player","ReceptorArrowsYReverse")-114) \
	s:aux(PlayerIndex[p.Player]) \
end
ComboTransformCommand=%function(s,p) \
	s:y((not p.bReverse and 255 or 220)-SCREEN_CENTER_Y) \
	s:aux(PlayerIndex[p.Player]) \
end

#on Player::Load()

AttackDisplayXOffsetOneSideP1=
AttackDisplayXOffsetOneSideP2=
AttackDisplayXOffsetBothSides=
AttackDisplayY=
AttackDisplayYReverse=

[Player]
# All hardcoded to read from [Player] :
InitialHoldLife=1
MaxHoldLife=1
PenalizeTapScoreNone=false
JudgeHoldNotesOnSameRowTogether=false
CheckpointsFlashOnHold=false
ImmediateHoldLetGo=false
ComboBreakOnImmediateHoldLetGo=false
RequireStepOnHoldHeads=true
RequireStepOnMines=false
HoldTriggersTapNotes=false
RollBodyIncrementsCombo=false
[Gameplay]
AvoidMineIncrementsCombo=false
MineHitIncrementsMissCombo=false
[Player]
CheckpointsTapsSeparateJudgment=true
ScoreMissedHoldsAndRolls=false

#immediate colour combo
PercentUntilColorCombo=0
#announcer:
ComboStoppedAt=50

# Not using 'attacks' so these are inapplicable
AttackRunTimeRandom=
AttackRunTimeMine=
MModHighCap=2000

# again: inapplicable:
BattleRaveMirror=false

[LifeMeterBar]
DangerThreshold=0.25
InitialValue=0.5
HotValue=1.0
LifeMultiplier=1.0
MinStayAlive="TapNoteScore_W4"
ForceLifeDifficultyOnExtraStage=false
ExtraStageLifeDifficulty=1.0

# ITG deltas:
LifePercentChangeW1=0.008
LifePercentChangeW2=0.008
LifePercentChangeW3=0.004
LifePercentChangeW4=0.000
#NOTE: W5 is unused but leave it in for now. and change it for FA+ timing
LifePercentChangeW5=-0.050
LifePercentChangeMiss=-0.100
LifePercentChangeHitMine=-0.050
LifePercentChangeHeld=IsGame("pump") and 0.000 or 0.008
LifePercentChangeLetGo=IsGame("pump") and 0.000 or -0.080
LifePercentChangeMissedHold=0.000
LifePercentChangeCheckpointMiss=-0.080
LifePercentChangeCheckpointHit=0.008

UnderX=0
UnderY=0
DangerX=0
DangerY=0
StreamX=0
StreamY=0
OverX=0
OverY=0

#NOTE: this gets rotated 90 deg ACW to make the lifebar vertical
MeterWidth=SCREEN_HEIGHT-160
MeterHeight=32

#StreamNormalOnCommand=
#StreamHotOnCommand=
#StreamPassingOnCommand=

[StreamDisplay]
# The stream sprite must be a power of 2 to render correctly.
# positioning:
PillTransformFunction=cmd(zoomtowidth,320)

# ITG values:
VelocityMultiplier=4
VelocityMin=-.06
VelocityMax=.02
SpringMultiplier=2
ViscosityMultiplier=0.2

TextureCoordScaleX=1

NumPills=1
AlwaysBounceNormalBar=false

[--Evaluation--]
[Evaluation]
Class="ScreenEvaluation"
Fallback="Menu"
TimerSeconds=45
PrevScreen=Branch.EvaluationNext()
NextScreen=Branch.EvaluationNext()
CheerDelaySeconds=1.5

#Summary means load small banners instead of large, finalize scores, and show cumulative stats.
Summary=false

# Do everything by ourself in Lua, not here:
PlayerOptionsP1X=
PlayerOptionsP1Y=
PlayerOptionsP1OnCommand=visible,false
PlayerOptionsP1OffCommand=
PlayerOptionsP2X=
PlayerOptionsP2Y=
PlayerOptionsP2OnCommand=visible,false
PlayerOptionsP2OffCommand=
PlayerOptionsSeparator=", "
PlayerOptionsHideFailType=true
SongOptionsX=
SongOptionsY=
SongOptionsOnCommand=visible,false
SongOptionsOffCommand=
DisqualifiedP1X=
DisqualifiedP1Y=
DisqualifiedP1OnCommand=visible,false
DisqualifiedP1OffCommand=
DisqualifiedP2X=
DisqualifiedP2Y=
DisqualifiedP2OnCommand=visible,false
DisqualifiedP2OffCommand=
ShowBannerArea=false
ShowGradeArea=false
ShowPointsArea=false
ShowBonusArea=false
ShowSurvivedArea=false
ShowWinArea=false
RollingNumbersClass="RollingNumbersEvaluation"
RollingNumbersMaxComboClass="RollingNumbersEvaluation"
ShowJudgmentLineW1=false
ShowJudgmentLineW2=false
ShowJudgmentLineW3=false
ShowJudgmentLineW4=false
ShowJudgmentLineW5=false
ShowJudgmentLineMiss=false
ShowJudgmentLineHeld=false
ShowJudgmentLineMaxCombo=false
ShowSharedJudgmentLineLabels=false
CheckpointsWithJudgments=false
ShowDetailArea=false
ShowScoreArea=false
ShowTimeArea=false

[EvaluationStage]
Fallback="Evaluation"

[EvaluationCourse]
Fallback="Evaluation"

[EvaluationStage1]
Fallback="EvaluationStage"
[EvaluationStage2]
Fallback="EvaluationStage"
[EvaluationStage3]
Fallback="EvaluationStage"
[EvaluationStage4]
Fallback="EvaluationStage"
[EvaluationStageQuad]
Fallback="EvaluationStage"
[EvaluationStageFailed]
Fallback="EvaluationStage"
[--]
[EvaluationCourse1]
Fallback="EvaluationCourse"
[EvaluationCourse2]
Fallback="EvaluationCourse"
[EvaluationCourse3]
Fallback="EvaluationCourse"
[EvaluationCourse4]
Fallback="EvaluationCourse"

[EvaluationCourseQuad]
Fallback="EvaluationCourse"
[EvaluationCourseFailed]
Fallback="EvaluationCourse"

[LifeGraph]
BodyWidth=400
BodyHeight=72
LineOnCommand=visible,false

[ComboGraph]
BodyWidth=400
BodyHeight=72

[------Ending------]

[NameEntry]
Fallback="Menu"
Class="ScreenNameEntryTraditional"
ForceTimerWait=true
MaxRankingNameLength=4
NextScreen=Branch.NameEntryNext()

[SaveProfiles]
Class="ScreenProfileSave"
Fallback="Null"
ScreenOnCommand=Continue
NextScreen=Branch.SaveProfilesNext()
PlayMusic=false

[Ending]
Fallback="RankingSongs"
# Reset after loading gameover objects:
ResetGameState=false
ScreenOnCommand=%function(s) GAMESTATE:Reset() end
